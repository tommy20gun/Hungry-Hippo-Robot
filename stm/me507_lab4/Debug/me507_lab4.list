
me507_lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08008a8c  08008a8c  00018a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c9c  08008c9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008c9c  08008c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca4  08008ca4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000070  08008d20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08008d20  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c16a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a3  00000000  00000000  0003c20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0003f2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  000404e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4d0  00000000  00000000  00041640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001670b  00000000  00000000  0005db10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abade  00000000  00000000  0007421b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fcf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006754  00000000  00000000  0011fd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a74 	.word	0x08008a74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08008a74 	.word	0x08008a74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_Z16getADCsimplifiedv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int getADCsimplified(){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <_Z16getADCsimplifiedv+0x28>)
 800059a:	f001 fdf7 	bl	800218c <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 800059e:	2101      	movs	r1, #1
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <_Z16getADCsimplifiedv+0x28>)
 80005a2:	f001 fea7 	bl	80022f4 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	adcres = HAL_ADC_GetValue(&hadc1);
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <_Z16getADCsimplifiedv+0x28>)
 80005a8:	f002 f83f 	bl	800262a <HAL_ADC_GetValue>
 80005ac:	4603      	mov	r3, r0
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <_Z16getADCsimplifiedv+0x2c>)
 80005b2:	801a      	strh	r2, [r3, #0]
	return adcres;
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <_Z16getADCsimplifiedv+0x2c>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000008c 	.word	0x2000008c
 80005c0:	200003b2 	.word	0x200003b2

080005c4 <_Z16colorSensor_Initv>:


void colorSensor_Init(){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af04      	add	r7, sp, #16
	//
	uint8_t configData1 = 0x08 | 0x05;
 80005ca:	230d      	movs	r3, #13
 80005cc:	71fb      	strb	r3, [r7, #7]
	uint8_t configData2 = 0x3F;
 80005ce:	233f      	movs	r3, #63	; 0x3f
 80005d0:	71bb      	strb	r3, [r7, #6]
	uint8_t configData3 = 0x00;
 80005d2:	2300      	movs	r3, #0
 80005d4:	717b      	strb	r3, [r7, #5]
	uint8_t resetData = 0x46;
 80005d6:	2346      	movs	r3, #70	; 0x46
 80005d8:	713b      	strb	r3, [r7, #4]
	//reset
	HAL_I2C_Mem_Write(&hi2c2, 0x88, 0x00, I2C_MEMADD_SIZE_8BIT, &resetData, 1, HAL_MAX_DELAY);
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	9302      	str	r3, [sp, #8]
 80005e0:	2301      	movs	r3, #1
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2301      	movs	r3, #1
 80005ea:	2200      	movs	r2, #0
 80005ec:	2188      	movs	r1, #136	; 0x88
 80005ee:	4817      	ldr	r0, [pc, #92]	; (800064c <_Z16colorSensor_Initv+0x88>)
 80005f0:	f002 ff10 	bl	8003414 <HAL_I2C_Mem_Write>

	//config to set all config bits to 0 for correct operating isntructions: RGB mode, high IR correction, no interrupt
	HAL_I2C_Mem_Write(&hi2c2, 0x88, 0x01, I2C_MEMADD_SIZE_8BIT, &configData1,1,HAL_MAX_DELAY );
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	2201      	movs	r2, #1
 8000606:	2188      	movs	r1, #136	; 0x88
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <_Z16colorSensor_Initv+0x88>)
 800060a:	f002 ff03 	bl	8003414 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, 0x88, 0x02, I2C_MEMADD_SIZE_8BIT, &configData2,1,HAL_MAX_DELAY );
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	9302      	str	r3, [sp, #8]
 8000614:	2301      	movs	r3, #1
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	1dbb      	adds	r3, r7, #6
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	2202      	movs	r2, #2
 8000620:	2188      	movs	r1, #136	; 0x88
 8000622:	480a      	ldr	r0, [pc, #40]	; (800064c <_Z16colorSensor_Initv+0x88>)
 8000624:	f002 fef6 	bl	8003414 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, 0x88, 0x03, I2C_MEMADD_SIZE_8BIT, &configData3,1,HAL_MAX_DELAY );
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	9302      	str	r3, [sp, #8]
 800062e:	2301      	movs	r3, #1
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	1d7b      	adds	r3, r7, #5
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2301      	movs	r3, #1
 8000638:	2203      	movs	r2, #3
 800063a:	2188      	movs	r1, #136	; 0x88
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <_Z16colorSensor_Initv+0x88>)
 800063e:	f002 fee9 	bl	8003414 <HAL_I2C_Mem_Write>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000d4 	.word	0x200000d4

08000650 <_ZSt3maxItERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	881a      	ldrh	r2, [r3, #0]
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	429a      	cmp	r2, r3
 8000664:	d201      	bcs.n	800066a <_ZSt3maxItERKT_S2_S2_+0x1a>
	return __b;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	e000      	b.n	800066c <_ZSt3maxItERKT_S2_S2_+0x1c>
      return __a;
 800066a:	687b      	ldr	r3, [r7, #4]
    }
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <_Z26colorSensor_DetermineColorB5cxx11v>:

std::string colorSensor_DetermineColor(){
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	; 0x30
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]

	    HAL_I2C_Mem_Read(&hi2c2, 0x88, 0x09, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&colorData, 8, HAL_MAX_DELAY);
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	2308      	movs	r3, #8
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	4b4a      	ldr	r3, [pc, #296]	; (80007b4 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	2209      	movs	r2, #9
 8000692:	2188      	movs	r1, #136	; 0x88
 8000694:	4848      	ldr	r0, [pc, #288]	; (80007b8 <_Z26colorSensor_DetermineColorB5cxx11v+0x140>)
 8000696:	f002 ffb7 	bl	8003608 <HAL_I2C_Mem_Read>
		//stores byte data into int values used to determine color
		greenValue = (colorData[1] << 8) | colorData[0];
 800069a:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 800069c:	785b      	ldrb	r3, [r3, #1]
 800069e:	021b      	lsls	r3, r3, #8
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	4b44      	ldr	r3, [pc, #272]	; (80007b4 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	4b43      	ldr	r3, [pc, #268]	; (80007bc <_Z26colorSensor_DetermineColorB5cxx11v+0x144>)
 80006b0:	801a      	strh	r2, [r3, #0]
		redValue = (colorData[3] << 8) | colorData[2];
 80006b2:	4b40      	ldr	r3, [pc, #256]	; (80007b4 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 80006b4:	78db      	ldrb	r3, [r3, #3]
 80006b6:	021b      	lsls	r3, r3, #8
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	4b3e      	ldr	r3, [pc, #248]	; (80007b4 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 80006bc:	789b      	ldrb	r3, [r3, #2]
 80006be:	b21b      	sxth	r3, r3
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b21b      	sxth	r3, r3
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	4b3e      	ldr	r3, [pc, #248]	; (80007c0 <_Z26colorSensor_DetermineColorB5cxx11v+0x148>)
 80006c8:	801a      	strh	r2, [r3, #0]
		blueValue = (colorData[5] << 8) | colorData[4];
 80006ca:	4b3a      	ldr	r3, [pc, #232]	; (80007b4 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 80006cc:	795b      	ldrb	r3, [r3, #5]
 80006ce:	021b      	lsls	r3, r3, #8
 80006d0:	b21a      	sxth	r2, r3
 80006d2:	4b38      	ldr	r3, [pc, #224]	; (80007b4 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	b21b      	sxth	r3, r3
 80006d8:	4313      	orrs	r3, r2
 80006da:	b21b      	sxth	r3, r3
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b39      	ldr	r3, [pc, #228]	; (80007c4 <_Z26colorSensor_DetermineColorB5cxx11v+0x14c>)
 80006e0:	801a      	strh	r2, [r3, #0]
		if (green-red)/((green+red)/2) < 0.2
			return "No dominant color"

			*/
		//This algorithm was written by chat GPT to find the max int value.
		int maxValue = std::max(std::max(greenValue, redValue), blueValue);
 80006e2:	4937      	ldr	r1, [pc, #220]	; (80007c0 <_Z26colorSensor_DetermineColorB5cxx11v+0x148>)
 80006e4:	4835      	ldr	r0, [pc, #212]	; (80007bc <_Z26colorSensor_DetermineColorB5cxx11v+0x144>)
 80006e6:	f7ff ffb3 	bl	8000650 <_ZSt3maxItERKT_S2_S2_>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4935      	ldr	r1, [pc, #212]	; (80007c4 <_Z26colorSensor_DetermineColorB5cxx11v+0x14c>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffae 	bl	8000650 <_ZSt3maxItERKT_S2_S2_>
 80006f4:	4603      	mov	r3, r0
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	61fb      	str	r3, [r7, #28]

		if (maxValue == blueValue)
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <_Z26colorSensor_DetermineColorB5cxx11v+0x14c>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	461a      	mov	r2, r3
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	4293      	cmp	r3, r2
 8000704:	d111      	bne.n	800072a <_Z26colorSensor_DetermineColorB5cxx11v+0xb2>
			return "Blue";
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4618      	mov	r0, r3
 800070c:	f007 fb5a 	bl	8007dc4 <_ZNSaIcEC1Ev>
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	461a      	mov	r2, r3
 8000716:	492c      	ldr	r1, [pc, #176]	; (80007c8 <_Z26colorSensor_DetermineColorB5cxx11v+0x150>)
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f007 fbd9 	bl	8007ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	4618      	mov	r0, r3
 8000724:	f007 fb4f 	bl	8007dc6 <_ZNSaIcED1Ev>
		else if (maxValue == redValue)
			return "Red";
		else
			return "No dominant color";

}
 8000728:	e040      	b.n	80007ac <_Z26colorSensor_DetermineColorB5cxx11v+0x134>
		else if (maxValue == greenValue)
 800072a:	4b24      	ldr	r3, [pc, #144]	; (80007bc <_Z26colorSensor_DetermineColorB5cxx11v+0x144>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	4293      	cmp	r3, r2
 8000734:	d111      	bne.n	800075a <_Z26colorSensor_DetermineColorB5cxx11v+0xe2>
			return "Green";
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4618      	mov	r0, r3
 800073c:	f007 fb42 	bl	8007dc4 <_ZNSaIcEC1Ev>
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	461a      	mov	r2, r3
 8000746:	4921      	ldr	r1, [pc, #132]	; (80007cc <_Z26colorSensor_DetermineColorB5cxx11v+0x154>)
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f007 fbc1 	bl	8007ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	4618      	mov	r0, r3
 8000754:	f007 fb37 	bl	8007dc6 <_ZNSaIcED1Ev>
}
 8000758:	e028      	b.n	80007ac <_Z26colorSensor_DetermineColorB5cxx11v+0x134>
		else if (maxValue == redValue)
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <_Z26colorSensor_DetermineColorB5cxx11v+0x148>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	4293      	cmp	r3, r2
 8000764:	d111      	bne.n	800078a <_Z26colorSensor_DetermineColorB5cxx11v+0x112>
			return "Red";
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4618      	mov	r0, r3
 800076c:	f007 fb2a 	bl	8007dc4 <_ZNSaIcEC1Ev>
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	461a      	mov	r2, r3
 8000776:	4916      	ldr	r1, [pc, #88]	; (80007d0 <_Z26colorSensor_DetermineColorB5cxx11v+0x158>)
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f007 fba9 	bl	8007ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4618      	mov	r0, r3
 8000784:	f007 fb1f 	bl	8007dc6 <_ZNSaIcED1Ev>
}
 8000788:	e010      	b.n	80007ac <_Z26colorSensor_DetermineColorB5cxx11v+0x134>
			return "No dominant color";
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	4618      	mov	r0, r3
 8000790:	f007 fb18 	bl	8007dc4 <_ZNSaIcEC1Ev>
 8000794:	f107 0318 	add.w	r3, r7, #24
 8000798:	461a      	mov	r2, r3
 800079a:	490e      	ldr	r1, [pc, #56]	; (80007d4 <_Z26colorSensor_DetermineColorB5cxx11v+0x15c>)
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f007 fb97 	bl	8007ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 fb0d 	bl	8007dc6 <_ZNSaIcED1Ev>
}
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200003ac 	.word	0x200003ac
 80007b8:	200000d4 	.word	0x200000d4
 80007bc:	200003a8 	.word	0x200003a8
 80007c0:	200003a6 	.word	0x200003a6
 80007c4:	200003aa 	.word	0x200003aa
 80007c8:	08008a8c 	.word	0x08008a8c
 80007cc:	08008a94 	.word	0x08008a94
 80007d0:	08008a9c 	.word	0x08008a9c
 80007d4:	08008aa0 	.word	0x08008aa0

080007d8 <_Z15enableAllMotorsv>:

void enableAllMotors(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	  driver1.enable_driver();
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <_Z15enableAllMotorsv+0x34>)
 80007de:	f000 ff37 	bl	8001650 <_ZN12motor_driver13enable_driverEv>
	  driver2.enable_driver();
 80007e2:	480b      	ldr	r0, [pc, #44]	; (8000810 <_Z15enableAllMotorsv+0x38>)
 80007e4:	f000 ff34 	bl	8001650 <_ZN12motor_driver13enable_driverEv>
	  driver3.enable_driver();
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <_Z15enableAllMotorsv+0x3c>)
 80007ea:	f000 ff31 	bl	8001650 <_ZN12motor_driver13enable_driverEv>
	  driver4.enable_driver();
 80007ee:	480a      	ldr	r0, [pc, #40]	; (8000818 <_Z15enableAllMotorsv+0x40>)
 80007f0:	f000 ff2e 	bl	8001650 <_ZN12motor_driver13enable_driverEv>
	  driver5.enable_driver();
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <_Z15enableAllMotorsv+0x44>)
 80007f6:	f000 ff2b 	bl	8001650 <_ZN12motor_driver13enable_driverEv>
	  servo1.enable_driver();
 80007fa:	4809      	ldr	r0, [pc, #36]	; (8000820 <_Z15enableAllMotorsv+0x48>)
 80007fc:	f001 f817 	bl	800182e <_ZN12servo_driver13enable_driverEv>
	  servo2.enable_driver();
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <_Z15enableAllMotorsv+0x4c>)
 8000802:	f001 f814 	bl	800182e <_ZN12servo_driver13enable_driverEv>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200002dc 	.word	0x200002dc
 8000810:	200002ec 	.word	0x200002ec
 8000814:	200002fc 	.word	0x200002fc
 8000818:	2000030c 	.word	0x2000030c
 800081c:	2000031c 	.word	0x2000031c
 8000820:	2000032c 	.word	0x2000032c
 8000824:	20000334 	.word	0x20000334

08000828 <_Z16disableAllMotorsv>:

void disableAllMotors(){
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	  driver1.disable_driver();
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <_Z16disableAllMotorsv+0x34>)
 800082e:	f000 ff27 	bl	8001680 <_ZN12motor_driver14disable_driverEv>
	  driver2.disable_driver();
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <_Z16disableAllMotorsv+0x38>)
 8000834:	f000 ff24 	bl	8001680 <_ZN12motor_driver14disable_driverEv>
	  driver3.disable_driver();
 8000838:	480a      	ldr	r0, [pc, #40]	; (8000864 <_Z16disableAllMotorsv+0x3c>)
 800083a:	f000 ff21 	bl	8001680 <_ZN12motor_driver14disable_driverEv>
	  driver4.disable_driver();
 800083e:	480a      	ldr	r0, [pc, #40]	; (8000868 <_Z16disableAllMotorsv+0x40>)
 8000840:	f000 ff1e 	bl	8001680 <_ZN12motor_driver14disable_driverEv>
	  driver5.disable_driver();
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <_Z16disableAllMotorsv+0x44>)
 8000846:	f000 ff1b 	bl	8001680 <_ZN12motor_driver14disable_driverEv>
	  servo1.disable_driver();
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <_Z16disableAllMotorsv+0x48>)
 800084c:	f000 ffff 	bl	800184e <_ZN12servo_driver14disable_driverEv>
	  servo2.disable_driver();
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <_Z16disableAllMotorsv+0x4c>)
 8000852:	f000 fffc 	bl	800184e <_ZN12servo_driver14disable_driverEv>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200002dc 	.word	0x200002dc
 8000860:	200002ec 	.word	0x200002ec
 8000864:	200002fc 	.word	0x200002fc
 8000868:	2000030c 	.word	0x2000030c
 800086c:	2000031c 	.word	0x2000031c
 8000870:	2000032c 	.word	0x2000032c
 8000874:	20000334 	.word	0x20000334

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087e:	f001 fbab 	bl	8001fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000882:	f000 f8c7 	bl	8000a14 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f000 fcc3 	bl	8001210 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 800088a:	f000 fa5d 	bl	8000d48 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 800088e:	f000 f9c3 	bl	8000c18 <_ZL12MX_TIM1_Initv>
  MX_USART1_UART_Init();
 8000892:	f000 fc8f 	bl	80011b4 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 8000896:	f000 f92f 	bl	8000af8 <_ZL12MX_ADC1_Initv>
  MX_I2C2_Init();
 800089a:	f000 f989 	bl	8000bb0 <_ZL12MX_I2C2_Initv>
  MX_TIM3_Init();
 800089e:	f000 fae1 	bl	8000e64 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80008a2:	f000 fb77 	bl	8000f94 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 80008a6:	f000 fc0d 	bl	80010c4 <_ZL12MX_TIM5_Initv>


    while (1)
    {
    	//start
    	if (state == 0){
 80008aa:	4b50      	ldr	r3, [pc, #320]	; (80009ec <main+0x174>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0fb      	beq.n	80008aa <main+0x32>
    		//interrupt will change the state to 1 to begin the program.

    	}

    	//state 1: listen to UART 1 and pick up balls
    	else if (state ==1){
 80008b2:	4b4e      	ldr	r3, [pc, #312]	; (80009ec <main+0x174>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d10e      	bne.n	80008d8 <main+0x60>


    		//if there is no light, meaning robot is not on the field
    		//checks the light sensor so that when the robot is off the field, it will go to state 2.
    		//adcres = 500;
    		adcres = getADCsimplified();
 80008ba:	f7ff fe6b 	bl	8000594 <_Z16getADCsimplifiedv>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b4b      	ldr	r3, [pc, #300]	; (80009f0 <main+0x178>)
 80008c4:	801a      	strh	r2, [r3, #0]
    		if (adcres <= 400){
 80008c6:	4b4a      	ldr	r3, [pc, #296]	; (80009f0 <main+0x178>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80008ce:	d8ec      	bhi.n	80008aa <main+0x32>
    			state = 2;
 80008d0:	4b46      	ldr	r3, [pc, #280]	; (80009ec <main+0x174>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	e7e8      	b.n	80008aa <main+0x32>
		}



    	//state 2: when the robot moves outside of the arena or into trouble, backtrack and then once backtrack is confirmed, go back to state 1
    	else if (state == 2){
 80008d8:	4b44      	ldr	r3, [pc, #272]	; (80009ec <main+0x174>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d130      	bne.n	8000942 <main+0xca>

    		//drives backwards until the light sensor tells us its back on track
    		driver1.set_direction(1);
 80008e0:	2101      	movs	r1, #1
 80008e2:	4844      	ldr	r0, [pc, #272]	; (80009f4 <main+0x17c>)
 80008e4:	f000 ff81 	bl	80017ea <_ZN12motor_driver13set_directionEh>
    		driver2.set_direction(1);
 80008e8:	2101      	movs	r1, #1
 80008ea:	4843      	ldr	r0, [pc, #268]	; (80009f8 <main+0x180>)
 80008ec:	f000 ff7d 	bl	80017ea <_ZN12motor_driver13set_directionEh>
    		driver1.set_duty_cycle(1000);
 80008f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008f4:	483f      	ldr	r0, [pc, #252]	; (80009f4 <main+0x17c>)
 80008f6:	f000 fedb 	bl	80016b0 <_ZN12motor_driver14set_duty_cycleEt>
    		driver2.set_duty_cycle(1000);
 80008fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008fe:	483e      	ldr	r0, [pc, #248]	; (80009f8 <main+0x180>)
 8000900:	f000 fed6 	bl	80016b0 <_ZN12motor_driver14set_duty_cycleEt>


    		//checks the light sensor so that when the robot is back on the field, it will return to state 1.
    		adcres = getADCsimplified();
 8000904:	f7ff fe46 	bl	8000594 <_Z16getADCsimplifiedv>
 8000908:	4603      	mov	r3, r0
 800090a:	b29a      	uxth	r2, r3
 800090c:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <main+0x178>)
 800090e:	801a      	strh	r2, [r3, #0]
    		//if there is light, meaning the robot is on the field
    		if (adcres >= 400){
 8000910:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <main+0x178>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000918:	d3c7      	bcc.n	80008aa <main+0x32>
    			state = 1;
 800091a:	4b34      	ldr	r3, [pc, #208]	; (80009ec <main+0x174>)
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]
    			driver1.set_direction(0);
 8000920:	2100      	movs	r1, #0
 8000922:	4834      	ldr	r0, [pc, #208]	; (80009f4 <main+0x17c>)
 8000924:	f000 ff61 	bl	80017ea <_ZN12motor_driver13set_directionEh>
    			driver2.set_direction(0);
 8000928:	2100      	movs	r1, #0
 800092a:	4833      	ldr	r0, [pc, #204]	; (80009f8 <main+0x180>)
 800092c:	f000 ff5d 	bl	80017ea <_ZN12motor_driver13set_directionEh>
    			driver1.set_duty_cycle(0);
 8000930:	2100      	movs	r1, #0
 8000932:	4830      	ldr	r0, [pc, #192]	; (80009f4 <main+0x17c>)
 8000934:	f000 febc 	bl	80016b0 <_ZN12motor_driver14set_duty_cycleEt>
    			driver2.set_duty_cycle(0);
 8000938:	2100      	movs	r1, #0
 800093a:	482f      	ldr	r0, [pc, #188]	; (80009f8 <main+0x180>)
 800093c:	f000 feb8 	bl	80016b0 <_ZN12motor_driver14set_duty_cycleEt>
 8000940:	e7b3      	b.n	80008aa <main+0x32>
    		}

    	}

    	//state 3: when the robot is done picking up balls, it will move to stage 3, where it will deposit balls into the corral
    	else if (state == 3){
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <main+0x174>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b03      	cmp	r3, #3
 8000948:	d1af      	bne.n	80008aa <main+0x32>
    		//driver3.set_duty_cycle(1200);
    		//driver4.set_duty_cycle(1200);
    		//driver5.set_duty_cycle(1200);

    		std::string color = colorSensor_DetermineColor();
 800094a:	463b      	mov	r3, r7
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fe93 	bl	8000678 <_Z26colorSensor_DetermineColorB5cxx11v>
    		if (color == "Blue"){
 8000952:	463b      	mov	r3, r7
 8000954:	4929      	ldr	r1, [pc, #164]	; (80009fc <main+0x184>)
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fde9 	bl	800152e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d010      	beq.n	8000984 <main+0x10c>
    			servo1.set_duty_cycle(20);
 8000962:	2114      	movs	r1, #20
 8000964:	4826      	ldr	r0, [pc, #152]	; (8000a00 <main+0x188>)
 8000966:	f000 ff82 	bl	800186e <_ZN12servo_driver14set_duty_cycleEt>
    			HAL_Delay(1000);
 800096a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096e:	f001 fba5 	bl	80020bc <HAL_Delay>
				servo1.set_duty_cycle(10);
 8000972:	210a      	movs	r1, #10
 8000974:	4822      	ldr	r0, [pc, #136]	; (8000a00 <main+0x188>)
 8000976:	f000 ff7a 	bl	800186e <_ZN12servo_driver14set_duty_cycleEt>
    			HAL_Delay(1000);
 800097a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097e:	f001 fb9d 	bl	80020bc <HAL_Delay>
 8000982:	e02d      	b.n	80009e0 <main+0x168>


    		}
    		else if (color == "Green"){
 8000984:	463b      	mov	r3, r7
 8000986:	491f      	ldr	r1, [pc, #124]	; (8000a04 <main+0x18c>)
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fdd0 	bl	800152e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d125      	bne.n	80009e0 <main+0x168>

    		}
    		else if (color == "Red"){
 8000994:	463b      	mov	r3, r7
 8000996:	491c      	ldr	r1, [pc, #112]	; (8000a08 <main+0x190>)
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fdc8 	bl	800152e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d010      	beq.n	80009c6 <main+0x14e>
    			servo2.set_duty_cycle(20);
 80009a4:	2114      	movs	r1, #20
 80009a6:	4819      	ldr	r0, [pc, #100]	; (8000a0c <main+0x194>)
 80009a8:	f000 ff61 	bl	800186e <_ZN12servo_driver14set_duty_cycleEt>
    			HAL_Delay(1000);
 80009ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b0:	f001 fb84 	bl	80020bc <HAL_Delay>
    			servo2.set_duty_cycle(10);
 80009b4:	210a      	movs	r1, #10
 80009b6:	4815      	ldr	r0, [pc, #84]	; (8000a0c <main+0x194>)
 80009b8:	f000 ff59 	bl	800186e <_ZN12servo_driver14set_duty_cycleEt>
    			HAL_Delay(1000);
 80009bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c0:	f001 fb7c 	bl	80020bc <HAL_Delay>
 80009c4:	e00c      	b.n	80009e0 <main+0x168>

    		}
    		else if (color == "No dominant color"){
 80009c6:	463b      	mov	r3, r7
 80009c8:	4911      	ldr	r1, [pc, #68]	; (8000a10 <main+0x198>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fdaf 	bl	800152e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d004      	beq.n	80009e0 <main+0x168>
    			state = 0;
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <main+0x174>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
    			disableAllMotors();
 80009dc:	f7ff ff24 	bl	8000828 <_Z16disableAllMotorsv>
    		std::string color = colorSensor_DetermineColor();
 80009e0:	463b      	mov	r3, r7
 80009e2:	4618      	mov	r0, r3
 80009e4:	f007 fa35 	bl	8007e52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
         */

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    }
 80009e8:	e75f      	b.n	80008aa <main+0x32>
 80009ea:	bf00      	nop
 80009ec:	200002d4 	.word	0x200002d4
 80009f0:	200003b2 	.word	0x200003b2
 80009f4:	200002dc 	.word	0x200002dc
 80009f8:	200002ec 	.word	0x200002ec
 80009fc:	08008a8c 	.word	0x08008a8c
 8000a00:	2000032c 	.word	0x2000032c
 8000a04:	08008a94 	.word	0x08008a94
 8000a08:	08008a9c 	.word	0x08008a9c
 8000a0c:	20000334 	.word	0x20000334
 8000a10:	08008aa0 	.word	0x08008aa0

08000a14 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b094      	sub	sp, #80	; 0x50
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 0320 	add.w	r3, r7, #32
 8000a1e:	2230      	movs	r2, #48	; 0x30
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f007 fb08 	bl	8008038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <_Z18SystemClock_Configv+0xdc>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	4a2b      	ldr	r2, [pc, #172]	; (8000af0 <_Z18SystemClock_Configv+0xdc>)
 8000a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a46:	6413      	str	r3, [r2, #64]	; 0x40
 8000a48:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <_Z18SystemClock_Configv+0xdc>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a54:	2300      	movs	r3, #0
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <_Z18SystemClock_Configv+0xe0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a25      	ldr	r2, [pc, #148]	; (8000af4 <_Z18SystemClock_Configv+0xe0>)
 8000a5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <_Z18SystemClock_Configv+0xe0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a70:	2301      	movs	r3, #1
 8000a72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a84:	230c      	movs	r3, #12
 8000a86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a88:	2360      	movs	r3, #96	; 0x60
 8000a8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a90:	2304      	movs	r3, #4
 8000a92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a94:	f107 0320 	add.w	r3, r7, #32
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f004 fefb 	bl	8005894 <HAL_RCC_OscConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bf14      	ite	ne
 8000aa4:	2301      	movne	r3, #1
 8000aa6:	2300      	moveq	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000aae:	f000 fd39 	bl	8001524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2103      	movs	r1, #3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f005 f958 	bl	8005d84 <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	bf14      	ite	ne
 8000ada:	2301      	movne	r3, #1
 8000adc:	2300      	moveq	r3, #0
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000ae4:	f000 fd1e 	bl	8001524 <Error_Handler>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3750      	adds	r7, #80	; 0x50
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40007000 	.word	0x40007000

08000af8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afe:	463b      	mov	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b0c:	4a26      	ldr	r2, [pc, #152]	; (8000ba8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000b0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <_ZL12MX_ADC1_Initv+0xb4>)
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b58:	4812      	ldr	r0, [pc, #72]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b5a:	f001 fad3 	bl	8002104 <HAL_ADC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	bf14      	ite	ne
 8000b64:	2301      	movne	r3, #1
 8000b66:	2300      	moveq	r3, #0
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8000b6e:	f000 fcd9 	bl	8001524 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4619      	mov	r1, r3
 8000b82:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <_ZL12MX_ADC1_Initv+0xac>)
 8000b84:	f001 fd7c 	bl	8002680 <HAL_ADC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	bf14      	ite	ne
 8000b8e:	2301      	movne	r3, #1
 8000b90:	2300      	moveq	r3, #0
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000b98:	f000 fcc4 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2000008c 	.word	0x2000008c
 8000ba8:	40012000 	.word	0x40012000
 8000bac:	0f000001 	.word	0x0f000001

08000bb0 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_ZL12MX_I2C2_Initv+0x5c>)
 8000bb6:	4a16      	ldr	r2, [pc, #88]	; (8000c10 <_ZL12MX_I2C2_Initv+0x60>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <_ZL12MX_I2C2_Initv+0x5c>)
 8000bbc:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <_ZL12MX_I2C2_Initv+0x64>)
 8000bbe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <_ZL12MX_I2C2_Initv+0x5c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <_ZL12MX_I2C2_Initv+0x5c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <_ZL12MX_I2C2_Initv+0x5c>)
 8000bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bd2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <_ZL12MX_I2C2_Initv+0x5c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <_ZL12MX_I2C2_Initv+0x5c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <_ZL12MX_I2C2_Initv+0x5c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <_ZL12MX_I2C2_Initv+0x5c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bec:	4807      	ldr	r0, [pc, #28]	; (8000c0c <_ZL12MX_I2C2_Initv+0x5c>)
 8000bee:	f002 facd 	bl	800318c <HAL_I2C_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	bf14      	ite	ne
 8000bf8:	2301      	movne	r3, #1
 8000bfa:	2300      	moveq	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8000c02:	f000 fc8f 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200000d4 	.word	0x200000d4
 8000c10:	40005800 	.word	0x40005800
 8000c14:	000186a0 	.word	0x000186a0

08000c18 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b092      	sub	sp, #72	; 0x48
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]
 8000c3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2220      	movs	r2, #32
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f007 f9f8 	bl	8008038 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c48:	4b3d      	ldr	r3, [pc, #244]	; (8000d40 <_ZL12MX_TIM1_Initv+0x128>)
 8000c4a:	4a3e      	ldr	r2, [pc, #248]	; (8000d44 <_ZL12MX_TIM1_Initv+0x12c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 8000c4e:	4b3c      	ldr	r3, [pc, #240]	; (8000d40 <_ZL12MX_TIM1_Initv+0x128>)
 8000c50:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c56:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <_ZL12MX_TIM1_Initv+0x128>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8000c5c:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <_ZL12MX_TIM1_Initv+0x128>)
 8000c5e:	22c8      	movs	r2, #200	; 0xc8
 8000c60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <_ZL12MX_TIM1_Initv+0x128>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c68:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <_ZL12MX_TIM1_Initv+0x128>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <_ZL12MX_TIM1_Initv+0x128>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c74:	4832      	ldr	r0, [pc, #200]	; (8000d40 <_ZL12MX_TIM1_Initv+0x128>)
 8000c76:	f005 fab4 	bl	80061e2 <HAL_TIM_PWM_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bf14      	ite	ne
 8000c80:	2301      	movne	r3, #1
 8000c82:	2300      	moveq	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8000c8a:	f000 fc4b 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4828      	ldr	r0, [pc, #160]	; (8000d40 <_ZL12MX_TIM1_Initv+0x128>)
 8000c9e:	f006 f859 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf14      	ite	ne
 8000ca8:	2301      	movne	r3, #1
 8000caa:	2300      	moveq	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8000cb2:	f000 fc37 	bl	8001524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb6:	2360      	movs	r3, #96	; 0x60
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4819      	ldr	r0, [pc, #100]	; (8000d40 <_ZL12MX_TIM1_Initv+0x128>)
 8000cdc:	f005 fbe4 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bf14      	ite	ne
 8000ce6:	2301      	movne	r3, #1
 8000ce8:	2300      	moveq	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8000cf0:	f000 fc18 	bl	8001524 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	4619      	mov	r1, r3
 8000d16:	480a      	ldr	r0, [pc, #40]	; (8000d40 <_ZL12MX_TIM1_Initv+0x128>)
 8000d18:	f006 f88a 	bl	8006e30 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	bf14      	ite	ne
 8000d22:	2301      	movne	r3, #1
 8000d24:	2300      	moveq	r3, #0
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 8000d2c:	f000 fbfa 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <_ZL12MX_TIM1_Initv+0x128>)
 8000d32:	f000 ff23 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 8000d36:	bf00      	nop
 8000d38:	3748      	adds	r7, #72	; 0x48
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000128 	.word	0x20000128
 8000d44:	40010000 	.word	0x40010000

08000d48 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08e      	sub	sp, #56	; 0x38
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
 8000d76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d78:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <_ZL12MX_TIM2_Initv+0x118>)
 8000d7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8000d80:	4b37      	ldr	r3, [pc, #220]	; (8000e60 <_ZL12MX_TIM2_Initv+0x118>)
 8000d82:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <_ZL12MX_TIM2_Initv+0x118>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000d8e:	4b34      	ldr	r3, [pc, #208]	; (8000e60 <_ZL12MX_TIM2_Initv+0x118>)
 8000d90:	22c8      	movs	r2, #200	; 0xc8
 8000d92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <_ZL12MX_TIM2_Initv+0x118>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <_ZL12MX_TIM2_Initv+0x118>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da0:	482f      	ldr	r0, [pc, #188]	; (8000e60 <_ZL12MX_TIM2_Initv+0x118>)
 8000da2:	f005 f9cf 	bl	8006144 <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bf14      	ite	ne
 8000dac:	2301      	movne	r3, #1
 8000dae:	2300      	moveq	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000db6:	f000 fbb5 	bl	8001524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4826      	ldr	r0, [pc, #152]	; (8000e60 <_ZL12MX_TIM2_Initv+0x118>)
 8000dc8:	f005 fc30 	bl	800662c <HAL_TIM_ConfigClockSource>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf14      	ite	ne
 8000dd2:	2301      	movne	r3, #1
 8000dd4:	2300      	moveq	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000ddc:	f000 fba2 	bl	8001524 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000de0:	481f      	ldr	r0, [pc, #124]	; (8000e60 <_ZL12MX_TIM2_Initv+0x118>)
 8000de2:	f005 f9fe 	bl	80061e2 <HAL_TIM_PWM_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	bf14      	ite	ne
 8000dec:	2301      	movne	r3, #1
 8000dee:	2300      	moveq	r3, #0
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000df6:	f000 fb95 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	4619      	mov	r1, r3
 8000e08:	4815      	ldr	r0, [pc, #84]	; (8000e60 <_ZL12MX_TIM2_Initv+0x118>)
 8000e0a:	f005 ffa3 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf14      	ite	ne
 8000e14:	2301      	movne	r3, #1
 8000e16:	2300      	moveq	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000e1e:	f000 fb81 	bl	8001524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e22:	2360      	movs	r3, #96	; 0x60
 8000e24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <_ZL12MX_TIM2_Initv+0x118>)
 8000e3a:	f005 fb35 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	bf14      	ite	ne
 8000e44:	2301      	movne	r3, #1
 8000e46:	2300      	moveq	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8000e4e:	f000 fb69 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e52:	4803      	ldr	r0, [pc, #12]	; (8000e60 <_ZL12MX_TIM2_Initv+0x118>)
 8000e54:	f000 fe92 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 8000e58:	bf00      	nop
 8000e5a:	3738      	adds	r7, #56	; 0x38
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000170 	.word	0x20000170

08000e64 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e86:	4b41      	ldr	r3, [pc, #260]	; (8000f8c <_ZL12MX_TIM3_Initv+0x128>)
 8000e88:	4a41      	ldr	r2, [pc, #260]	; (8000f90 <_ZL12MX_TIM3_Initv+0x12c>)
 8000e8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e8c:	4b3f      	ldr	r3, [pc, #252]	; (8000f8c <_ZL12MX_TIM3_Initv+0x128>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <_ZL12MX_TIM3_Initv+0x128>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4799;
 8000e98:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <_ZL12MX_TIM3_Initv+0x128>)
 8000e9a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000e9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <_ZL12MX_TIM3_Initv+0x128>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <_ZL12MX_TIM3_Initv+0x128>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eac:	4837      	ldr	r0, [pc, #220]	; (8000f8c <_ZL12MX_TIM3_Initv+0x128>)
 8000eae:	f005 f998 	bl	80061e2 <HAL_TIM_PWM_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	bf14      	ite	ne
 8000eb8:	2301      	movne	r3, #1
 8000eba:	2300      	moveq	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8000ec2:	f000 fb2f 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	482d      	ldr	r0, [pc, #180]	; (8000f8c <_ZL12MX_TIM3_Initv+0x128>)
 8000ed6:	f005 ff3d 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf14      	ite	ne
 8000ee0:	2301      	movne	r3, #1
 8000ee2:	2300      	moveq	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8000eea:	f000 fb1b 	bl	8001524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eee:	2360      	movs	r3, #96	; 0x60
 8000ef0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	4619      	mov	r1, r3
 8000f04:	4821      	ldr	r0, [pc, #132]	; (8000f8c <_ZL12MX_TIM3_Initv+0x128>)
 8000f06:	f005 facf 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8000f1a:	f000 fb03 	bl	8001524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2204      	movs	r2, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4819      	ldr	r0, [pc, #100]	; (8000f8c <_ZL12MX_TIM3_Initv+0x128>)
 8000f26:	f005 fabf 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bf14      	ite	ne
 8000f30:	2301      	movne	r3, #1
 8000f32:	2300      	moveq	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8000f3a:	f000 faf3 	bl	8001524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2208      	movs	r2, #8
 8000f42:	4619      	mov	r1, r3
 8000f44:	4811      	ldr	r0, [pc, #68]	; (8000f8c <_ZL12MX_TIM3_Initv+0x128>)
 8000f46:	f005 faaf 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bf14      	ite	ne
 8000f50:	2301      	movne	r3, #1
 8000f52:	2300      	moveq	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 8000f5a:	f000 fae3 	bl	8001524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	220c      	movs	r2, #12
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <_ZL12MX_TIM3_Initv+0x128>)
 8000f66:	f005 fa9f 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf14      	ite	ne
 8000f70:	2301      	movne	r3, #1
 8000f72:	2300      	moveq	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 8000f7a:	f000 fad3 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <_ZL12MX_TIM3_Initv+0x128>)
 8000f80:	f000 fdfc 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200001b8 	.word	0x200001b8
 8000f90:	40000400 	.word	0x40000400

08000f94 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	615a      	str	r2, [r3, #20]
 8000fb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fb6:	4b41      	ldr	r3, [pc, #260]	; (80010bc <_ZL12MX_TIM4_Initv+0x128>)
 8000fb8:	4a41      	ldr	r2, [pc, #260]	; (80010c0 <_ZL12MX_TIM4_Initv+0x12c>)
 8000fba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fbc:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <_ZL12MX_TIM4_Initv+0x128>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <_ZL12MX_TIM4_Initv+0x128>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4799;
 8000fc8:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <_ZL12MX_TIM4_Initv+0x128>)
 8000fca:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000fce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <_ZL12MX_TIM4_Initv+0x128>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b39      	ldr	r3, [pc, #228]	; (80010bc <_ZL12MX_TIM4_Initv+0x128>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fdc:	4837      	ldr	r0, [pc, #220]	; (80010bc <_ZL12MX_TIM4_Initv+0x128>)
 8000fde:	f005 f900 	bl	80061e2 <HAL_TIM_PWM_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bf14      	ite	ne
 8000fe8:	2301      	movne	r3, #1
 8000fea:	2300      	moveq	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8000ff2:	f000 fa97 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	4619      	mov	r1, r3
 8001004:	482d      	ldr	r0, [pc, #180]	; (80010bc <_ZL12MX_TIM4_Initv+0x128>)
 8001006:	f005 fea5 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf14      	ite	ne
 8001010:	2301      	movne	r3, #1
 8001012:	2300      	moveq	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 800101a:	f000 fa83 	bl	8001524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101e:	2360      	movs	r3, #96	; 0x60
 8001020:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	4619      	mov	r1, r3
 8001034:	4821      	ldr	r0, [pc, #132]	; (80010bc <_ZL12MX_TIM4_Initv+0x128>)
 8001036:	f005 fa37 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf14      	ite	ne
 8001040:	2301      	movne	r3, #1
 8001042:	2300      	moveq	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 800104a:	f000 fa6b 	bl	8001524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2204      	movs	r2, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4819      	ldr	r0, [pc, #100]	; (80010bc <_ZL12MX_TIM4_Initv+0x128>)
 8001056:	f005 fa27 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf14      	ite	ne
 8001060:	2301      	movne	r3, #1
 8001062:	2300      	moveq	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 800106a:	f000 fa5b 	bl	8001524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2208      	movs	r2, #8
 8001072:	4619      	mov	r1, r3
 8001074:	4811      	ldr	r0, [pc, #68]	; (80010bc <_ZL12MX_TIM4_Initv+0x128>)
 8001076:	f005 fa17 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf14      	ite	ne
 8001080:	2301      	movne	r3, #1
 8001082:	2300      	moveq	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <_ZL12MX_TIM4_Initv+0xfa>
  {
    Error_Handler();
 800108a:	f000 fa4b 	bl	8001524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	220c      	movs	r2, #12
 8001092:	4619      	mov	r1, r3
 8001094:	4809      	ldr	r0, [pc, #36]	; (80010bc <_ZL12MX_TIM4_Initv+0x128>)
 8001096:	f005 fa07 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	bf14      	ite	ne
 80010a0:	2301      	movne	r3, #1
 80010a2:	2300      	moveq	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <_ZL12MX_TIM4_Initv+0x11a>
  {
    Error_Handler();
 80010aa:	f000 fa3b 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010ae:	4803      	ldr	r0, [pc, #12]	; (80010bc <_ZL12MX_TIM4_Initv+0x128>)
 80010b0:	f000 fd64 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000200 	.word	0x20000200
 80010c0:	40000800 	.word	0x40000800

080010c4 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ca:	f107 0320 	add.w	r3, r7, #32
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
 80010e2:	615a      	str	r2, [r3, #20]
 80010e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <_ZL12MX_TIM5_Initv+0xe8>)
 80010e8:	4a31      	ldr	r2, [pc, #196]	; (80011b0 <_ZL12MX_TIM5_Initv+0xec>)
 80010ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <_ZL12MX_TIM5_Initv+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f2:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <_ZL12MX_TIM5_Initv+0xe8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4799;
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <_ZL12MX_TIM5_Initv+0xe8>)
 80010fa:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80010fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001100:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <_ZL12MX_TIM5_Initv+0xe8>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <_ZL12MX_TIM5_Initv+0xe8>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800110c:	4827      	ldr	r0, [pc, #156]	; (80011ac <_ZL12MX_TIM5_Initv+0xe8>)
 800110e:	f005 f868 	bl	80061e2 <HAL_TIM_PWM_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	bf14      	ite	ne
 8001118:	2301      	movne	r3, #1
 800111a:	2300      	moveq	r3, #0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 8001122:	f000 f9ff 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	4619      	mov	r1, r3
 8001134:	481d      	ldr	r0, [pc, #116]	; (80011ac <_ZL12MX_TIM5_Initv+0xe8>)
 8001136:	f005 fe0d 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf14      	ite	ne
 8001140:	2301      	movne	r3, #1
 8001142:	2300      	moveq	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 800114a:	f000 f9eb 	bl	8001524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800114e:	2360      	movs	r3, #96	; 0x60
 8001150:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2208      	movs	r2, #8
 8001162:	4619      	mov	r1, r3
 8001164:	4811      	ldr	r0, [pc, #68]	; (80011ac <_ZL12MX_TIM5_Initv+0xe8>)
 8001166:	f005 f99f 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	bf14      	ite	ne
 8001170:	2301      	movne	r3, #1
 8001172:	2300      	moveq	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <_ZL12MX_TIM5_Initv+0xba>
  {
    Error_Handler();
 800117a:	f000 f9d3 	bl	8001524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	220c      	movs	r2, #12
 8001182:	4619      	mov	r1, r3
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <_ZL12MX_TIM5_Initv+0xe8>)
 8001186:	f005 f98f 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	bf14      	ite	ne
 8001190:	2301      	movne	r3, #1
 8001192:	2300      	moveq	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800119a:	f000 f9c3 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800119e:	4803      	ldr	r0, [pc, #12]	; (80011ac <_ZL12MX_TIM5_Initv+0xe8>)
 80011a0:	f000 fcec 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000248 	.word	0x20000248
 80011b0:	40000c00 	.word	0x40000c00

080011b4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <_ZL19MX_USART1_UART_Initv+0x58>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ea:	4807      	ldr	r0, [pc, #28]	; (8001208 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011ec:	f005 fe72 	bl	8006ed4 <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001200:	f000 f990 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000290 	.word	0x20000290
 800120c:	40011000 	.word	0x40011000

08001210 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <_ZL12MX_GPIO_Initv+0xc8>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a2a      	ldr	r2, [pc, #168]	; (80012d8 <_ZL12MX_GPIO_Initv+0xc8>)
 8001230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <_ZL12MX_GPIO_Initv+0xc8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <_ZL12MX_GPIO_Initv+0xc8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a23      	ldr	r2, [pc, #140]	; (80012d8 <_ZL12MX_GPIO_Initv+0xc8>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <_ZL12MX_GPIO_Initv+0xc8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <_ZL12MX_GPIO_Initv+0xc8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <_ZL12MX_GPIO_Initv+0xc8>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <_ZL12MX_GPIO_Initv+0xc8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800127a:	2310      	movs	r3, #16
 800127c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4619      	mov	r1, r3
 800128c:	4813      	ldr	r0, [pc, #76]	; (80012dc <_ZL12MX_GPIO_Initv+0xcc>)
 800128e:	f001 fde1 	bl	8002e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8001292:	f241 0304 	movw	r3, #4100	; 0x1004
 8001296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001298:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800129c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129e:	2301      	movs	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	4619      	mov	r1, r3
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <_ZL12MX_GPIO_Initv+0xd0>)
 80012aa:	f001 fdd3 	bl	8002e54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2008      	movs	r0, #8
 80012b4:	f001 fcf7 	bl	8002ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80012b8:	2008      	movs	r0, #8
 80012ba:	f001 fd10 	bl	8002cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2028      	movs	r0, #40	; 0x28
 80012c4:	f001 fcef 	bl	8002ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012c8:	2028      	movs	r0, #40	; 0x28
 80012ca:	f001 fd08 	bl	8002cde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400

080012e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&data, 1);
 80012ec:	2201      	movs	r2, #1
 80012ee:	4959      	ldr	r1, [pc, #356]	; (8001454 <HAL_UART_RxCpltCallback+0x170>)
 80012f0:	4859      	ldr	r0, [pc, #356]	; (8001458 <HAL_UART_RxCpltCallback+0x174>)
 80012f2:	f005 fe3c 	bl	8006f6e <HAL_UART_Receive_IT>
    if(huart == &huart1 && state ==1) {
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a57      	ldr	r2, [pc, #348]	; (8001458 <HAL_UART_RxCpltCallback+0x174>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	f040 80a6 	bne.w	800144c <HAL_UART_RxCpltCallback+0x168>
 8001300:	4b56      	ldr	r3, [pc, #344]	; (800145c <HAL_UART_RxCpltCallback+0x178>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	f040 80a1 	bne.w	800144c <HAL_UART_RxCpltCallback+0x168>
        //HAL_UART_Transmit(&huart2, (uint8_t*)&data, 1, 1000);

        if(data == '\r' && buff_idx >= 4) {
 800130a:	4b52      	ldr	r3, [pc, #328]	; (8001454 <HAL_UART_RxCpltCallback+0x170>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b0d      	cmp	r3, #13
 8001310:	f040 8087 	bne.w	8001422 <HAL_UART_RxCpltCallback+0x13e>
 8001314:	4b52      	ldr	r3, [pc, #328]	; (8001460 <HAL_UART_RxCpltCallback+0x17c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b03      	cmp	r3, #3
 800131a:	f240 8082 	bls.w	8001422 <HAL_UART_RxCpltCallback+0x13e>
            //check for M
            if(msg_buff[buff_idx - 4] != 'M')
 800131e:	4b50      	ldr	r3, [pc, #320]	; (8001460 <HAL_UART_RxCpltCallback+0x17c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3b04      	subs	r3, #4
 8001324:	4a4f      	ldr	r2, [pc, #316]	; (8001464 <HAL_UART_RxCpltCallback+0x180>)
 8001326:	5cd3      	ldrb	r3, [r2, r3]
 8001328:	2b4d      	cmp	r3, #77	; 0x4d
 800132a:	f040 808c 	bne.w	8001446 <HAL_UART_RxCpltCallback+0x162>
                return;

            // check for n = 1 or 2
            if(!(msg_buff[buff_idx - 3] == '1' || msg_buff[buff_idx - 3] == '2'))
 800132e:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <HAL_UART_RxCpltCallback+0x17c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	3b03      	subs	r3, #3
 8001334:	4a4b      	ldr	r2, [pc, #300]	; (8001464 <HAL_UART_RxCpltCallback+0x180>)
 8001336:	5cd3      	ldrb	r3, [r2, r3]
 8001338:	2b31      	cmp	r3, #49	; 0x31
 800133a:	d006      	beq.n	800134a <HAL_UART_RxCpltCallback+0x66>
 800133c:	4b48      	ldr	r3, [pc, #288]	; (8001460 <HAL_UART_RxCpltCallback+0x17c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	3b03      	subs	r3, #3
 8001342:	4a48      	ldr	r2, [pc, #288]	; (8001464 <HAL_UART_RxCpltCallback+0x180>)
 8001344:	5cd3      	ldrb	r3, [r2, r3]
 8001346:	2b32      	cmp	r3, #50	; 0x32
 8001348:	d17f      	bne.n	800144a <HAL_UART_RxCpltCallback+0x166>
                return;

            // get driver number
            int driver_idx = msg_buff[buff_idx - 3] - '0';
 800134a:	4b45      	ldr	r3, [pc, #276]	; (8001460 <HAL_UART_RxCpltCallback+0x17c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	3b03      	subs	r3, #3
 8001350:	4a44      	ldr	r2, [pc, #272]	; (8001464 <HAL_UART_RxCpltCallback+0x180>)
 8001352:	5cd3      	ldrb	r3, [r2, r3]
 8001354:	3b30      	subs	r3, #48	; 0x30
 8001356:	613b      	str	r3, [r7, #16]

            // get duty cycle
            msg_buff[buff_idx] = 0;
 8001358:	4b41      	ldr	r3, [pc, #260]	; (8001460 <HAL_UART_RxCpltCallback+0x17c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b41      	ldr	r3, [pc, #260]	; (8001464 <HAL_UART_RxCpltCallback+0x180>)
 8001360:	2100      	movs	r1, #0
 8001362:	5499      	strb	r1, [r3, r2]
            long dc_initial = strtol(msg_buff + buff_idx - 2, NULL, 16);
 8001364:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <HAL_UART_RxCpltCallback+0x17c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	3b02      	subs	r3, #2
 800136a:	4a3e      	ldr	r2, [pc, #248]	; (8001464 <HAL_UART_RxCpltCallback+0x180>)
 800136c:	4413      	add	r3, r2
 800136e:	2210      	movs	r2, #16
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f007 f83e 	bl	80083f4 <strtol>
 8001378:	60f8      	str	r0, [r7, #12]
            uint8_t direction;
            uint16_t dc;
            if(dc_initial > 0x7f) {
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b7f      	cmp	r3, #127	; 0x7f
 800137e:	dd0f      	ble.n	80013a0 <HAL_UART_RxCpltCallback+0xbc>
                direction = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	75fb      	strb	r3, [r7, #23]
                dc_initial = 0x100 - dc_initial;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800138a:	60fb      	str	r3, [r7, #12]
                dc = (uint16_t)dc_initial * htim5.Init.Period / 128;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	b29b      	uxth	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	4b35      	ldr	r3, [pc, #212]	; (8001468 <HAL_UART_RxCpltCallback+0x184>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	09db      	lsrs	r3, r3, #7
 800139c:	82bb      	strh	r3, [r7, #20]
 800139e:	e010      	b.n	80013c2 <HAL_UART_RxCpltCallback+0xde>
            }
            else {
                direction = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	75fb      	strb	r3, [r7, #23]
                dc = (uint16_t)dc_initial * htim5.Init.Period / 127;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <HAL_UART_RxCpltCallback+0x184>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	fb03 f202 	mul.w	r2, r3, r2
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <HAL_UART_RxCpltCallback+0x188>)
 80013b4:	fba3 1302 	umull	r1, r3, r3, r2
 80013b8:	1ad2      	subs	r2, r2, r3
 80013ba:	0852      	lsrs	r2, r2, #1
 80013bc:	4413      	add	r3, r2
 80013be:	099b      	lsrs	r3, r3, #6
 80013c0:	82bb      	strh	r3, [r7, #20]
            }

            // update motor driver
            if(driver_idx == 1) {
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d10a      	bne.n	80013de <HAL_UART_RxCpltCallback+0xfa>
                driver1.set_direction(direction);
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4828      	ldr	r0, [pc, #160]	; (8001470 <HAL_UART_RxCpltCallback+0x18c>)
 80013ce:	f000 fa0c 	bl	80017ea <_ZN12motor_driver13set_directionEh>
                driver1.set_duty_cycle(dc);
 80013d2:	8abb      	ldrh	r3, [r7, #20]
 80013d4:	4619      	mov	r1, r3
 80013d6:	4826      	ldr	r0, [pc, #152]	; (8001470 <HAL_UART_RxCpltCallback+0x18c>)
 80013d8:	f000 f96a 	bl	80016b0 <_ZN12motor_driver14set_duty_cycleEt>
 80013dc:	e009      	b.n	80013f2 <HAL_UART_RxCpltCallback+0x10e>
            }
            else {
                driver2.set_direction(direction);
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4824      	ldr	r0, [pc, #144]	; (8001474 <HAL_UART_RxCpltCallback+0x190>)
 80013e4:	f000 fa01 	bl	80017ea <_ZN12motor_driver13set_directionEh>
                driver2.set_duty_cycle(dc);
 80013e8:	8abb      	ldrh	r3, [r7, #20]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4821      	ldr	r0, [pc, #132]	; (8001474 <HAL_UART_RxCpltCallback+0x190>)
 80013ee:	f000 f95f 	bl	80016b0 <_ZN12motor_driver14set_duty_cycleEt>
            }

            // reset buff_idx
            buff_idx = 0;
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_UART_RxCpltCallback+0x17c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]

            // send response
            uint16_t size;
            if(direction == 0)
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d108      	bne.n	8001410 <HAL_UART_RxCpltCallback+0x12c>
                size = sprintf(msg_buff, "\nMotor %d set to forward at duty cycle %d\r\n", driver_idx, dc);
 80013fe:	8abb      	ldrh	r3, [r7, #20]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	491d      	ldr	r1, [pc, #116]	; (8001478 <HAL_UART_RxCpltCallback+0x194>)
 8001404:	4817      	ldr	r0, [pc, #92]	; (8001464 <HAL_UART_RxCpltCallback+0x180>)
 8001406:	f006 ff53 	bl	80082b0 <siprintf>
 800140a:	4603      	mov	r3, r0
 800140c:	817b      	strh	r3, [r7, #10]
            else
                size = sprintf(msg_buff, "\nMotor %d set to reverse at duty cycle %d\r\n", driver_idx, dc);
 800140e:	e01d      	b.n	800144c <HAL_UART_RxCpltCallback+0x168>
 8001410:	8abb      	ldrh	r3, [r7, #20]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4919      	ldr	r1, [pc, #100]	; (800147c <HAL_UART_RxCpltCallback+0x198>)
 8001416:	4813      	ldr	r0, [pc, #76]	; (8001464 <HAL_UART_RxCpltCallback+0x180>)
 8001418:	f006 ff4a 	bl	80082b0 <siprintf>
 800141c:	4603      	mov	r3, r0
 800141e:	817b      	strh	r3, [r7, #10]
 8001420:	e014      	b.n	800144c <HAL_UART_RxCpltCallback+0x168>
            //HAL_UART_Transmit(&huart2, (uint8_t*)msg_buff, size, 1000);
        }
        else if(buff_idx < 100 ) {
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_UART_RxCpltCallback+0x17c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b63      	cmp	r3, #99	; 0x63
 8001428:	d810      	bhi.n	800144c <HAL_UART_RxCpltCallback+0x168>
            msg_buff[buff_idx] = data;
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_UART_RxCpltCallback+0x17c>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_UART_RxCpltCallback+0x170>)
 8001432:	7819      	ldrb	r1, [r3, #0]
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_UART_RxCpltCallback+0x180>)
 8001436:	5499      	strb	r1, [r3, r2]
            buff_idx++;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_UART_RxCpltCallback+0x17c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <HAL_UART_RxCpltCallback+0x17c>)
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	e002      	b.n	800144c <HAL_UART_RxCpltCallback+0x168>
                return;
 8001446:	bf00      	nop
 8001448:	e000      	b.n	800144c <HAL_UART_RxCpltCallback+0x168>
                return;
 800144a:	bf00      	nop
        }
    }
}
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000033c 	.word	0x2000033c
 8001458:	20000290 	.word	0x20000290
 800145c:	200002d4 	.word	0x200002d4
 8001460:	200003a4 	.word	0x200003a4
 8001464:	20000340 	.word	0x20000340
 8001468:	20000248 	.word	0x20000248
 800146c:	02040811 	.word	0x02040811
 8001470:	200002dc 	.word	0x200002dc
 8001474:	200002ec 	.word	0x200002ec
 8001478:	08008ab4 	.word	0x08008ab4
 800147c:	08008ae0 	.word	0x08008ae0

08001480 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
	// uses the pause state of the state machine, the oldstate variable remebers the previous state of the state machine and will go back to it once finished
	if (GPIO_Pin == GPIO_PIN_2){
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	2b04      	cmp	r3, #4
 800148e:	d129      	bne.n	80014e4 <HAL_GPIO_EXTI_Callback+0x64>
		if (state == 0){
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_GPIO_EXTI_Callback+0x94>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10c      	bne.n	80014b2 <HAL_GPIO_EXTI_Callback+0x32>
			state = 1;
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_GPIO_EXTI_Callback+0x94>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]
			//i2c stuff
			colorSensor_Init();
 800149e:	f7ff f891 	bl	80005c4 <_Z16colorSensor_Initv>
			//driver enable
			enableAllMotors();
 80014a2:	f7ff f999 	bl	80007d8 <_Z15enableAllMotorsv>
			HAL_UART_Receive_IT(&huart1, (uint8_t*)&data, 1);
 80014a6:	2201      	movs	r2, #1
 80014a8:	491b      	ldr	r1, [pc, #108]	; (8001518 <HAL_GPIO_EXTI_Callback+0x98>)
 80014aa:	481c      	ldr	r0, [pc, #112]	; (800151c <HAL_GPIO_EXTI_Callback+0x9c>)
 80014ac:	f005 fd5f 	bl	8006f6e <HAL_UART_Receive_IT>
			state = 0;
		}
	}


}
 80014b0:	e02b      	b.n	800150a <HAL_GPIO_EXTI_Callback+0x8a>
		else if (state!= 4 && state != 0){
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_GPIO_EXTI_Callback+0x94>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_EXTI_Callback+0x56>
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_GPIO_EXTI_Callback+0x94>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d009      	beq.n	80014d6 <HAL_GPIO_EXTI_Callback+0x56>
			oldstate = state;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_GPIO_EXTI_Callback+0x94>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a16      	ldr	r2, [pc, #88]	; (8001520 <HAL_GPIO_EXTI_Callback+0xa0>)
 80014c8:	6013      	str	r3, [r2, #0]
			state = 4;
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_GPIO_EXTI_Callback+0x94>)
 80014cc:	2204      	movs	r2, #4
 80014ce:	601a      	str	r2, [r3, #0]
			disableAllMotors();
 80014d0:	f7ff f9aa 	bl	8000828 <_Z16disableAllMotorsv>
}
 80014d4:	e019      	b.n	800150a <HAL_GPIO_EXTI_Callback+0x8a>
			state = oldstate;
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_GPIO_EXTI_Callback+0xa0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <HAL_GPIO_EXTI_Callback+0x94>)
 80014dc:	6013      	str	r3, [r2, #0]
			enableAllMotors();
 80014de:	f7ff f97b 	bl	80007d8 <_Z15enableAllMotorsv>
}
 80014e2:	e012      	b.n	800150a <HAL_GPIO_EXTI_Callback+0x8a>
	else if (GPIO_Pin == GPIO_PIN_12){
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ea:	d10e      	bne.n	800150a <HAL_GPIO_EXTI_Callback+0x8a>
		if (state ==1){
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_GPIO_EXTI_Callback+0x94>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d103      	bne.n	80014fc <HAL_GPIO_EXTI_Callback+0x7c>
			state = 3;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <HAL_GPIO_EXTI_Callback+0x94>)
 80014f6:	2203      	movs	r2, #3
 80014f8:	601a      	str	r2, [r3, #0]
}
 80014fa:	e006      	b.n	800150a <HAL_GPIO_EXTI_Callback+0x8a>
		else if (state == 3){
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_GPIO_EXTI_Callback+0x94>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b03      	cmp	r3, #3
 8001502:	d102      	bne.n	800150a <HAL_GPIO_EXTI_Callback+0x8a>
			state = 0;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_GPIO_EXTI_Callback+0x94>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200002d4 	.word	0x200002d4
 8001518:	2000033c 	.word	0x2000033c
 800151c:	20000290 	.word	0x20000290
 8001520:	200002d8 	.word	0x200002d8

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800152c:	e7fe      	b.n	800152c <Error_Handler+0x8>

0800152e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @param __rhs  C string.
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
 8001538:	6839      	ldr	r1, [r7, #0]
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f006 fc8f 	bl	8007e5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	bf0c      	ite	eq
 8001546:	2301      	moveq	r3, #1
 8001548:	2300      	movne	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_Z41__static_initialization_and_destruction_0ii>:
    {
    }
  /* USER CODE END Error_Handler_Debug */
}
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af02      	add	r7, sp, #8
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d136      	bne.n	80015d2 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156a:	4293      	cmp	r3, r2
 800156c:	d131      	bne.n	80015d2 <_Z41__static_initialization_and_destruction_0ii+0x7e>
motor_driver driver1 = motor_driver(&htim5, TIM_CHANNEL_3, TIM_CHANNEL_4, 0);
 800156e:	2300      	movs	r3, #0
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	230c      	movs	r3, #12
 8001574:	2208      	movs	r2, #8
 8001576:	4919      	ldr	r1, [pc, #100]	; (80015dc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001578:	4819      	ldr	r0, [pc, #100]	; (80015e0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800157a:	f000 f84f 	bl	800161c <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>
motor_driver driver2 = motor_driver(&htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, 0);
 800157e:	2300      	movs	r3, #0
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2304      	movs	r3, #4
 8001584:	2200      	movs	r2, #0
 8001586:	4917      	ldr	r1, [pc, #92]	; (80015e4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001588:	4817      	ldr	r0, [pc, #92]	; (80015e8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800158a:	f000 f847 	bl	800161c <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>
motor_driver driver3 = motor_driver(&htim3, TIM_CHANNEL_3, TIM_CHANNEL_4, 0);
 800158e:	2300      	movs	r3, #0
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	230c      	movs	r3, #12
 8001594:	2208      	movs	r2, #8
 8001596:	4913      	ldr	r1, [pc, #76]	; (80015e4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001598:	4814      	ldr	r0, [pc, #80]	; (80015ec <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800159a:	f000 f83f 	bl	800161c <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>
motor_driver driver4 = motor_driver(&htim4, TIM_CHANNEL_1, TIM_CHANNEL_2, 0);
 800159e:	2300      	movs	r3, #0
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2304      	movs	r3, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	4912      	ldr	r1, [pc, #72]	; (80015f0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80015a8:	4812      	ldr	r0, [pc, #72]	; (80015f4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80015aa:	f000 f837 	bl	800161c <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>
motor_driver driver5 = motor_driver(&htim4, TIM_CHANNEL_3, TIM_CHANNEL_4, 0);
 80015ae:	2300      	movs	r3, #0
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	230c      	movs	r3, #12
 80015b4:	2208      	movs	r2, #8
 80015b6:	490e      	ldr	r1, [pc, #56]	; (80015f0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80015b8:	480f      	ldr	r0, [pc, #60]	; (80015f8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80015ba:	f000 f82f 	bl	800161c <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>
servo_driver servo1 = servo_driver(&htim1, TIM_CHANNEL_1);
 80015be:	2200      	movs	r2, #0
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80015c2:	480f      	ldr	r0, [pc, #60]	; (8001600 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80015c4:	f000 f920 	bl	8001808 <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>
servo_driver servo2 = servo_driver(&htim2, TIM_CHANNEL_1);
 80015c8:	2200      	movs	r2, #0
 80015ca:	490e      	ldr	r1, [pc, #56]	; (8001604 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80015cc:	480e      	ldr	r0, [pc, #56]	; (8001608 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80015ce:	f000 f91b 	bl	8001808 <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000248 	.word	0x20000248
 80015e0:	200002dc 	.word	0x200002dc
 80015e4:	200001b8 	.word	0x200001b8
 80015e8:	200002ec 	.word	0x200002ec
 80015ec:	200002fc 	.word	0x200002fc
 80015f0:	20000200 	.word	0x20000200
 80015f4:	2000030c 	.word	0x2000030c
 80015f8:	2000031c 	.word	0x2000031c
 80015fc:	20000128 	.word	0x20000128
 8001600:	2000032c 	.word	0x2000032c
 8001604:	20000170 	.word	0x20000170
 8001608:	20000334 	.word	0x20000334

0800160c <_GLOBAL__sub_I_hadc1>:
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
 8001610:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff ff9d 	bl	8001554 <_Z41__static_initialization_and_destruction_0ii>
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>:
 *      Author: Ryan
 */

#include "motor_driver.h"

motor_driver::motor_driver(TIM_HandleTypeDef* _htim,
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
                           uint32_t _ch2,
                           uint8_t _direction)
    :htim(_htim),
     ch1(_ch1),
     ch2(_ch2),
     direction(_direction)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	7e3a      	ldrb	r2, [r7, #24]
 8001640:	731a      	strb	r2, [r3, #12]
{

}
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_ZN12motor_driver13enable_driverEv>:

void motor_driver::enable_driver() {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, ch1);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4619      	mov	r1, r3
 8001662:	4610      	mov	r0, r2
 8001664:	f004 fe0c 	bl	8006280 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, ch2);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f004 fe04 	bl	8006280 <HAL_TIM_PWM_Start>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_ZN12motor_driver14disable_driverEv>:

void motor_driver::disable_driver() {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop(htim, ch1);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4619      	mov	r1, r3
 8001692:	4610      	mov	r0, r2
 8001694:	f004 fea4 	bl	80063e0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(htim, ch2);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f004 fe9c 	bl	80063e0 <HAL_TIM_PWM_Stop>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_ZN12motor_driver14set_duty_cycleEt>:

void motor_driver::set_duty_cycle(uint16_t dc) {
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
    // forward
    if(direction == 0) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7b1b      	ldrb	r3, [r3, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d146      	bne.n	8001752 <_ZN12motor_driver14set_duty_cycleEt+0xa2>
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <_ZN12motor_driver14set_duty_cycleEt+0x28>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34
 80016d6:	e018      	b.n	800170a <_ZN12motor_driver14set_duty_cycleEt+0x5a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d105      	bne.n	80016ec <_ZN12motor_driver14set_duty_cycleEt+0x3c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38
 80016ea:	e00e      	b.n	800170a <_ZN12motor_driver14set_duty_cycleEt+0x5a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d105      	bne.n	8001700 <_ZN12motor_driver14set_duty_cycleEt+0x50>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80016fe:	e004      	b.n	800170a <_ZN12motor_driver14set_duty_cycleEt+0x5a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d105      	bne.n	800171e <_ZN12motor_driver14set_duty_cycleEt+0x6e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2200      	movs	r2, #0
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
    // reverse
    else {
        __HAL_TIM_SET_COMPARE(htim, ch1, 0);
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
    }
}
 800171c:	e05f      	b.n	80017de <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b04      	cmp	r3, #4
 8001724:	d105      	bne.n	8001732 <_ZN12motor_driver14set_duty_cycleEt+0x82>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001730:	e055      	b.n	80017de <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b08      	cmp	r3, #8
 8001738:	d105      	bne.n	8001746 <_ZN12motor_driver14set_duty_cycleEt+0x96>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2200      	movs	r2, #0
 8001742:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001744:	e04b      	b.n	80017de <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001750:	e045      	b.n	80017de <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch1, 0);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d105      	bne.n	8001766 <_ZN12motor_driver14set_duty_cycleEt+0xb6>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
 8001764:	e018      	b.n	8001798 <_ZN12motor_driver14set_duty_cycleEt+0xe8>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d105      	bne.n	800177a <_ZN12motor_driver14set_duty_cycleEt+0xca>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2200      	movs	r2, #0
 8001776:	639a      	str	r2, [r3, #56]	; 0x38
 8001778:	e00e      	b.n	8001798 <_ZN12motor_driver14set_duty_cycleEt+0xe8>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b08      	cmp	r3, #8
 8001780:	d105      	bne.n	800178e <_ZN12motor_driver14set_duty_cycleEt+0xde>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2200      	movs	r2, #0
 800178a:	63da      	str	r2, [r3, #60]	; 0x3c
 800178c:	e004      	b.n	8001798 <_ZN12motor_driver14set_duty_cycleEt+0xe8>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2200      	movs	r2, #0
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <_ZN12motor_driver14set_duty_cycleEt+0xfc>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017aa:	e018      	b.n	80017de <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d105      	bne.n	80017c0 <_ZN12motor_driver14set_duty_cycleEt+0x110>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017be:	e00e      	b.n	80017de <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d105      	bne.n	80017d4 <_ZN12motor_driver14set_duty_cycleEt+0x124>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80017d2:	e004      	b.n	80017de <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_ZN12motor_driver13set_directionEh>:

void motor_driver::set_direction(uint8_t direction) {
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70fb      	strb	r3, [r7, #3]
    this->direction = direction;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	731a      	strb	r2, [r3, #12]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>:
 *      Author: Ryan
 */

#include "servo_driver.h"

servo_driver::servo_driver(TIM_HandleTypeDef* _htim,
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
                           uint32_t _ch1)
    :htim(_htim),
     ch1(_ch1)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	605a      	str	r2, [r3, #4]
{

}
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_ZN12servo_driver13enable_driverEv>:

void servo_driver::enable_driver() {
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, ch1);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4619      	mov	r1, r3
 8001840:	4610      	mov	r0, r2
 8001842:	f004 fd1d 	bl	8006280 <HAL_TIM_PWM_Start>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_ZN12servo_driver14disable_driverEv>:

void servo_driver::disable_driver() {
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop(htim, ch1);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4619      	mov	r1, r3
 8001860:	4610      	mov	r0, r2
 8001862:	f004 fdbd 	bl	80063e0 <HAL_TIM_PWM_Stop>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_ZN12servo_driver14set_duty_cycleEt>:

void servo_driver::set_duty_cycle(uint16_t dc) {
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	807b      	strh	r3, [r7, #2]
    // forward
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d105      	bne.n	800188e <_ZN12servo_driver14set_duty_cycleEt+0x20>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	887a      	ldrh	r2, [r7, #2]
 800188a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800188c:	e018      	b.n	80018c0 <_ZN12servo_driver14set_duty_cycleEt+0x52>
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b04      	cmp	r3, #4
 8001894:	d105      	bne.n	80018a2 <_ZN12servo_driver14set_duty_cycleEt+0x34>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	887a      	ldrh	r2, [r7, #2]
 800189e:	639a      	str	r2, [r3, #56]	; 0x38
}
 80018a0:	e00e      	b.n	80018c0 <_ZN12servo_driver14set_duty_cycleEt+0x52>
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d105      	bne.n	80018b6 <_ZN12servo_driver14set_duty_cycleEt+0x48>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	887a      	ldrh	r2, [r7, #2]
 80018b2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80018b4:	e004      	b.n	80018c0 <_ZN12servo_driver14set_duty_cycleEt+0x52>
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	887a      	ldrh	r2, [r7, #2]
 80018be:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <HAL_MspInit+0x4c>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <HAL_MspInit+0x4c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <HAL_ADC_MspInit+0x8c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12f      	bne.n	800199e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_ADC_MspInit+0x90>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_ADC_MspInit+0x90>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_ADC_MspInit+0x90>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <HAL_ADC_MspInit+0x90>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <HAL_ADC_MspInit+0x90>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_ADC_MspInit+0x90>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001976:	2301      	movs	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197a:	2303      	movs	r3, #3
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4809      	ldr	r0, [pc, #36]	; (80019b0 <HAL_ADC_MspInit+0x94>)
 800198a:	f001 fa63 	bl	8002e54 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	2012      	movs	r0, #18
 8001994:	f001 f987 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001998:	2012      	movs	r0, #18
 800199a:	f001 f9a0 	bl	8002cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40012000 	.word	0x40012000
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020000 	.word	0x40020000

080019b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <HAL_I2C_MspInit+0xb4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d144      	bne.n	8001a60 <HAL_I2C_MspInit+0xac>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <HAL_I2C_MspInit+0xb8>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <HAL_I2C_MspInit+0xb8>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_I2C_MspInit+0xb8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f8:	2312      	movs	r3, #18
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a04:	2304      	movs	r3, #4
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4818      	ldr	r0, [pc, #96]	; (8001a70 <HAL_I2C_MspInit+0xbc>)
 8001a10:	f001 fa20 	bl	8002e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a14:	2308      	movs	r3, #8
 8001a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a18:	2312      	movs	r3, #18
 8001a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001a24:	2309      	movs	r3, #9
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4810      	ldr	r0, [pc, #64]	; (8001a70 <HAL_I2C_MspInit+0xbc>)
 8001a30:	f001 fa10 	bl	8002e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_I2C_MspInit+0xb8>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <HAL_I2C_MspInit+0xb8>)
 8001a3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a42:	6413      	str	r3, [r2, #64]	; 0x40
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_I2C_MspInit+0xb8>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	2021      	movs	r0, #33	; 0x21
 8001a56:	f001 f926 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001a5a:	2021      	movs	r0, #33	; 0x21
 8001a5c:	f001 f93f 	bl	8002cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40005800 	.word	0x40005800
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020400 	.word	0x40020400

08001a74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <HAL_TIM_PWM_MspInit+0xb4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10e      	bne.n	8001aa4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_TIM_PWM_MspInit+0xb8>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <HAL_TIM_PWM_MspInit+0xb8>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_TIM_PWM_MspInit+0xb8>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001aa2:	e03a      	b.n	8001b1a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a21      	ldr	r2, [pc, #132]	; (8001b30 <HAL_TIM_PWM_MspInit+0xbc>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d10e      	bne.n	8001acc <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_TIM_PWM_MspInit+0xb8>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <HAL_TIM_PWM_MspInit+0xb8>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_TIM_PWM_MspInit+0xb8>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
}
 8001aca:	e026      	b.n	8001b1a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a18      	ldr	r2, [pc, #96]	; (8001b34 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d10e      	bne.n	8001af4 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_TIM_PWM_MspInit+0xb8>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <HAL_TIM_PWM_MspInit+0xb8>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_TIM_PWM_MspInit+0xb8>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
}
 8001af2:	e012      	b.n	8001b1a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM5)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_TIM_PWM_MspInit+0xc4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10d      	bne.n	8001b1a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_TIM_PWM_MspInit+0xb8>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <HAL_TIM_PWM_MspInit+0xb8>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_TIM_PWM_MspInit+0xb8>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
}
 8001b1a:	bf00      	nop
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40000400 	.word	0x40000400
 8001b34:	40000800 	.word	0x40000800
 8001b38:	40000c00 	.word	0x40000c00

08001b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4c:	d10d      	bne.n	8001b6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_TIM_Base_MspInit+0x3c>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <HAL_TIM_Base_MspInit+0x3c>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_TIM_Base_MspInit+0x3c>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08e      	sub	sp, #56	; 0x38
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6a      	ldr	r2, [pc, #424]	; (8001d44 <HAL_TIM_MspPostInit+0x1c8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d11f      	bne.n	8001bde <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
 8001ba2:	4b69      	ldr	r3, [pc, #420]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a68      	ldr	r2, [pc, #416]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b66      	ldr	r3, [pc, #408]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	485d      	ldr	r0, [pc, #372]	; (8001d4c <HAL_TIM_MspPostInit+0x1d0>)
 8001bd8:	f001 f93c 	bl	8002e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001bdc:	e0ad      	b.n	8001d3a <HAL_TIM_MspPostInit+0x1be>
  else if(htim->Instance==TIM2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be6:	d11e      	bne.n	8001c26 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	4b56      	ldr	r3, [pc, #344]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	4a55      	ldr	r2, [pc, #340]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf8:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c04:	2320      	movs	r3, #32
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c14:	2301      	movs	r3, #1
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	484b      	ldr	r0, [pc, #300]	; (8001d4c <HAL_TIM_MspPostInit+0x1d0>)
 8001c20:	f001 f918 	bl	8002e54 <HAL_GPIO_Init>
}
 8001c24:	e089      	b.n	8001d3a <HAL_TIM_MspPostInit+0x1be>
  else if(htim->Instance==TIM3)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a49      	ldr	r2, [pc, #292]	; (8001d50 <HAL_TIM_MspPostInit+0x1d4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d13c      	bne.n	8001caa <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4a43      	ldr	r2, [pc, #268]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c40:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	4a3c      	ldr	r2, [pc, #240]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5c:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c68:	23c0      	movs	r3, #192	; 0xc0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c80:	4619      	mov	r1, r3
 8001c82:	4832      	ldr	r0, [pc, #200]	; (8001d4c <HAL_TIM_MspPostInit+0x1d0>)
 8001c84:	f001 f8e6 	bl	8002e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	482c      	ldr	r0, [pc, #176]	; (8001d54 <HAL_TIM_MspPostInit+0x1d8>)
 8001ca4:	f001 f8d6 	bl	8002e54 <HAL_GPIO_Init>
}
 8001ca8:	e047      	b.n	8001d3a <HAL_TIM_MspPostInit+0x1be>
  else if(htim->Instance==TIM4)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a2a      	ldr	r2, [pc, #168]	; (8001d58 <HAL_TIM_MspPostInit+0x1dc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d11f      	bne.n	8001cf4 <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	4a22      	ldr	r2, [pc, #136]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc4:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001cd0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cea:	4619      	mov	r1, r3
 8001cec:	4819      	ldr	r0, [pc, #100]	; (8001d54 <HAL_TIM_MspPostInit+0x1d8>)
 8001cee:	f001 f8b1 	bl	8002e54 <HAL_GPIO_Init>
}
 8001cf2:	e022      	b.n	8001d3a <HAL_TIM_MspPostInit+0x1be>
  else if(htim->Instance==TIM5)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <HAL_TIM_MspPostInit+0x1e0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d11d      	bne.n	8001d3a <HAL_TIM_MspPostInit+0x1be>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_TIM_MspPostInit+0x1cc>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d1a:	230c      	movs	r3, #12
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d32:	4619      	mov	r1, r3
 8001d34:	4805      	ldr	r0, [pc, #20]	; (8001d4c <HAL_TIM_MspPostInit+0x1d0>)
 8001d36:	f001 f88d 	bl	8002e54 <HAL_GPIO_Init>
}
 8001d3a:	bf00      	nop
 8001d3c:	3738      	adds	r7, #56	; 0x38
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40010000 	.word	0x40010000
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40000800 	.word	0x40000800
 8001d5c:	40000c00 	.word	0x40000c00

08001d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1d      	ldr	r2, [pc, #116]	; (8001df4 <HAL_UART_MspInit+0x94>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d134      	bne.n	8001dec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <HAL_UART_MspInit+0x98>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <HAL_UART_MspInit+0x98>)
 8001d8c:	f043 0310 	orr.w	r3, r3, #16
 8001d90:	6453      	str	r3, [r2, #68]	; 0x44
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_UART_MspInit+0x98>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_UART_MspInit+0x98>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <HAL_UART_MspInit+0x98>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_UART_MspInit+0x98>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dcc:	2307      	movs	r3, #7
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4809      	ldr	r0, [pc, #36]	; (8001dfc <HAL_UART_MspInit+0x9c>)
 8001dd8:	f001 f83c 	bl	8002e54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	2025      	movs	r0, #37	; 0x25
 8001de2:	f000 ff60 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001de6:	2025      	movs	r0, #37	; 0x25
 8001de8:	f000 ff79 	bl	8002cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dec:	bf00      	nop
 8001dee:	3728      	adds	r7, #40	; 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40011000 	.word	0x40011000
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020000 	.word	0x40020000

08001e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <NMI_Handler+0x4>

08001e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <MemManage_Handler+0x4>

08001e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <BusFault_Handler+0x4>

08001e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <UsageFault_Handler+0x4>

08001e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4c:	f000 f916 	bl	800207c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e58:	2004      	movs	r0, #4
 8001e5a:	f001 f97f 	bl	800315c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <ADC_IRQHandler+0x10>)
 8001e6a:	f000 face 	bl	800240a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000008c 	.word	0x2000008c

08001e78 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <I2C2_EV_IRQHandler+0x10>)
 8001e7e:	f001 fde9 	bl	8003a54 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200000d4 	.word	0x200000d4

08001e8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <USART1_IRQHandler+0x10>)
 8001e92:	f005 f89d 	bl	8006fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000290 	.word	0x20000290

08001ea0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001ea4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ea8:	f001 f958 	bl	800315c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return 1;
 8001eb4:	2301      	movs	r3, #1
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_kill>:

int _kill(int pid, int sig)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eca:	f006 f843 	bl	8007f54 <__errno>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2216      	movs	r2, #22
 8001ed2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_exit>:

void _exit (int status)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ffe7 	bl	8001ec0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ef2:	e7fe      	b.n	8001ef2 <_exit+0x12>

08001ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001efc:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <_sbrk+0x5c>)
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <_sbrk+0x60>)
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <_sbrk+0x64>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <_sbrk+0x68>)
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d207      	bcs.n	8001f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f24:	f006 f816 	bl	8007f54 <__errno>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e009      	b.n	8001f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <_sbrk+0x64>)
 8001f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20020000 	.word	0x20020000
 8001f54:	00000400 	.word	0x00000400
 8001f58:	200003b4 	.word	0x200003b4
 8001f5c:	200003d0 	.word	0x200003d0

08001f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <SystemInit+0x20>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <SystemInit+0x20>)
 8001f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fbc <LoopFillZerobss+0x12>


/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f88:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f8a:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f8c:	4a0e      	ldr	r2, [pc, #56]	; (8001fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f90:	e002      	b.n	8001f98 <LoopCopyDataInit>

08001f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f96:	3304      	adds	r3, #4

08001f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f9c:	d3f9      	bcc.n	8001f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9e:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fa0:	4c0b      	ldr	r4, [pc, #44]	; (8001fd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa4:	e001      	b.n	8001faa <LoopFillZerobss>

08001fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa8:	3204      	adds	r2, #4

08001faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fac:	d3fb      	bcc.n	8001fa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fae:	f7ff ffd7 	bl	8001f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fb2:	f005 ffd5 	bl	8007f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb6:	f7fe fc5f 	bl	8000878 <main>
  bx  lr    
 8001fba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001fc8:	08008cb0 	.word	0x08008cb0
  ldr r2, =_sbss
 8001fcc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001fd0:	200003d0 	.word	0x200003d0

08001fd4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd4:	e7fe      	b.n	8001fd4 <DMA1_Stream0_IRQHandler>
	...

08001fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_Init+0x40>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <HAL_Init+0x40>)
 8001fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_Init+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <HAL_Init+0x40>)
 8001fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ff2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_Init+0x40>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a07      	ldr	r2, [pc, #28]	; (8002018 <HAL_Init+0x40>)
 8001ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002000:	2003      	movs	r0, #3
 8002002:	f000 fe45 	bl	8002c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002006:	200f      	movs	r0, #15
 8002008:	f000 f808 	bl	800201c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800200c:	f7ff fc5e 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023c00 	.word	0x40023c00

0800201c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_InitTick+0x54>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_InitTick+0x58>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002032:	fbb3 f3f1 	udiv	r3, r3, r1
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fe5d 	bl	8002cfa <HAL_SYSTICK_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e00e      	b.n	8002068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b0f      	cmp	r3, #15
 800204e:	d80a      	bhi.n	8002066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002050:	2200      	movs	r2, #0
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f000 fe25 	bl	8002ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800205c:	4a06      	ldr	r2, [pc, #24]	; (8002078 <HAL_InitTick+0x5c>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	e000      	b.n	8002068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000000 	.word	0x20000000
 8002074:	20000008 	.word	0x20000008
 8002078:	20000004 	.word	0x20000004

0800207c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_IncTick+0x20>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_IncTick+0x24>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4413      	add	r3, r2
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <HAL_IncTick+0x24>)
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000008 	.word	0x20000008
 80020a0:	200003b8 	.word	0x200003b8

080020a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return uwTick;
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <HAL_GetTick+0x14>)
 80020aa:	681b      	ldr	r3, [r3, #0]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	200003b8 	.word	0x200003b8

080020bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c4:	f7ff ffee 	bl	80020a4 <HAL_GetTick>
 80020c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d4:	d005      	beq.n	80020e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_Delay+0x44>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020e2:	bf00      	nop
 80020e4:	f7ff ffde 	bl	80020a4 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d8f7      	bhi.n	80020e4 <HAL_Delay+0x28>
  {
  }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000008 	.word	0x20000008

08002104 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e033      	b.n	8002182 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff fbfa 	bl	800191c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800214a:	f023 0302 	bic.w	r3, r3, #2
 800214e:	f043 0202 	orr.w	r2, r3, #2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fbc4 	bl	80028e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
 8002172:	e001      	b.n	8002178 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_Start+0x1a>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e097      	b.n	80022d6 <HAL_ADC_Start+0x14a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d018      	beq.n	80021ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021cc:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <HAL_ADC_Start+0x158>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a45      	ldr	r2, [pc, #276]	; (80022e8 <HAL_ADC_Start+0x15c>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0c9a      	lsrs	r2, r3, #18
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021e0:	e002      	b.n	80021e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f9      	bne.n	80021e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d15f      	bne.n	80022bc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002226:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800223a:	d106      	bne.n	800224a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	f023 0206 	bic.w	r2, r3, #6
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	645a      	str	r2, [r3, #68]	; 0x44
 8002248:	e002      	b.n	8002250 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002258:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_ADC_Start+0x160>)
 800225a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002264:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10f      	bne.n	8002292 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d129      	bne.n	80022d4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e020      	b.n	80022d4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <HAL_ADC_Start+0x164>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d11b      	bne.n	80022d4 <HAL_ADC_Start+0x148>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d114      	bne.n	80022d4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	e00b      	b.n	80022d4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f043 0210 	orr.w	r2, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000000 	.word	0x20000000
 80022e8:	431bde83 	.word	0x431bde83
 80022ec:	40012300 	.word	0x40012300
 80022f0:	40012000 	.word	0x40012000

080022f4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002310:	d113      	bne.n	800233a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800231c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002320:	d10b      	bne.n	800233a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f043 0220 	orr.w	r2, r3, #32
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e063      	b.n	8002402 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800233a:	f7ff feb3 	bl	80020a4 <HAL_GetTick>
 800233e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002340:	e021      	b.n	8002386 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d01d      	beq.n	8002386 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <HAL_ADC_PollForConversion+0x6c>
 8002350:	f7ff fea8 	bl	80020a4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d212      	bcs.n	8002386 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b02      	cmp	r3, #2
 800236c:	d00b      	beq.n	8002386 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f043 0204 	orr.w	r2, r3, #4
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e03d      	b.n	8002402 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b02      	cmp	r3, #2
 8002392:	d1d6      	bne.n	8002342 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0212 	mvn.w	r2, #18
 800239c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d123      	bne.n	8002400 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d11f      	bne.n	8002400 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d111      	bne.n	8002400 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d049      	beq.n	80024d4 <HAL_ADC_IRQHandler+0xca>
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d046      	beq.n	80024d4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d12b      	bne.n	80024c4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002470:	2b00      	cmp	r3, #0
 8002472:	d127      	bne.n	80024c4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800248c:	2b00      	cmp	r3, #0
 800248e:	d119      	bne.n	80024c4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0220 	bic.w	r2, r2, #32
 800249e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f8bd 	bl	8002644 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f06f 0212 	mvn.w	r2, #18
 80024d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d057      	beq.n	800259a <HAL_ADC_IRQHandler+0x190>
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d054      	beq.n	800259a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d139      	bne.n	800258a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800252e:	2b00      	cmp	r3, #0
 8002530:	d12b      	bne.n	800258a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800253c:	2b00      	cmp	r3, #0
 800253e:	d124      	bne.n	800258a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800254a:	2b00      	cmp	r3, #0
 800254c:	d11d      	bne.n	800258a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	d119      	bne.n	800258a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002564:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 faa6 	bl	8002adc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 020c 	mvn.w	r2, #12
 8002598:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d017      	beq.n	80025e0 <HAL_ADC_IRQHandler+0x1d6>
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d014      	beq.n	80025e0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d10d      	bne.n	80025e0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f841 	bl	8002658 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f06f 0201 	mvn.w	r2, #1
 80025de:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025ee:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d015      	beq.n	8002622 <HAL_ADC_IRQHandler+0x218>
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d012      	beq.n	8002622 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002600:	f043 0202 	orr.w	r2, r3, #2
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0220 	mvn.w	r2, #32
 8002610:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f82a 	bl	800266c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0220 	mvn.w	r2, #32
 8002620:	601a      	str	r2, [r3, #0]
  }
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x1c>
 8002698:	2302      	movs	r3, #2
 800269a:	e113      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x244>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b09      	cmp	r3, #9
 80026aa:	d925      	bls.n	80026f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68d9      	ldr	r1, [r3, #12]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	3b1e      	subs	r3, #30
 80026c2:	2207      	movs	r2, #7
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43da      	mvns	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	400a      	ands	r2, r1
 80026d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68d9      	ldr	r1, [r3, #12]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	4618      	mov	r0, r3
 80026e4:	4603      	mov	r3, r0
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4403      	add	r3, r0
 80026ea:	3b1e      	subs	r3, #30
 80026ec:	409a      	lsls	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	e022      	b.n	800273e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6919      	ldr	r1, [r3, #16]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	2207      	movs	r2, #7
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	400a      	ands	r2, r1
 800271a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6919      	ldr	r1, [r3, #16]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	4618      	mov	r0, r3
 800272e:	4603      	mov	r3, r0
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4403      	add	r3, r0
 8002734:	409a      	lsls	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b06      	cmp	r3, #6
 8002744:	d824      	bhi.n	8002790 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	3b05      	subs	r3, #5
 8002758:	221f      	movs	r2, #31
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43da      	mvns	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	400a      	ands	r2, r1
 8002766:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	4618      	mov	r0, r3
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	3b05      	subs	r3, #5
 8002782:	fa00 f203 	lsl.w	r2, r0, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	635a      	str	r2, [r3, #52]	; 0x34
 800278e:	e04c      	b.n	800282a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b0c      	cmp	r3, #12
 8002796:	d824      	bhi.n	80027e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	3b23      	subs	r3, #35	; 0x23
 80027aa:	221f      	movs	r2, #31
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43da      	mvns	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	400a      	ands	r2, r1
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	4618      	mov	r0, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	3b23      	subs	r3, #35	; 0x23
 80027d4:	fa00 f203 	lsl.w	r2, r0, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
 80027e0:	e023      	b.n	800282a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	3b41      	subs	r3, #65	; 0x41
 80027f4:	221f      	movs	r2, #31
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43da      	mvns	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	400a      	ands	r2, r1
 8002802:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	3b41      	subs	r3, #65	; 0x41
 800281e:	fa00 f203 	lsl.w	r2, r0, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800282a:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <HAL_ADC_ConfigChannel+0x250>)
 800282c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <HAL_ADC_ConfigChannel+0x254>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d10f      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x1d8>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b12      	cmp	r3, #18
 800283e:	d10b      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <HAL_ADC_ConfigChannel+0x254>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d12b      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x23a>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1c      	ldr	r2, [pc, #112]	; (80028d8 <HAL_ADC_ConfigChannel+0x258>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <HAL_ADC_ConfigChannel+0x1f4>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b11      	cmp	r3, #17
 8002872:	d122      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <HAL_ADC_ConfigChannel+0x258>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d111      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_ADC_ConfigChannel+0x25c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <HAL_ADC_ConfigChannel+0x260>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	0c9a      	lsrs	r2, r3, #18
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028ac:	e002      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f9      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	40012300 	.word	0x40012300
 80028d4:	40012000 	.word	0x40012000
 80028d8:	10000012 	.word	0x10000012
 80028dc:	20000000 	.word	0x20000000
 80028e0:	431bde83 	.word	0x431bde83

080028e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ec:	4b79      	ldr	r3, [pc, #484]	; (8002ad4 <ADC_Init+0x1f0>)
 80028ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	431a      	orrs	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	021a      	lsls	r2, r3, #8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800293c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6899      	ldr	r1, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <ADC_Init+0x1f4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d022      	beq.n	80029c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800298a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6899      	ldr	r1, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6899      	ldr	r1, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	e00f      	b.n	80029e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0202 	bic.w	r2, r2, #2
 80029f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6899      	ldr	r1, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	7e1b      	ldrb	r3, [r3, #24]
 80029fc:	005a      	lsls	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01b      	beq.n	8002a48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	035a      	lsls	r2, r3, #13
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	e007      	b.n	8002a58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	051a      	lsls	r2, r3, #20
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6899      	ldr	r1, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a9a:	025a      	lsls	r2, r3, #9
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6899      	ldr	r1, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	029a      	lsls	r2, r3, #10
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40012300 	.word	0x40012300
 8002ad8:	0f000001 	.word	0x0f000001

08002adc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db0b      	blt.n	8002b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	4907      	ldr	r1, [pc, #28]	; (8002b8c <__NVIC_EnableIRQ+0x38>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f1c3 0307 	rsb	r3, r3, #7
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf28      	it	cs
 8002c02:	2304      	movcs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d902      	bls.n	8002c14 <NVIC_EncodePriority+0x30>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3b03      	subs	r3, #3
 8002c12:	e000      	b.n	8002c16 <NVIC_EncodePriority+0x32>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43d9      	mvns	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	4313      	orrs	r3, r2
         );
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c5c:	d301      	bcc.n	8002c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00f      	b.n	8002c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <SysTick_Config+0x40>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6a:	210f      	movs	r1, #15
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f7ff ff8e 	bl	8002b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <SysTick_Config+0x40>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <SysTick_Config+0x40>)
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	e000e010 	.word	0xe000e010

08002c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff29 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb8:	f7ff ff3e 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f7ff ff8e 	bl	8002be4 <NVIC_EncodePriority>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff5d 	bl	8002b90 <__NVIC_SetPriority>
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff31 	bl	8002b54 <__NVIC_EnableIRQ>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffa2 	bl	8002c4c <SysTick_Config>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d20:	f7ff f9c0 	bl	80020a4 <HAL_GetTick>
 8002d24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d008      	beq.n	8002d44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2280      	movs	r2, #128	; 0x80
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e052      	b.n	8002dea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0216 	bic.w	r2, r2, #22
 8002d52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d103      	bne.n	8002d74 <HAL_DMA_Abort+0x62>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0208 	bic.w	r2, r2, #8
 8002d82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d94:	e013      	b.n	8002dbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d96:	f7ff f985 	bl	80020a4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d90c      	bls.n	8002dbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2203      	movs	r2, #3
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e015      	b.n	8002dea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e4      	bne.n	8002d96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	223f      	movs	r2, #63	; 0x3f
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d004      	beq.n	8002e10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2280      	movs	r2, #128	; 0x80
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e00c      	b.n	8002e2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2205      	movs	r2, #5
 8002e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e44:	b2db      	uxtb	r3, r3
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e159      	b.n	8003124 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e70:	2201      	movs	r2, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	f040 8148 	bne.w	800311e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d005      	beq.n	8002ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d130      	bne.n	8002f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002edc:	2201      	movs	r2, #1
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 0201 	and.w	r2, r3, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d017      	beq.n	8002f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d123      	bne.n	8002f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	08da      	lsrs	r2, r3, #3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3208      	adds	r2, #8
 8002f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	220f      	movs	r2, #15
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	08da      	lsrs	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3208      	adds	r2, #8
 8002f92:	69b9      	ldr	r1, [r7, #24]
 8002f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0203 	and.w	r2, r3, #3
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a2 	beq.w	800311e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	4b57      	ldr	r3, [pc, #348]	; (800313c <HAL_GPIO_Init+0x2e8>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	4a56      	ldr	r2, [pc, #344]	; (800313c <HAL_GPIO_Init+0x2e8>)
 8002fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fea:	4b54      	ldr	r3, [pc, #336]	; (800313c <HAL_GPIO_Init+0x2e8>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff6:	4a52      	ldr	r2, [pc, #328]	; (8003140 <HAL_GPIO_Init+0x2ec>)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	089b      	lsrs	r3, r3, #2
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	220f      	movs	r2, #15
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a49      	ldr	r2, [pc, #292]	; (8003144 <HAL_GPIO_Init+0x2f0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d019      	beq.n	8003056 <HAL_GPIO_Init+0x202>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a48      	ldr	r2, [pc, #288]	; (8003148 <HAL_GPIO_Init+0x2f4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_GPIO_Init+0x1fe>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a47      	ldr	r2, [pc, #284]	; (800314c <HAL_GPIO_Init+0x2f8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00d      	beq.n	800304e <HAL_GPIO_Init+0x1fa>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a46      	ldr	r2, [pc, #280]	; (8003150 <HAL_GPIO_Init+0x2fc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d007      	beq.n	800304a <HAL_GPIO_Init+0x1f6>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a45      	ldr	r2, [pc, #276]	; (8003154 <HAL_GPIO_Init+0x300>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <HAL_GPIO_Init+0x1f2>
 8003042:	2304      	movs	r3, #4
 8003044:	e008      	b.n	8003058 <HAL_GPIO_Init+0x204>
 8003046:	2307      	movs	r3, #7
 8003048:	e006      	b.n	8003058 <HAL_GPIO_Init+0x204>
 800304a:	2303      	movs	r3, #3
 800304c:	e004      	b.n	8003058 <HAL_GPIO_Init+0x204>
 800304e:	2302      	movs	r3, #2
 8003050:	e002      	b.n	8003058 <HAL_GPIO_Init+0x204>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_GPIO_Init+0x204>
 8003056:	2300      	movs	r3, #0
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	f002 0203 	and.w	r2, r2, #3
 800305e:	0092      	lsls	r2, r2, #2
 8003060:	4093      	lsls	r3, r2
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003068:	4935      	ldr	r1, [pc, #212]	; (8003140 <HAL_GPIO_Init+0x2ec>)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	3302      	adds	r3, #2
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003076:	4b38      	ldr	r3, [pc, #224]	; (8003158 <HAL_GPIO_Init+0x304>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800309a:	4a2f      	ldr	r2, [pc, #188]	; (8003158 <HAL_GPIO_Init+0x304>)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030a0:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <HAL_GPIO_Init+0x304>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c4:	4a24      	ldr	r2, [pc, #144]	; (8003158 <HAL_GPIO_Init+0x304>)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ca:	4b23      	ldr	r3, [pc, #140]	; (8003158 <HAL_GPIO_Init+0x304>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ee:	4a1a      	ldr	r2, [pc, #104]	; (8003158 <HAL_GPIO_Init+0x304>)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f4:	4b18      	ldr	r3, [pc, #96]	; (8003158 <HAL_GPIO_Init+0x304>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003118:	4a0f      	ldr	r2, [pc, #60]	; (8003158 <HAL_GPIO_Init+0x304>)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3301      	adds	r3, #1
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	2b0f      	cmp	r3, #15
 8003128:	f67f aea2 	bls.w	8002e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3724      	adds	r7, #36	; 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
 8003140:	40013800 	.word	0x40013800
 8003144:	40020000 	.word	0x40020000
 8003148:	40020400 	.word	0x40020400
 800314c:	40020800 	.word	0x40020800
 8003150:	40020c00 	.word	0x40020c00
 8003154:	40021000 	.word	0x40021000
 8003158:	40013c00 	.word	0x40013c00

0800315c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d006      	beq.n	8003180 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003172:	4a05      	ldr	r2, [pc, #20]	; (8003188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe f980 	bl	8001480 <HAL_GPIO_EXTI_Callback>
  }
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40013c00 	.word	0x40013c00

0800318c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e12b      	b.n	80033f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe fbfe 	bl	80019b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	; 0x24
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031f0:	f002 ff80 	bl	80060f4 <HAL_RCC_GetPCLK1Freq>
 80031f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4a81      	ldr	r2, [pc, #516]	; (8003400 <HAL_I2C_Init+0x274>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d807      	bhi.n	8003210 <HAL_I2C_Init+0x84>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4a80      	ldr	r2, [pc, #512]	; (8003404 <HAL_I2C_Init+0x278>)
 8003204:	4293      	cmp	r3, r2
 8003206:	bf94      	ite	ls
 8003208:	2301      	movls	r3, #1
 800320a:	2300      	movhi	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e006      	b.n	800321e <HAL_I2C_Init+0x92>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a7d      	ldr	r2, [pc, #500]	; (8003408 <HAL_I2C_Init+0x27c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	bf94      	ite	ls
 8003218:	2301      	movls	r3, #1
 800321a:	2300      	movhi	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0e7      	b.n	80033f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a78      	ldr	r2, [pc, #480]	; (800340c <HAL_I2C_Init+0x280>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0c9b      	lsrs	r3, r3, #18
 8003230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a6a      	ldr	r2, [pc, #424]	; (8003400 <HAL_I2C_Init+0x274>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d802      	bhi.n	8003260 <HAL_I2C_Init+0xd4>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3301      	adds	r3, #1
 800325e:	e009      	b.n	8003274 <HAL_I2C_Init+0xe8>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	4a69      	ldr	r2, [pc, #420]	; (8003410 <HAL_I2C_Init+0x284>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	3301      	adds	r3, #1
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	430b      	orrs	r3, r1
 800327a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003286:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	495c      	ldr	r1, [pc, #368]	; (8003400 <HAL_I2C_Init+0x274>)
 8003290:	428b      	cmp	r3, r1
 8003292:	d819      	bhi.n	80032c8 <HAL_I2C_Init+0x13c>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e59      	subs	r1, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a2:	1c59      	adds	r1, r3, #1
 80032a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032a8:	400b      	ands	r3, r1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_I2C_Init+0x138>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1e59      	subs	r1, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032bc:	3301      	adds	r3, #1
 80032be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c2:	e051      	b.n	8003368 <HAL_I2C_Init+0x1dc>
 80032c4:	2304      	movs	r3, #4
 80032c6:	e04f      	b.n	8003368 <HAL_I2C_Init+0x1dc>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d111      	bne.n	80032f4 <HAL_I2C_Init+0x168>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1e58      	subs	r0, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	440b      	add	r3, r1
 80032de:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf0c      	ite	eq
 80032ec:	2301      	moveq	r3, #1
 80032ee:	2300      	movne	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	e012      	b.n	800331a <HAL_I2C_Init+0x18e>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1e58      	subs	r0, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	0099      	lsls	r1, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	fbb0 f3f3 	udiv	r3, r0, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Init+0x196>
 800331e:	2301      	movs	r3, #1
 8003320:	e022      	b.n	8003368 <HAL_I2C_Init+0x1dc>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10e      	bne.n	8003348 <HAL_I2C_Init+0x1bc>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1e58      	subs	r0, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6859      	ldr	r1, [r3, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	440b      	add	r3, r1
 8003338:	fbb0 f3f3 	udiv	r3, r0, r3
 800333c:	3301      	adds	r3, #1
 800333e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003346:	e00f      	b.n	8003368 <HAL_I2C_Init+0x1dc>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1e58      	subs	r0, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	0099      	lsls	r1, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	fbb0 f3f3 	udiv	r3, r0, r3
 800335e:	3301      	adds	r3, #1
 8003360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	6809      	ldr	r1, [r1, #0]
 800336c:	4313      	orrs	r3, r2
 800336e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6911      	ldr	r1, [r2, #16]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68d2      	ldr	r2, [r2, #12]
 80033a2:	4311      	orrs	r1, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	000186a0 	.word	0x000186a0
 8003404:	001e847f 	.word	0x001e847f
 8003408:	003d08ff 	.word	0x003d08ff
 800340c:	431bde83 	.word	0x431bde83
 8003410:	10624dd3 	.word	0x10624dd3

08003414 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	817b      	strh	r3, [r7, #10]
 8003426:	460b      	mov	r3, r1
 8003428:	813b      	strh	r3, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800342e:	f7fe fe39 	bl	80020a4 <HAL_GetTick>
 8003432:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b20      	cmp	r3, #32
 800343e:	f040 80d9 	bne.w	80035f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2319      	movs	r3, #25
 8003448:	2201      	movs	r2, #1
 800344a:	496d      	ldr	r1, [pc, #436]	; (8003600 <HAL_I2C_Mem_Write+0x1ec>)
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f001 fff7 	bl	8005440 <I2C_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003458:	2302      	movs	r3, #2
 800345a:	e0cc      	b.n	80035f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_I2C_Mem_Write+0x56>
 8003466:	2302      	movs	r3, #2
 8003468:	e0c5      	b.n	80035f6 <HAL_I2C_Mem_Write+0x1e2>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d007      	beq.n	8003490 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2221      	movs	r2, #33	; 0x21
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2240      	movs	r2, #64	; 0x40
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a3a      	ldr	r2, [r7, #32]
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a4d      	ldr	r2, [pc, #308]	; (8003604 <HAL_I2C_Mem_Write+0x1f0>)
 80034d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034d2:	88f8      	ldrh	r0, [r7, #6]
 80034d4:	893a      	ldrh	r2, [r7, #8]
 80034d6:	8979      	ldrh	r1, [r7, #10]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	4603      	mov	r3, r0
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f001 fd86 	bl	8004ff4 <I2C_RequestMemoryWrite>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d052      	beq.n	8003594 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e081      	b.n	80035f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f002 f878 	bl	80055ec <I2C_WaitOnTXEFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2b04      	cmp	r3, #4
 8003508:	d107      	bne.n	800351a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003518:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e06b      	b.n	80035f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b04      	cmp	r3, #4
 800355a:	d11b      	bne.n	8003594 <HAL_I2C_Mem_Write+0x180>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d017      	beq.n	8003594 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	781a      	ldrb	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1aa      	bne.n	80034f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f002 f864 	bl	800566e <I2C_WaitOnBTFFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00d      	beq.n	80035c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d107      	bne.n	80035c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e016      	b.n	80035f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	00100002 	.word	0x00100002
 8003604:	ffff0000 	.word	0xffff0000

08003608 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08c      	sub	sp, #48	; 0x30
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	4608      	mov	r0, r1
 8003612:	4611      	mov	r1, r2
 8003614:	461a      	mov	r2, r3
 8003616:	4603      	mov	r3, r0
 8003618:	817b      	strh	r3, [r7, #10]
 800361a:	460b      	mov	r3, r1
 800361c:	813b      	strh	r3, [r7, #8]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003622:	f7fe fd3f 	bl	80020a4 <HAL_GetTick>
 8003626:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b20      	cmp	r3, #32
 8003632:	f040 8208 	bne.w	8003a46 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	2319      	movs	r3, #25
 800363c:	2201      	movs	r2, #1
 800363e:	497b      	ldr	r1, [pc, #492]	; (800382c <HAL_I2C_Mem_Read+0x224>)
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f001 fefd 	bl	8005440 <I2C_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
 800364e:	e1fb      	b.n	8003a48 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_I2C_Mem_Read+0x56>
 800365a:	2302      	movs	r3, #2
 800365c:	e1f4      	b.n	8003a48 <HAL_I2C_Mem_Read+0x440>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d007      	beq.n	8003684 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003692:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2222      	movs	r2, #34	; 0x22
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2240      	movs	r2, #64	; 0x40
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4a5b      	ldr	r2, [pc, #364]	; (8003830 <HAL_I2C_Mem_Read+0x228>)
 80036c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036c6:	88f8      	ldrh	r0, [r7, #6]
 80036c8:	893a      	ldrh	r2, [r7, #8]
 80036ca:	8979      	ldrh	r1, [r7, #10]
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	4603      	mov	r3, r0
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f001 fd22 	bl	8005120 <I2C_RequestMemoryRead>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e1b0      	b.n	8003a48 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d113      	bne.n	8003716 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ee:	2300      	movs	r3, #0
 80036f0:	623b      	str	r3, [r7, #32]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	623b      	str	r3, [r7, #32]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	623b      	str	r3, [r7, #32]
 8003702:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e184      	b.n	8003a20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371a:	2b01      	cmp	r3, #1
 800371c:	d11b      	bne.n	8003756 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800372c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e164      	b.n	8003a20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375a:	2b02      	cmp	r3, #2
 800375c:	d11b      	bne.n	8003796 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377e:	2300      	movs	r3, #0
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	e144      	b.n	8003a20 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037ac:	e138      	b.n	8003a20 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	f200 80f1 	bhi.w	800399a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d123      	bne.n	8003808 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f001 ffc5 	bl	8005754 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e139      	b.n	8003a48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003806:	e10b      	b.n	8003a20 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380c:	2b02      	cmp	r3, #2
 800380e:	d14e      	bne.n	80038ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003816:	2200      	movs	r2, #0
 8003818:	4906      	ldr	r1, [pc, #24]	; (8003834 <HAL_I2C_Mem_Read+0x22c>)
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f001 fe10 	bl	8005440 <I2C_WaitOnFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e10e      	b.n	8003a48 <HAL_I2C_Mem_Read+0x440>
 800382a:	bf00      	nop
 800382c:	00100002 	.word	0x00100002
 8003830:	ffff0000 	.word	0xffff0000
 8003834:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038ac:	e0b8      	b.n	8003a20 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	2200      	movs	r2, #0
 80038b6:	4966      	ldr	r1, [pc, #408]	; (8003a50 <HAL_I2C_Mem_Read+0x448>)
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f001 fdc1 	bl	8005440 <I2C_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0bf      	b.n	8003a48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	2200      	movs	r2, #0
 8003912:	494f      	ldr	r1, [pc, #316]	; (8003a50 <HAL_I2C_Mem_Read+0x448>)
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f001 fd93 	bl	8005440 <I2C_WaitOnFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e091      	b.n	8003a48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003998:	e042      	b.n	8003a20 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f001 fed8 	bl	8005754 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e04c      	b.n	8003a48 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d118      	bne.n	8003a20 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f47f aec2 	bne.w	80037ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a46:	2302      	movs	r3, #2
  }
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3728      	adds	r7, #40	; 0x28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	00010004 	.word	0x00010004

08003a54 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a74:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d003      	beq.n	8003a8c <HAL_I2C_EV_IRQHandler+0x38>
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	f040 80c1 	bne.w	8003c0e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10d      	bne.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x6e>
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003aac:	d003      	beq.n	8003ab6 <HAL_I2C_EV_IRQHandler+0x62>
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003ab4:	d101      	bne.n	8003aba <HAL_I2C_EV_IRQHandler+0x66>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_I2C_EV_IRQHandler+0x68>
 8003aba:	2300      	movs	r3, #0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	f000 8132 	beq.w	8003d26 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00c      	beq.n	8003ae6 <HAL_I2C_EV_IRQHandler+0x92>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	0a5b      	lsrs	r3, r3, #9
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d006      	beq.n	8003ae6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f001 fec0 	bl	800585e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fcdc 	bl	800449c <I2C_Master_SB>
 8003ae4:	e092      	b.n	8003c0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	08db      	lsrs	r3, r3, #3
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <HAL_I2C_EV_IRQHandler+0xb2>
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	0a5b      	lsrs	r3, r3, #9
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fd52 	bl	80045a8 <I2C_Master_ADD10>
 8003b04:	e082      	b.n	8003c0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_I2C_EV_IRQHandler+0xd2>
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	0a5b      	lsrs	r3, r3, #9
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fd6c 	bl	80045fc <I2C_Master_ADDR>
 8003b24:	e072      	b.n	8003c0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	089b      	lsrs	r3, r3, #2
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d03b      	beq.n	8003baa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b40:	f000 80f3 	beq.w	8003d2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	09db      	lsrs	r3, r3, #7
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00f      	beq.n	8003b70 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	0a9b      	lsrs	r3, r3, #10
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d009      	beq.n	8003b70 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d103      	bne.n	8003b70 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f94c 	bl	8003e06 <I2C_MasterTransmit_TXE>
 8003b6e:	e04d      	b.n	8003c0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80d6 	beq.w	8003d2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	0a5b      	lsrs	r3, r3, #9
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80cf 	beq.w	8003d2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b8c:	7bbb      	ldrb	r3, [r7, #14]
 8003b8e:	2b21      	cmp	r3, #33	; 0x21
 8003b90:	d103      	bne.n	8003b9a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f9d3 	bl	8003f3e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b98:	e0c7      	b.n	8003d2a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	2b40      	cmp	r3, #64	; 0x40
 8003b9e:	f040 80c4 	bne.w	8003d2a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fa41 	bl	800402a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ba8:	e0bf      	b.n	8003d2a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb8:	f000 80b7 	beq.w	8003d2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	099b      	lsrs	r3, r3, #6
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00f      	beq.n	8003be8 <HAL_I2C_EV_IRQHandler+0x194>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	0a9b      	lsrs	r3, r3, #10
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <HAL_I2C_EV_IRQHandler+0x194>
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d103      	bne.n	8003be8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fab6 	bl	8004152 <I2C_MasterReceive_RXNE>
 8003be6:	e011      	b.n	8003c0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 809a 	beq.w	8003d2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	0a5b      	lsrs	r3, r3, #9
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8093 	beq.w	8003d2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fb5f 	bl	80042c8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c0a:	e08e      	b.n	8003d2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c0c:	e08d      	b.n	8003d2a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d004      	beq.n	8003c20 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	e007      	b.n	8003c30 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d012      	beq.n	8003c62 <HAL_I2C_EV_IRQHandler+0x20e>
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	0a5b      	lsrs	r3, r3, #9
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00c      	beq.n	8003c62 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003c58:	69b9      	ldr	r1, [r7, #24]
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 ff1d 	bl	8004a9a <I2C_Slave_ADDR>
 8003c60:	e066      	b.n	8003d30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d009      	beq.n	8003c82 <HAL_I2C_EV_IRQHandler+0x22e>
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	0a5b      	lsrs	r3, r3, #9
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 ff58 	bl	8004b30 <I2C_Slave_STOPF>
 8003c80:	e056      	b.n	8003d30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c82:	7bbb      	ldrb	r3, [r7, #14]
 8003c84:	2b21      	cmp	r3, #33	; 0x21
 8003c86:	d002      	beq.n	8003c8e <HAL_I2C_EV_IRQHandler+0x23a>
 8003c88:	7bbb      	ldrb	r3, [r7, #14]
 8003c8a:	2b29      	cmp	r3, #41	; 0x29
 8003c8c:	d125      	bne.n	8003cda <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	09db      	lsrs	r3, r3, #7
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00f      	beq.n	8003cba <HAL_I2C_EV_IRQHandler+0x266>
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	0a9b      	lsrs	r3, r3, #10
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_I2C_EV_IRQHandler+0x266>
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	089b      	lsrs	r3, r3, #2
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d103      	bne.n	8003cba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fe33 	bl	800491e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cb8:	e039      	b.n	8003d2e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	089b      	lsrs	r3, r3, #2
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d033      	beq.n	8003d2e <HAL_I2C_EV_IRQHandler+0x2da>
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	0a5b      	lsrs	r3, r3, #9
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d02d      	beq.n	8003d2e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fe60 	bl	8004998 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cd8:	e029      	b.n	8003d2e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	099b      	lsrs	r3, r3, #6
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00f      	beq.n	8003d06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	0a9b      	lsrs	r3, r3, #10
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d009      	beq.n	8003d06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	089b      	lsrs	r3, r3, #2
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fe6b 	bl	80049da <I2C_SlaveReceive_RXNE>
 8003d04:	e014      	b.n	8003d30 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00e      	beq.n	8003d30 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	0a5b      	lsrs	r3, r3, #9
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fe99 	bl	8004a56 <I2C_SlaveReceive_BTF>
 8003d24:	e004      	b.n	8003d30 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003d26:	bf00      	nop
 8003d28:	e002      	b.n	8003d30 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d2a:	bf00      	nop
 8003d2c:	e000      	b.n	8003d30 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d2e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	70fb      	strb	r3, [r7, #3]
 8003d92:	4613      	mov	r3, r2
 8003d94:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e1c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d150      	bne.n	8003ece <I2C_MasterTransmit_TXE+0xc8>
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	2b21      	cmp	r3, #33	; 0x21
 8003e30:	d14d      	bne.n	8003ece <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d01d      	beq.n	8003e74 <I2C_MasterTransmit_TXE+0x6e>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d01a      	beq.n	8003e74 <I2C_MasterTransmit_TXE+0x6e>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e44:	d016      	beq.n	8003e74 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e54:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2211      	movs	r2, #17
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ff62 	bl	8003d36 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e72:	e060      	b.n	8003f36 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e82:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e92:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b40      	cmp	r3, #64	; 0x40
 8003eac:	d107      	bne.n	8003ebe <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ff7d 	bl	8003db6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ebc:	e03b      	b.n	8003f36 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ff35 	bl	8003d36 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ecc:	e033      	b.n	8003f36 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	2b21      	cmp	r3, #33	; 0x21
 8003ed2:	d005      	beq.n	8003ee0 <I2C_MasterTransmit_TXE+0xda>
 8003ed4:	7bbb      	ldrb	r3, [r7, #14]
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d12d      	bne.n	8003f36 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b22      	cmp	r3, #34	; 0x22
 8003ede:	d12a      	bne.n	8003f36 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d108      	bne.n	8003efc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003efa:	e01c      	b.n	8003f36 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b40      	cmp	r3, #64	; 0x40
 8003f06:	d103      	bne.n	8003f10 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f88e 	bl	800402a <I2C_MemoryTransmit_TXE_BTF>
}
 8003f0e:	e012      	b.n	8003f36 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	781a      	ldrb	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f34:	e7ff      	b.n	8003f36 <I2C_MasterTransmit_TXE+0x130>
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b21      	cmp	r3, #33	; 0x21
 8003f56:	d164      	bne.n	8004022 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d012      	beq.n	8003f88 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	781a      	ldrb	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f86:	e04c      	b.n	8004022 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d01d      	beq.n	8003fca <I2C_MasterTransmit_BTF+0x8c>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d01a      	beq.n	8003fca <I2C_MasterTransmit_BTF+0x8c>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f9a:	d016      	beq.n	8003fca <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003faa:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2211      	movs	r2, #17
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff feb7 	bl	8003d36 <HAL_I2C_MasterTxCpltCallback>
}
 8003fc8:	e02b      	b.n	8004022 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fd8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b40      	cmp	r3, #64	; 0x40
 8004002:	d107      	bne.n	8004014 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff fed2 	bl	8003db6 <HAL_I2C_MemTxCpltCallback>
}
 8004012:	e006      	b.n	8004022 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff fe8a 	bl	8003d36 <HAL_I2C_MasterTxCpltCallback>
}
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403e:	2b00      	cmp	r3, #0
 8004040:	d11d      	bne.n	800407e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004046:	2b01      	cmp	r3, #1
 8004048:	d10b      	bne.n	8004062 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404e:	b2da      	uxtb	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405a:	1c9a      	adds	r2, r3, #2
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004060:	e073      	b.n	800414a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004066:	b29b      	uxth	r3, r3
 8004068:	121b      	asrs	r3, r3, #8
 800406a:	b2da      	uxtb	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800407c:	e065      	b.n	800414a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004082:	2b01      	cmp	r3, #1
 8004084:	d10b      	bne.n	800409e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408a:	b2da      	uxtb	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800409c:	e055      	b.n	800414a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d151      	bne.n	800414a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	2b22      	cmp	r3, #34	; 0x22
 80040aa:	d10d      	bne.n	80040c8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ba:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040c6:	e040      	b.n	800414a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d015      	beq.n	80040fe <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	2b21      	cmp	r3, #33	; 0x21
 80040d6:	d112      	bne.n	80040fe <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040fc:	e025      	b.n	800414a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d120      	bne.n	800414a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b21      	cmp	r3, #33	; 0x21
 800410c:	d11d      	bne.n	800414a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800411c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff fe36 	bl	8003db6 <HAL_I2C_MemTxCpltCallback>
}
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b22      	cmp	r3, #34	; 0x22
 8004164:	f040 80ac 	bne.w	80042c0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d921      	bls.n	80041ba <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	f040 808c 	bne.w	80042c0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80041b8:	e082      	b.n	80042c0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d075      	beq.n	80042ae <I2C_MasterReceive_RXNE+0x15c>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d002      	beq.n	80041ce <I2C_MasterReceive_RXNE+0x7c>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d16f      	bne.n	80042ae <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f001 fa8e 	bl	80056f0 <I2C_WaitOnSTOPRequestThroughIT>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d142      	bne.n	8004260 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041f8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b40      	cmp	r3, #64	; 0x40
 8004232:	d10a      	bne.n	800424a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff fdc1 	bl	8003dca <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004248:	e03a      	b.n	80042c0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2212      	movs	r2, #18
 8004256:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff fd76 	bl	8003d4a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800425e:	e02f      	b.n	80042c0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800426e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fd99 	bl	8003dde <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042ac:	e008      	b.n	80042c0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042bc:	605a      	str	r2, [r3, #4]
}
 80042be:	e7ff      	b.n	80042c0 <I2C_MasterReceive_RXNE+0x16e>
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d11b      	bne.n	8004318 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ee:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004316:	e0bd      	b.n	8004494 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b03      	cmp	r3, #3
 8004320:	d129      	bne.n	8004376 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004330:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b04      	cmp	r3, #4
 8004336:	d00a      	beq.n	800434e <I2C_MasterReceive_BTF+0x86>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d007      	beq.n	800434e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800434c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004374:	e08e      	b.n	8004494 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d176      	bne.n	800446e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d002      	beq.n	800438c <I2C_MasterReceive_BTF+0xc4>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b10      	cmp	r3, #16
 800438a:	d108      	bne.n	800439e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	e019      	b.n	80043d2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d002      	beq.n	80043aa <I2C_MasterReceive_BTF+0xe2>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d108      	bne.n	80043bc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	e00a      	b.n	80043d2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d007      	beq.n	80043d2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800442c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	d10a      	bne.n	8004458 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff fcba 	bl	8003dca <HAL_I2C_MemRxCpltCallback>
}
 8004456:	e01d      	b.n	8004494 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2212      	movs	r2, #18
 8004464:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff fc6f 	bl	8003d4a <HAL_I2C_MasterRxCpltCallback>
}
 800446c:	e012      	b.n	8004494 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d117      	bne.n	80044e0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	461a      	mov	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044c8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80044ca:	e067      	b.n	800459c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	611a      	str	r2, [r3, #16]
}
 80044de:	e05d      	b.n	800459c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044e8:	d133      	bne.n	8004552 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b21      	cmp	r3, #33	; 0x21
 80044f4:	d109      	bne.n	800450a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004506:	611a      	str	r2, [r3, #16]
 8004508:	e008      	b.n	800451c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	b2da      	uxtb	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <I2C_Master_SB+0x92>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d108      	bne.n	8004540 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	2b00      	cmp	r3, #0
 8004534:	d032      	beq.n	800459c <I2C_Master_SB+0x100>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d02d      	beq.n	800459c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454e:	605a      	str	r2, [r3, #4]
}
 8004550:	e024      	b.n	800459c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10e      	bne.n	8004578 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	b29b      	uxth	r3, r3
 8004560:	11db      	asrs	r3, r3, #7
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f003 0306 	and.w	r3, r3, #6
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f063 030f 	orn	r3, r3, #15
 800456e:	b2da      	uxtb	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	611a      	str	r2, [r3, #16]
}
 8004576:	e011      	b.n	800459c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457c:	2b01      	cmp	r3, #1
 800457e:	d10d      	bne.n	800459c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004584:	b29b      	uxth	r3, r3
 8004586:	11db      	asrs	r3, r3, #7
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f003 0306 	and.w	r3, r3, #6
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f063 030e 	orn	r3, r3, #14
 8004594:	b2da      	uxtb	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	611a      	str	r2, [r3, #16]
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <I2C_Master_ADD10+0x26>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d108      	bne.n	80045e0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00c      	beq.n	80045f0 <I2C_Master_ADD10+0x48>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ee:	605a      	str	r2, [r3, #4]
  }
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b091      	sub	sp, #68	; 0x44
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800460a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b22      	cmp	r3, #34	; 0x22
 8004624:	f040 8169 	bne.w	80048fa <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10f      	bne.n	8004650 <I2C_Master_ADDR+0x54>
 8004630:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d10b      	bne.n	8004650 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004638:	2300      	movs	r3, #0
 800463a:	633b      	str	r3, [r7, #48]	; 0x30
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	633b      	str	r3, [r7, #48]	; 0x30
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	633b      	str	r3, [r7, #48]	; 0x30
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	e160      	b.n	8004912 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004654:	2b00      	cmp	r3, #0
 8004656:	d11d      	bne.n	8004694 <I2C_Master_ADDR+0x98>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004660:	d118      	bne.n	8004694 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004662:	2300      	movs	r3, #0
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004686:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	651a      	str	r2, [r3, #80]	; 0x50
 8004692:	e13e      	b.n	8004912 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d113      	bne.n	80046c6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469e:	2300      	movs	r3, #0
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	e115      	b.n	80048f2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	f040 808a 	bne.w	80047e6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80046d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046d8:	d137      	bne.n	800474a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f8:	d113      	bne.n	8004722 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004708:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470a:	2300      	movs	r3, #0
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	e0e7      	b.n	80048f2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004722:	2300      	movs	r3, #0
 8004724:	623b      	str	r3, [r7, #32]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	623b      	str	r3, [r7, #32]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	623b      	str	r3, [r7, #32]
 8004736:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	e0d3      	b.n	80048f2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	2b08      	cmp	r3, #8
 800474e:	d02e      	beq.n	80047ae <I2C_Master_ADDR+0x1b2>
 8004750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004752:	2b20      	cmp	r3, #32
 8004754:	d02b      	beq.n	80047ae <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004758:	2b12      	cmp	r3, #18
 800475a:	d102      	bne.n	8004762 <I2C_Master_ADDR+0x166>
 800475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475e:	2b01      	cmp	r3, #1
 8004760:	d125      	bne.n	80047ae <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	2b04      	cmp	r3, #4
 8004766:	d00e      	beq.n	8004786 <I2C_Master_ADDR+0x18a>
 8004768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476a:	2b02      	cmp	r3, #2
 800476c:	d00b      	beq.n	8004786 <I2C_Master_ADDR+0x18a>
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	2b10      	cmp	r3, #16
 8004772:	d008      	beq.n	8004786 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	e007      	b.n	8004796 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004794:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	e0a1      	b.n	80048f2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047bc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047be:	2300      	movs	r3, #0
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	e085      	b.n	80048f2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d14d      	bne.n	800488c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d016      	beq.n	8004824 <I2C_Master_ADDR+0x228>
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d013      	beq.n	8004824 <I2C_Master_ADDR+0x228>
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	2b10      	cmp	r3, #16
 8004800:	d010      	beq.n	8004824 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004810:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e007      	b.n	8004834 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004832:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800483e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004842:	d117      	bne.n	8004874 <I2C_Master_ADDR+0x278>
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800484a:	d00b      	beq.n	8004864 <I2C_Master_ADDR+0x268>
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	2b01      	cmp	r3, #1
 8004850:	d008      	beq.n	8004864 <I2C_Master_ADDR+0x268>
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	2b08      	cmp	r3, #8
 8004856:	d005      	beq.n	8004864 <I2C_Master_ADDR+0x268>
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	2b10      	cmp	r3, #16
 800485c:	d002      	beq.n	8004864 <I2C_Master_ADDR+0x268>
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	2b20      	cmp	r3, #32
 8004862:	d107      	bne.n	8004874 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004872:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	e032      	b.n	80048f2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800489a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048aa:	d117      	bne.n	80048dc <I2C_Master_ADDR+0x2e0>
 80048ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b2:	d00b      	beq.n	80048cc <I2C_Master_ADDR+0x2d0>
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d008      	beq.n	80048cc <I2C_Master_ADDR+0x2d0>
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d005      	beq.n	80048cc <I2C_Master_ADDR+0x2d0>
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	2b10      	cmp	r3, #16
 80048c4:	d002      	beq.n	80048cc <I2C_Master_ADDR+0x2d0>
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d107      	bne.n	80048dc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80048f8:	e00b      	b.n	8004912 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
}
 8004910:	e7ff      	b.n	8004912 <I2C_Master_ADDR+0x316>
 8004912:	bf00      	nop
 8004914:	3744      	adds	r7, #68	; 0x44
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d02b      	beq.n	8004990 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	781a      	ldrb	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d114      	bne.n	8004990 <I2C_SlaveTransmit_TXE+0x72>
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	2b29      	cmp	r3, #41	; 0x29
 800496a:	d111      	bne.n	8004990 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2221      	movs	r2, #33	; 0x21
 8004980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2228      	movs	r2, #40	; 0x28
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff f9e7 	bl	8003d5e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d011      	beq.n	80049ce <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	781a      	ldrb	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02c      	beq.n	8004a4e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d114      	bne.n	8004a4e <I2C_SlaveReceive_RXNE+0x74>
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2b2a      	cmp	r3, #42	; 0x2a
 8004a28:	d111      	bne.n	8004a4e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a38:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2222      	movs	r2, #34	; 0x22
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2228      	movs	r2, #40	; 0x28
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff f992 	bl	8003d72 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d012      	beq.n	8004a8e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ab4:	2b28      	cmp	r3, #40	; 0x28
 8004ab6:	d127      	bne.n	8004b08 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	089b      	lsrs	r3, r3, #2
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	09db      	lsrs	r3, r3, #7
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d103      	bne.n	8004aec <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	81bb      	strh	r3, [r7, #12]
 8004aea:	e002      	b.n	8004af2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004afa:	89ba      	ldrh	r2, [r7, #12]
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff f940 	bl	8003d86 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b06:	e00e      	b.n	8004b26 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b4e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004b50:	2300      	movs	r3, #0
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8c:	d172      	bne.n	8004c74 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	2b22      	cmp	r3, #34	; 0x22
 8004b92:	d002      	beq.n	8004b9a <I2C_Slave_STOPF+0x6a>
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	2b2a      	cmp	r3, #42	; 0x2a
 8004b98:	d135      	bne.n	8004c06 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f043 0204 	orr.w	r2, r3, #4
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bcc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fe f92f 	bl	8002e36 <HAL_DMA_GetState>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d049      	beq.n	8004c72 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	4a69      	ldr	r2, [pc, #420]	; (8004d88 <I2C_Slave_STOPF+0x258>)
 8004be4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe f901 	bl	8002df2 <HAL_DMA_Abort_IT>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d03d      	beq.n	8004c72 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c00:	4610      	mov	r0, r2
 8004c02:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c04:	e035      	b.n	8004c72 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f043 0204 	orr.w	r2, r3, #4
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe f8f9 	bl	8002e36 <HAL_DMA_GetState>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d014      	beq.n	8004c74 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4e:	4a4e      	ldr	r2, [pc, #312]	; (8004d88 <I2C_Slave_STOPF+0x258>)
 8004c50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe f8cb 	bl	8002df2 <HAL_DMA_Abort_IT>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d008      	beq.n	8004c74 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4798      	blx	r3
 8004c70:	e000      	b.n	8004c74 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c72:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d03e      	beq.n	8004cfc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d112      	bne.n	8004cb2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b40      	cmp	r3, #64	; 0x40
 8004cbe:	d112      	bne.n	8004ce6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	f043 0204 	orr.w	r2, r3, #4
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f843 	bl	8004d90 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004d0a:	e039      	b.n	8004d80 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d10:	d109      	bne.n	8004d26 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2228      	movs	r2, #40	; 0x28
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff f826 	bl	8003d72 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b28      	cmp	r3, #40	; 0x28
 8004d30:	d111      	bne.n	8004d56 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <I2C_Slave_STOPF+0x25c>)
 8004d36:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff f827 	bl	8003da2 <HAL_I2C_ListenCpltCallback>
}
 8004d54:	e014      	b.n	8004d80 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	2b22      	cmp	r3, #34	; 0x22
 8004d5c:	d002      	beq.n	8004d64 <I2C_Slave_STOPF+0x234>
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	2b22      	cmp	r3, #34	; 0x22
 8004d62:	d10d      	bne.n	8004d80 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fe fff9 	bl	8003d72 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d80:	bf00      	nop
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	080052f1 	.word	0x080052f1
 8004d8c:	ffff0000 	.word	0xffff0000

08004d90 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004da8:	7bbb      	ldrb	r3, [r7, #14]
 8004daa:	2b10      	cmp	r3, #16
 8004dac:	d002      	beq.n	8004db4 <I2C_ITError+0x24>
 8004dae:	7bbb      	ldrb	r3, [r7, #14]
 8004db0:	2b40      	cmp	r3, #64	; 0x40
 8004db2:	d10a      	bne.n	8004dca <I2C_ITError+0x3a>
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b22      	cmp	r3, #34	; 0x22
 8004db8:	d107      	bne.n	8004dca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dc8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004dd0:	2b28      	cmp	r3, #40	; 0x28
 8004dd2:	d107      	bne.n	8004de4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2228      	movs	r2, #40	; 0x28
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004de2:	e015      	b.n	8004e10 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df2:	d00a      	beq.n	8004e0a <I2C_ITError+0x7a>
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b60      	cmp	r3, #96	; 0x60
 8004df8:	d007      	beq.n	8004e0a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1e:	d162      	bne.n	8004ee6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e2e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d020      	beq.n	8004e80 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e42:	4a6a      	ldr	r2, [pc, #424]	; (8004fec <I2C_ITError+0x25c>)
 8004e44:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fd ffd1 	bl	8002df2 <HAL_DMA_Abort_IT>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 8089 	beq.w	8004f6a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4798      	blx	r3
 8004e7e:	e074      	b.n	8004f6a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	4a59      	ldr	r2, [pc, #356]	; (8004fec <I2C_ITError+0x25c>)
 8004e86:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fd ffb0 	bl	8002df2 <HAL_DMA_Abort_IT>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d068      	beq.n	8004f6a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea2:	2b40      	cmp	r3, #64	; 0x40
 8004ea4:	d10b      	bne.n	8004ebe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4798      	blx	r3
 8004ee4:	e041      	b.n	8004f6a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b60      	cmp	r3, #96	; 0x60
 8004ef0:	d125      	bne.n	8004f3e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	d10b      	bne.n	8004f26 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0201 	bic.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fe ff5b 	bl	8003df2 <HAL_I2C_AbortCpltCallback>
 8004f3c:	e015      	b.n	8004f6a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f48:	2b40      	cmp	r3, #64	; 0x40
 8004f4a:	d10b      	bne.n	8004f64 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fe ff3a 	bl	8003dde <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10e      	bne.n	8004f98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d109      	bne.n	8004f98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d104      	bne.n	8004f98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fa6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d113      	bne.n	8004fe4 <I2C_ITError+0x254>
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	2b28      	cmp	r3, #40	; 0x28
 8004fc0:	d110      	bne.n	8004fe4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <I2C_ITError+0x260>)
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fe fedf 	bl	8003da2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	080052f1 	.word	0x080052f1
 8004ff0:	ffff0000 	.word	0xffff0000

08004ff4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	461a      	mov	r2, r3
 8005002:	4603      	mov	r3, r0
 8005004:	817b      	strh	r3, [r7, #10]
 8005006:	460b      	mov	r3, r1
 8005008:	813b      	strh	r3, [r7, #8]
 800500a:	4613      	mov	r3, r2
 800500c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	2200      	movs	r2, #0
 8005026:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fa08 	bl	8005440 <I2C_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00d      	beq.n	8005052 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005044:	d103      	bne.n	800504e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e05f      	b.n	8005112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005052:	897b      	ldrh	r3, [r7, #10]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005060:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	6a3a      	ldr	r2, [r7, #32]
 8005066:	492d      	ldr	r1, [pc, #180]	; (800511c <I2C_RequestMemoryWrite+0x128>)
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fa40 	bl	80054ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e04c      	b.n	8005112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800508e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005090:	6a39      	ldr	r1, [r7, #32]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 faaa 	bl	80055ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00d      	beq.n	80050ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d107      	bne.n	80050b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e02b      	b.n	8005112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050ba:	88fb      	ldrh	r3, [r7, #6]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d105      	bne.n	80050cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050c0:	893b      	ldrh	r3, [r7, #8]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	611a      	str	r2, [r3, #16]
 80050ca:	e021      	b.n	8005110 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050cc:	893b      	ldrh	r3, [r7, #8]
 80050ce:	0a1b      	lsrs	r3, r3, #8
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050dc:	6a39      	ldr	r1, [r7, #32]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 fa84 	bl	80055ec <I2C_WaitOnTXEFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00d      	beq.n	8005106 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d107      	bne.n	8005102 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005100:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e005      	b.n	8005112 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005106:	893b      	ldrh	r3, [r7, #8]
 8005108:	b2da      	uxtb	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	00010002 	.word	0x00010002

08005120 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	4608      	mov	r0, r1
 800512a:	4611      	mov	r1, r2
 800512c:	461a      	mov	r2, r3
 800512e:	4603      	mov	r3, r0
 8005130:	817b      	strh	r3, [r7, #10]
 8005132:	460b      	mov	r3, r1
 8005134:	813b      	strh	r3, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005148:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005158:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	2200      	movs	r2, #0
 8005162:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f96a 	bl	8005440 <I2C_WaitOnFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00d      	beq.n	800518e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005180:	d103      	bne.n	800518a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e0aa      	b.n	80052e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800518e:	897b      	ldrh	r3, [r7, #10]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	461a      	mov	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800519c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	6a3a      	ldr	r2, [r7, #32]
 80051a2:	4952      	ldr	r1, [pc, #328]	; (80052ec <I2C_RequestMemoryRead+0x1cc>)
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 f9a2 	bl	80054ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e097      	b.n	80052e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051cc:	6a39      	ldr	r1, [r7, #32]
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fa0c 	bl	80055ec <I2C_WaitOnTXEFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00d      	beq.n	80051f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d107      	bne.n	80051f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e076      	b.n	80052e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051f6:	88fb      	ldrh	r3, [r7, #6]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d105      	bne.n	8005208 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051fc:	893b      	ldrh	r3, [r7, #8]
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	611a      	str	r2, [r3, #16]
 8005206:	e021      	b.n	800524c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005208:	893b      	ldrh	r3, [r7, #8]
 800520a:	0a1b      	lsrs	r3, r3, #8
 800520c:	b29b      	uxth	r3, r3
 800520e:	b2da      	uxtb	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005218:	6a39      	ldr	r1, [r7, #32]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f9e6 	bl	80055ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00d      	beq.n	8005242 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	2b04      	cmp	r3, #4
 800522c:	d107      	bne.n	800523e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e050      	b.n	80052e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005242:	893b      	ldrh	r3, [r7, #8]
 8005244:	b2da      	uxtb	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800524c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524e:	6a39      	ldr	r1, [r7, #32]
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f9cb 	bl	80055ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00d      	beq.n	8005278 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	2b04      	cmp	r3, #4
 8005262:	d107      	bne.n	8005274 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005272:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e035      	b.n	80052e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005286:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	2200      	movs	r2, #0
 8005290:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f8d3 	bl	8005440 <I2C_WaitOnFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00d      	beq.n	80052bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ae:	d103      	bne.n	80052b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e013      	b.n	80052e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052bc:	897b      	ldrh	r3, [r7, #10]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	6a3a      	ldr	r2, [r7, #32]
 80052d0:	4906      	ldr	r1, [pc, #24]	; (80052ec <I2C_RequestMemoryRead+0x1cc>)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f90b 	bl	80054ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	00010002 	.word	0x00010002

080052f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005308:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800530a:	4b4b      	ldr	r3, [pc, #300]	; (8005438 <I2C_DMAAbort+0x148>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	08db      	lsrs	r3, r3, #3
 8005310:	4a4a      	ldr	r2, [pc, #296]	; (800543c <I2C_DMAAbort+0x14c>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	0a1a      	lsrs	r2, r3, #8
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	00da      	lsls	r2, r3, #3
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d106      	bne.n	8005338 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005336:	e00a      	b.n	800534e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3b01      	subs	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534c:	d0ea      	beq.n	8005324 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535a:	2200      	movs	r2, #0
 800535c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	2200      	movs	r2, #0
 800536c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2200      	movs	r2, #0
 8005382:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005390:	2200      	movs	r2, #0
 8005392:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	2200      	movs	r2, #0
 80053a2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0201 	bic.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b60      	cmp	r3, #96	; 0x60
 80053be:	d10e      	bne.n	80053de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2200      	movs	r2, #0
 80053d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053d6:	6978      	ldr	r0, [r7, #20]
 80053d8:	f7fe fd0b 	bl	8003df2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053dc:	e027      	b.n	800542e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053e4:	2b28      	cmp	r3, #40	; 0x28
 80053e6:	d117      	bne.n	8005418 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005406:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2200      	movs	r2, #0
 800540c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2228      	movs	r2, #40	; 0x28
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005416:	e007      	b.n	8005428 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005428:	6978      	ldr	r0, [r7, #20]
 800542a:	f7fe fcd8 	bl	8003dde <HAL_I2C_ErrorCallback>
}
 800542e:	bf00      	nop
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20000000 	.word	0x20000000
 800543c:	14f8b589 	.word	0x14f8b589

08005440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005450:	e025      	b.n	800549e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d021      	beq.n	800549e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545a:	f7fc fe23 	bl	80020a4 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d302      	bcc.n	8005470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d116      	bne.n	800549e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f043 0220 	orr.w	r2, r3, #32
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e023      	b.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	0c1b      	lsrs	r3, r3, #16
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d10d      	bne.n	80054c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	43da      	mvns	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4013      	ands	r3, r2
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bf0c      	ite	eq
 80054ba:	2301      	moveq	r3, #1
 80054bc:	2300      	movne	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	e00c      	b.n	80054de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	43da      	mvns	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4013      	ands	r3, r2
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bf0c      	ite	eq
 80054d6:	2301      	moveq	r3, #1
 80054d8:	2300      	movne	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d0b6      	beq.n	8005452 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054fc:	e051      	b.n	80055a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550c:	d123      	bne.n	8005556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005526:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	f043 0204 	orr.w	r2, r3, #4
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e046      	b.n	80055e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d021      	beq.n	80055a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555e:	f7fc fda1 	bl	80020a4 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	429a      	cmp	r2, r3
 800556c:	d302      	bcc.n	8005574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d116      	bne.n	80055a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f043 0220 	orr.w	r2, r3, #32
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e020      	b.n	80055e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	0c1b      	lsrs	r3, r3, #16
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d10c      	bne.n	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	43da      	mvns	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4013      	ands	r3, r2
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bf14      	ite	ne
 80055be:	2301      	movne	r3, #1
 80055c0:	2300      	moveq	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	e00b      	b.n	80055de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	43da      	mvns	r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	4013      	ands	r3, r2
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bf14      	ite	ne
 80055d8:	2301      	movne	r3, #1
 80055da:	2300      	moveq	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d18d      	bne.n	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055f8:	e02d      	b.n	8005656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 f900 	bl	8005800 <I2C_IsAcknowledgeFailed>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e02d      	b.n	8005666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005610:	d021      	beq.n	8005656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005612:	f7fc fd47 	bl	80020a4 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d116      	bne.n	8005656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f043 0220 	orr.w	r2, r3, #32
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e007      	b.n	8005666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005660:	2b80      	cmp	r3, #128	; 0x80
 8005662:	d1ca      	bne.n	80055fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800567a:	e02d      	b.n	80056d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f8bf 	bl	8005800 <I2C_IsAcknowledgeFailed>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e02d      	b.n	80056e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005692:	d021      	beq.n	80056d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005694:	f7fc fd06 	bl	80020a4 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d302      	bcc.n	80056aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d116      	bne.n	80056d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	f043 0220 	orr.w	r2, r3, #32
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e007      	b.n	80056e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d1ca      	bne.n	800567c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80056fc:	4b13      	ldr	r3, [pc, #76]	; (800574c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	08db      	lsrs	r3, r3, #3
 8005702:	4a13      	ldr	r2, [pc, #76]	; (8005750 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	0a1a      	lsrs	r2, r3, #8
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3b01      	subs	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d107      	bne.n	800572e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	f043 0220 	orr.w	r2, r3, #32
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e008      	b.n	8005740 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800573c:	d0e9      	beq.n	8005712 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	20000000 	.word	0x20000000
 8005750:	14f8b589 	.word	0x14f8b589

08005754 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005760:	e042      	b.n	80057e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b10      	cmp	r3, #16
 800576e:	d119      	bne.n	80057a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0210 	mvn.w	r2, #16
 8005778:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e029      	b.n	80057f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a4:	f7fc fc7e 	bl	80020a4 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d302      	bcc.n	80057ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d116      	bne.n	80057e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	f043 0220 	orr.w	r2, r3, #32
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e007      	b.n	80057f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f2:	2b40      	cmp	r3, #64	; 0x40
 80057f4:	d1b5      	bne.n	8005762 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005816:	d11b      	bne.n	8005850 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005820:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	f043 0204 	orr.w	r2, r3, #4
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800586e:	d103      	bne.n	8005878 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005876:	e007      	b.n	8005888 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005880:	d102      	bne.n	8005888 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2208      	movs	r2, #8
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e267      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d075      	beq.n	800599e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058b2:	4b88      	ldr	r3, [pc, #544]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 030c 	and.w	r3, r3, #12
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d00c      	beq.n	80058d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058be:	4b85      	ldr	r3, [pc, #532]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d112      	bne.n	80058f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ca:	4b82      	ldr	r3, [pc, #520]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058d6:	d10b      	bne.n	80058f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d8:	4b7e      	ldr	r3, [pc, #504]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d05b      	beq.n	800599c <HAL_RCC_OscConfig+0x108>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d157      	bne.n	800599c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e242      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f8:	d106      	bne.n	8005908 <HAL_RCC_OscConfig+0x74>
 80058fa:	4b76      	ldr	r3, [pc, #472]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a75      	ldr	r2, [pc, #468]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e01d      	b.n	8005944 <HAL_RCC_OscConfig+0xb0>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005910:	d10c      	bne.n	800592c <HAL_RCC_OscConfig+0x98>
 8005912:	4b70      	ldr	r3, [pc, #448]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a6f      	ldr	r2, [pc, #444]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	4b6d      	ldr	r3, [pc, #436]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a6c      	ldr	r2, [pc, #432]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e00b      	b.n	8005944 <HAL_RCC_OscConfig+0xb0>
 800592c:	4b69      	ldr	r3, [pc, #420]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a68      	ldr	r2, [pc, #416]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	4b66      	ldr	r3, [pc, #408]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a65      	ldr	r2, [pc, #404]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 800593e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d013      	beq.n	8005974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594c:	f7fc fbaa 	bl	80020a4 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005954:	f7fc fba6 	bl	80020a4 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	; 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e207      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005966:	4b5b      	ldr	r3, [pc, #364]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0xc0>
 8005972:	e014      	b.n	800599e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005974:	f7fc fb96 	bl	80020a4 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800597c:	f7fc fb92 	bl	80020a4 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b64      	cmp	r3, #100	; 0x64
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e1f3      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800598e:	4b51      	ldr	r3, [pc, #324]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f0      	bne.n	800597c <HAL_RCC_OscConfig+0xe8>
 800599a:	e000      	b.n	800599e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800599c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d063      	beq.n	8005a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059aa:	4b4a      	ldr	r3, [pc, #296]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 030c 	and.w	r3, r3, #12
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00b      	beq.n	80059ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059b6:	4b47      	ldr	r3, [pc, #284]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d11c      	bne.n	80059fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059c2:	4b44      	ldr	r3, [pc, #272]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d116      	bne.n	80059fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ce:	4b41      	ldr	r3, [pc, #260]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <HAL_RCC_OscConfig+0x152>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d001      	beq.n	80059e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e1c7      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e6:	4b3b      	ldr	r3, [pc, #236]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4937      	ldr	r1, [pc, #220]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059fa:	e03a      	b.n	8005a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d020      	beq.n	8005a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a04:	4b34      	ldr	r3, [pc, #208]	; (8005ad8 <HAL_RCC_OscConfig+0x244>)
 8005a06:	2201      	movs	r2, #1
 8005a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0a:	f7fc fb4b 	bl	80020a4 <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a12:	f7fc fb47 	bl	80020a4 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e1a8      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a24:	4b2b      	ldr	r3, [pc, #172]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f0      	beq.n	8005a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a30:	4b28      	ldr	r3, [pc, #160]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	4925      	ldr	r1, [pc, #148]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	600b      	str	r3, [r1, #0]
 8005a44:	e015      	b.n	8005a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a46:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <HAL_RCC_OscConfig+0x244>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4c:	f7fc fb2a 	bl	80020a4 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a54:	f7fc fb26 	bl	80020a4 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e187      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a66:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f0      	bne.n	8005a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d036      	beq.n	8005aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d016      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a86:	4b15      	ldr	r3, [pc, #84]	; (8005adc <HAL_RCC_OscConfig+0x248>)
 8005a88:	2201      	movs	r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a8c:	f7fc fb0a 	bl	80020a4 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a94:	f7fc fb06 	bl	80020a4 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e167      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0f0      	beq.n	8005a94 <HAL_RCC_OscConfig+0x200>
 8005ab2:	e01b      	b.n	8005aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ab4:	4b09      	ldr	r3, [pc, #36]	; (8005adc <HAL_RCC_OscConfig+0x248>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aba:	f7fc faf3 	bl	80020a4 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac0:	e00e      	b.n	8005ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ac2:	f7fc faef 	bl	80020a4 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d907      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e150      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	42470000 	.word	0x42470000
 8005adc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ae0:	4b88      	ldr	r3, [pc, #544]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1ea      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8097 	beq.w	8005c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005afa:	2300      	movs	r3, #0
 8005afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005afe:	4b81      	ldr	r3, [pc, #516]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10f      	bne.n	8005b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	4b7d      	ldr	r3, [pc, #500]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	4a7c      	ldr	r2, [pc, #496]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b18:	6413      	str	r3, [r2, #64]	; 0x40
 8005b1a:	4b7a      	ldr	r3, [pc, #488]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b22:	60bb      	str	r3, [r7, #8]
 8005b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b26:	2301      	movs	r3, #1
 8005b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b2a:	4b77      	ldr	r3, [pc, #476]	; (8005d08 <HAL_RCC_OscConfig+0x474>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d118      	bne.n	8005b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b36:	4b74      	ldr	r3, [pc, #464]	; (8005d08 <HAL_RCC_OscConfig+0x474>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a73      	ldr	r2, [pc, #460]	; (8005d08 <HAL_RCC_OscConfig+0x474>)
 8005b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b42:	f7fc faaf 	bl	80020a4 <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b4a:	f7fc faab 	bl	80020a4 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e10c      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5c:	4b6a      	ldr	r3, [pc, #424]	; (8005d08 <HAL_RCC_OscConfig+0x474>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0f0      	beq.n	8005b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d106      	bne.n	8005b7e <HAL_RCC_OscConfig+0x2ea>
 8005b70:	4b64      	ldr	r3, [pc, #400]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b74:	4a63      	ldr	r2, [pc, #396]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b76:	f043 0301 	orr.w	r3, r3, #1
 8005b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b7c:	e01c      	b.n	8005bb8 <HAL_RCC_OscConfig+0x324>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x30c>
 8005b86:	4b5f      	ldr	r3, [pc, #380]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	4a5e      	ldr	r2, [pc, #376]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b8c:	f043 0304 	orr.w	r3, r3, #4
 8005b90:	6713      	str	r3, [r2, #112]	; 0x70
 8005b92:	4b5c      	ldr	r3, [pc, #368]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b96:	4a5b      	ldr	r2, [pc, #364]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b9e:	e00b      	b.n	8005bb8 <HAL_RCC_OscConfig+0x324>
 8005ba0:	4b58      	ldr	r3, [pc, #352]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba4:	4a57      	ldr	r2, [pc, #348]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005ba6:	f023 0301 	bic.w	r3, r3, #1
 8005baa:	6713      	str	r3, [r2, #112]	; 0x70
 8005bac:	4b55      	ldr	r3, [pc, #340]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb0:	4a54      	ldr	r2, [pc, #336]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005bb2:	f023 0304 	bic.w	r3, r3, #4
 8005bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d015      	beq.n	8005bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc0:	f7fc fa70 	bl	80020a4 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc6:	e00a      	b.n	8005bde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bc8:	f7fc fa6c 	bl	80020a4 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e0cb      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bde:	4b49      	ldr	r3, [pc, #292]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0ee      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x334>
 8005bea:	e014      	b.n	8005c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bec:	f7fc fa5a 	bl	80020a4 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bf2:	e00a      	b.n	8005c0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bf4:	f7fc fa56 	bl	80020a4 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e0b5      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c0a:	4b3e      	ldr	r3, [pc, #248]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1ee      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d105      	bne.n	8005c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c1c:	4b39      	ldr	r3, [pc, #228]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	4a38      	ldr	r2, [pc, #224]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80a1 	beq.w	8005d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c32:	4b34      	ldr	r3, [pc, #208]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 030c 	and.w	r3, r3, #12
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d05c      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d141      	bne.n	8005cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c46:	4b31      	ldr	r3, [pc, #196]	; (8005d0c <HAL_RCC_OscConfig+0x478>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c4c:	f7fc fa2a 	bl	80020a4 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c54:	f7fc fa26 	bl	80020a4 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e087      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c66:	4b27      	ldr	r3, [pc, #156]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f0      	bne.n	8005c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69da      	ldr	r2, [r3, #28]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	019b      	lsls	r3, r3, #6
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	041b      	lsls	r3, r3, #16
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	061b      	lsls	r3, r3, #24
 8005c96:	491b      	ldr	r1, [pc, #108]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c9c:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <HAL_RCC_OscConfig+0x478>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca2:	f7fc f9ff 	bl	80020a4 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005caa:	f7fc f9fb 	bl	80020a4 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e05c      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cbc:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f0      	beq.n	8005caa <HAL_RCC_OscConfig+0x416>
 8005cc8:	e054      	b.n	8005d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cca:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <HAL_RCC_OscConfig+0x478>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd0:	f7fc f9e8 	bl	80020a4 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cd8:	f7fc f9e4 	bl	80020a4 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e045      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f0      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x444>
 8005cf6:	e03d      	b.n	8005d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d107      	bne.n	8005d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e038      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
 8005d04:	40023800 	.word	0x40023800
 8005d08:	40007000 	.word	0x40007000
 8005d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d10:	4b1b      	ldr	r3, [pc, #108]	; (8005d80 <HAL_RCC_OscConfig+0x4ec>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d028      	beq.n	8005d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d121      	bne.n	8005d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d11a      	bne.n	8005d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d40:	4013      	ands	r3, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d111      	bne.n	8005d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d107      	bne.n	8005d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40023800 	.word	0x40023800

08005d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0cc      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d98:	4b68      	ldr	r3, [pc, #416]	; (8005f3c <HAL_RCC_ClockConfig+0x1b8>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d90c      	bls.n	8005dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da6:	4b65      	ldr	r3, [pc, #404]	; (8005f3c <HAL_RCC_ClockConfig+0x1b8>)
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dae:	4b63      	ldr	r3, [pc, #396]	; (8005f3c <HAL_RCC_ClockConfig+0x1b8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d001      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e0b8      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d020      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dd8:	4b59      	ldr	r3, [pc, #356]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4a58      	ldr	r2, [pc, #352]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005df0:	4b53      	ldr	r3, [pc, #332]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	4a52      	ldr	r2, [pc, #328]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dfc:	4b50      	ldr	r3, [pc, #320]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	494d      	ldr	r1, [pc, #308]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d044      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d107      	bne.n	8005e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e22:	4b47      	ldr	r3, [pc, #284]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d119      	bne.n	8005e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e07f      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d003      	beq.n	8005e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d107      	bne.n	8005e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e42:	4b3f      	ldr	r3, [pc, #252]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e06f      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e52:	4b3b      	ldr	r3, [pc, #236]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e067      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e62:	4b37      	ldr	r3, [pc, #220]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f023 0203 	bic.w	r2, r3, #3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	4934      	ldr	r1, [pc, #208]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e74:	f7fc f916 	bl	80020a4 <HAL_GetTick>
 8005e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e7a:	e00a      	b.n	8005e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e7c:	f7fc f912 	bl	80020a4 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e04f      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e92:	4b2b      	ldr	r3, [pc, #172]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 020c 	and.w	r2, r3, #12
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d1eb      	bne.n	8005e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ea4:	4b25      	ldr	r3, [pc, #148]	; (8005f3c <HAL_RCC_ClockConfig+0x1b8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d20c      	bcs.n	8005ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb2:	4b22      	ldr	r3, [pc, #136]	; (8005f3c <HAL_RCC_ClockConfig+0x1b8>)
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eba:	4b20      	ldr	r3, [pc, #128]	; (8005f3c <HAL_RCC_ClockConfig+0x1b8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e032      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d008      	beq.n	8005eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ed8:	4b19      	ldr	r3, [pc, #100]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	4916      	ldr	r1, [pc, #88]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d009      	beq.n	8005f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ef6:	4b12      	ldr	r3, [pc, #72]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	490e      	ldr	r1, [pc, #56]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f0a:	f000 f821 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	091b      	lsrs	r3, r3, #4
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	490a      	ldr	r1, [pc, #40]	; (8005f44 <HAL_RCC_ClockConfig+0x1c0>)
 8005f1c:	5ccb      	ldrb	r3, [r1, r3]
 8005f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f22:	4a09      	ldr	r2, [pc, #36]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f26:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fc f876 	bl	800201c <HAL_InitTick>

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40023c00 	.word	0x40023c00
 8005f40:	40023800 	.word	0x40023800
 8005f44:	08008b0c 	.word	0x08008b0c
 8005f48:	20000000 	.word	0x20000000
 8005f4c:	20000004 	.word	0x20000004

08005f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f54:	b090      	sub	sp, #64	; 0x40
 8005f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f60:	2300      	movs	r3, #0
 8005f62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f68:	4b59      	ldr	r3, [pc, #356]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 030c 	and.w	r3, r3, #12
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d00d      	beq.n	8005f90 <HAL_RCC_GetSysClockFreq+0x40>
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	f200 80a1 	bhi.w	80060bc <HAL_RCC_GetSysClockFreq+0x16c>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_RCC_GetSysClockFreq+0x34>
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d003      	beq.n	8005f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8005f82:	e09b      	b.n	80060bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f84:	4b53      	ldr	r3, [pc, #332]	; (80060d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005f86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005f88:	e09b      	b.n	80060c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f8a:	4b53      	ldr	r3, [pc, #332]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005f8e:	e098      	b.n	80060c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f90:	4b4f      	ldr	r3, [pc, #316]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f9a:	4b4d      	ldr	r3, [pc, #308]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d028      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa6:	4b4a      	ldr	r3, [pc, #296]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	099b      	lsrs	r3, r3, #6
 8005fac:	2200      	movs	r2, #0
 8005fae:	623b      	str	r3, [r7, #32]
 8005fb0:	627a      	str	r2, [r7, #36]	; 0x24
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005fb8:	2100      	movs	r1, #0
 8005fba:	4b47      	ldr	r3, [pc, #284]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fbc:	fb03 f201 	mul.w	r2, r3, r1
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	fb00 f303 	mul.w	r3, r0, r3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	4a43      	ldr	r2, [pc, #268]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fca:	fba0 1202 	umull	r1, r2, r0, r2
 8005fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fd0:	460a      	mov	r2, r1
 8005fd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8005fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fd6:	4413      	add	r3, r2
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fdc:	2200      	movs	r2, #0
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	61fa      	str	r2, [r7, #28]
 8005fe2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fe6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005fea:	f7fa f951 	bl	8000290 <__aeabi_uldivmod>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ff6:	e053      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ff8:	4b35      	ldr	r3, [pc, #212]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	099b      	lsrs	r3, r3, #6
 8005ffe:	2200      	movs	r2, #0
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	617a      	str	r2, [r7, #20]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800600a:	f04f 0b00 	mov.w	fp, #0
 800600e:	4652      	mov	r2, sl
 8006010:	465b      	mov	r3, fp
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f04f 0100 	mov.w	r1, #0
 800601a:	0159      	lsls	r1, r3, #5
 800601c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006020:	0150      	lsls	r0, r2, #5
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	ebb2 080a 	subs.w	r8, r2, sl
 800602a:	eb63 090b 	sbc.w	r9, r3, fp
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800603a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800603e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006042:	ebb2 0408 	subs.w	r4, r2, r8
 8006046:	eb63 0509 	sbc.w	r5, r3, r9
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	00eb      	lsls	r3, r5, #3
 8006054:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006058:	00e2      	lsls	r2, r4, #3
 800605a:	4614      	mov	r4, r2
 800605c:	461d      	mov	r5, r3
 800605e:	eb14 030a 	adds.w	r3, r4, sl
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	eb45 030b 	adc.w	r3, r5, fp
 8006068:	607b      	str	r3, [r7, #4]
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	f04f 0300 	mov.w	r3, #0
 8006072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006076:	4629      	mov	r1, r5
 8006078:	028b      	lsls	r3, r1, #10
 800607a:	4621      	mov	r1, r4
 800607c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006080:	4621      	mov	r1, r4
 8006082:	028a      	lsls	r2, r1, #10
 8006084:	4610      	mov	r0, r2
 8006086:	4619      	mov	r1, r3
 8006088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608a:	2200      	movs	r2, #0
 800608c:	60bb      	str	r3, [r7, #8]
 800608e:	60fa      	str	r2, [r7, #12]
 8006090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006094:	f7fa f8fc 	bl	8000290 <__aeabi_uldivmod>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4613      	mov	r3, r2
 800609e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060a0:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	0c1b      	lsrs	r3, r3, #16
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	3301      	adds	r3, #1
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80060b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060ba:	e002      	b.n	80060c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060bc:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80060be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3740      	adds	r7, #64	; 0x40
 80060c8:	46bd      	mov	sp, r7
 80060ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060ce:	bf00      	nop
 80060d0:	40023800 	.word	0x40023800
 80060d4:	00f42400 	.word	0x00f42400
 80060d8:	017d7840 	.word	0x017d7840

080060dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060e0:	4b03      	ldr	r3, [pc, #12]	; (80060f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80060e2:	681b      	ldr	r3, [r3, #0]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	20000000 	.word	0x20000000

080060f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060f8:	f7ff fff0 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	0a9b      	lsrs	r3, r3, #10
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	4903      	ldr	r1, [pc, #12]	; (8006118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006110:	4618      	mov	r0, r3
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40023800 	.word	0x40023800
 8006118:	08008b1c 	.word	0x08008b1c

0800611c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006120:	f7ff ffdc 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8006124:	4602      	mov	r2, r0
 8006126:	4b05      	ldr	r3, [pc, #20]	; (800613c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	0b5b      	lsrs	r3, r3, #13
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	4903      	ldr	r1, [pc, #12]	; (8006140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006132:	5ccb      	ldrb	r3, [r1, r3]
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40023800 	.word	0x40023800
 8006140:	08008b1c 	.word	0x08008b1c

08006144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e041      	b.n	80061da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fb fce6 	bl	8001b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f000 fb1a 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e041      	b.n	8006278 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d106      	bne.n	800620e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7fb fc33 	bl	8001a74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3304      	adds	r3, #4
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f000 facb 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d109      	bne.n	80062a4 <HAL_TIM_PWM_Start+0x24>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	bf14      	ite	ne
 800629c:	2301      	movne	r3, #1
 800629e:	2300      	moveq	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	e022      	b.n	80062ea <HAL_TIM_PWM_Start+0x6a>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d109      	bne.n	80062be <HAL_TIM_PWM_Start+0x3e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	e015      	b.n	80062ea <HAL_TIM_PWM_Start+0x6a>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d109      	bne.n	80062d8 <HAL_TIM_PWM_Start+0x58>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	e008      	b.n	80062ea <HAL_TIM_PWM_Start+0x6a>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	bf14      	ite	ne
 80062e4:	2301      	movne	r3, #1
 80062e6:	2300      	moveq	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e068      	b.n	80063c4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <HAL_TIM_PWM_Start+0x82>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006300:	e013      	b.n	800632a <HAL_TIM_PWM_Start+0xaa>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b04      	cmp	r3, #4
 8006306:	d104      	bne.n	8006312 <HAL_TIM_PWM_Start+0x92>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006310:	e00b      	b.n	800632a <HAL_TIM_PWM_Start+0xaa>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b08      	cmp	r3, #8
 8006316:	d104      	bne.n	8006322 <HAL_TIM_PWM_Start+0xa2>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006320:	e003      	b.n	800632a <HAL_TIM_PWM_Start+0xaa>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2202      	movs	r2, #2
 8006326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2201      	movs	r2, #1
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	4618      	mov	r0, r3
 8006334:	f000 fce8 	bl	8006d08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a23      	ldr	r2, [pc, #140]	; (80063cc <HAL_TIM_PWM_Start+0x14c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d107      	bne.n	8006352 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006350:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <HAL_TIM_PWM_Start+0x14c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d018      	beq.n	800638e <HAL_TIM_PWM_Start+0x10e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006364:	d013      	beq.n	800638e <HAL_TIM_PWM_Start+0x10e>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a19      	ldr	r2, [pc, #100]	; (80063d0 <HAL_TIM_PWM_Start+0x150>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00e      	beq.n	800638e <HAL_TIM_PWM_Start+0x10e>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a17      	ldr	r2, [pc, #92]	; (80063d4 <HAL_TIM_PWM_Start+0x154>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d009      	beq.n	800638e <HAL_TIM_PWM_Start+0x10e>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a16      	ldr	r2, [pc, #88]	; (80063d8 <HAL_TIM_PWM_Start+0x158>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_TIM_PWM_Start+0x10e>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a14      	ldr	r2, [pc, #80]	; (80063dc <HAL_TIM_PWM_Start+0x15c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d111      	bne.n	80063b2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b06      	cmp	r3, #6
 800639e:	d010      	beq.n	80063c2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b0:	e007      	b.n	80063c2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0201 	orr.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40010000 	.word	0x40010000
 80063d0:	40000400 	.word	0x40000400
 80063d4:	40000800 	.word	0x40000800
 80063d8:	40000c00 	.word	0x40000c00
 80063dc:	40014000 	.word	0x40014000

080063e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fc88 	bl	8006d08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a29      	ldr	r2, [pc, #164]	; (80064a4 <HAL_TIM_PWM_Stop+0xc4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d117      	bne.n	8006432 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6a1a      	ldr	r2, [r3, #32]
 8006408:	f241 1311 	movw	r3, #4369	; 0x1111
 800640c:	4013      	ands	r3, r2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10f      	bne.n	8006432 <HAL_TIM_PWM_Stop+0x52>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6a1a      	ldr	r2, [r3, #32]
 8006418:	f240 4344 	movw	r3, #1092	; 0x444
 800641c:	4013      	ands	r3, r2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d107      	bne.n	8006432 <HAL_TIM_PWM_Stop+0x52>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006430:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6a1a      	ldr	r2, [r3, #32]
 8006438:	f241 1311 	movw	r3, #4369	; 0x1111
 800643c:	4013      	ands	r3, r2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10f      	bne.n	8006462 <HAL_TIM_PWM_Stop+0x82>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6a1a      	ldr	r2, [r3, #32]
 8006448:	f240 4344 	movw	r3, #1092	; 0x444
 800644c:	4013      	ands	r3, r2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d107      	bne.n	8006462 <HAL_TIM_PWM_Stop+0x82>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0201 	bic.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d104      	bne.n	8006472 <HAL_TIM_PWM_Stop+0x92>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006470:	e013      	b.n	800649a <HAL_TIM_PWM_Stop+0xba>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b04      	cmp	r3, #4
 8006476:	d104      	bne.n	8006482 <HAL_TIM_PWM_Stop+0xa2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006480:	e00b      	b.n	800649a <HAL_TIM_PWM_Stop+0xba>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b08      	cmp	r3, #8
 8006486:	d104      	bne.n	8006492 <HAL_TIM_PWM_Stop+0xb2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006490:	e003      	b.n	800649a <HAL_TIM_PWM_Stop+0xba>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40010000 	.word	0x40010000

080064a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e0ae      	b.n	8006624 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b0c      	cmp	r3, #12
 80064d2:	f200 809f 	bhi.w	8006614 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	08006511 	.word	0x08006511
 80064e0:	08006615 	.word	0x08006615
 80064e4:	08006615 	.word	0x08006615
 80064e8:	08006615 	.word	0x08006615
 80064ec:	08006551 	.word	0x08006551
 80064f0:	08006615 	.word	0x08006615
 80064f4:	08006615 	.word	0x08006615
 80064f8:	08006615 	.word	0x08006615
 80064fc:	08006593 	.word	0x08006593
 8006500:	08006615 	.word	0x08006615
 8006504:	08006615 	.word	0x08006615
 8006508:	08006615 	.word	0x08006615
 800650c:	080065d3 	.word	0x080065d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	4618      	mov	r0, r3
 8006518:	f000 f9d0 	bl	80068bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0208 	orr.w	r2, r2, #8
 800652a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0204 	bic.w	r2, r2, #4
 800653a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6999      	ldr	r1, [r3, #24]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	619a      	str	r2, [r3, #24]
      break;
 800654e:	e064      	b.n	800661a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68b9      	ldr	r1, [r7, #8]
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fa16 	bl	8006988 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699a      	ldr	r2, [r3, #24]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800656a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6999      	ldr	r1, [r3, #24]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	021a      	lsls	r2, r3, #8
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	619a      	str	r2, [r3, #24]
      break;
 8006590:	e043      	b.n	800661a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fa61 	bl	8006a60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0208 	orr.w	r2, r2, #8
 80065ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69da      	ldr	r2, [r3, #28]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0204 	bic.w	r2, r2, #4
 80065bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69d9      	ldr	r1, [r3, #28]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	61da      	str	r2, [r3, #28]
      break;
 80065d0:	e023      	b.n	800661a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68b9      	ldr	r1, [r7, #8]
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 faab 	bl	8006b34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69da      	ldr	r2, [r3, #28]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69d9      	ldr	r1, [r3, #28]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	021a      	lsls	r2, r3, #8
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	61da      	str	r2, [r3, #28]
      break;
 8006612:	e002      	b.n	800661a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	75fb      	strb	r3, [r7, #23]
      break;
 8006618:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006622:	7dfb      	ldrb	r3, [r7, #23]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_TIM_ConfigClockSource+0x1c>
 8006644:	2302      	movs	r3, #2
 8006646:	e0b4      	b.n	80067b2 <HAL_TIM_ConfigClockSource+0x186>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800666e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006680:	d03e      	beq.n	8006700 <HAL_TIM_ConfigClockSource+0xd4>
 8006682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006686:	f200 8087 	bhi.w	8006798 <HAL_TIM_ConfigClockSource+0x16c>
 800668a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668e:	f000 8086 	beq.w	800679e <HAL_TIM_ConfigClockSource+0x172>
 8006692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006696:	d87f      	bhi.n	8006798 <HAL_TIM_ConfigClockSource+0x16c>
 8006698:	2b70      	cmp	r3, #112	; 0x70
 800669a:	d01a      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0xa6>
 800669c:	2b70      	cmp	r3, #112	; 0x70
 800669e:	d87b      	bhi.n	8006798 <HAL_TIM_ConfigClockSource+0x16c>
 80066a0:	2b60      	cmp	r3, #96	; 0x60
 80066a2:	d050      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x11a>
 80066a4:	2b60      	cmp	r3, #96	; 0x60
 80066a6:	d877      	bhi.n	8006798 <HAL_TIM_ConfigClockSource+0x16c>
 80066a8:	2b50      	cmp	r3, #80	; 0x50
 80066aa:	d03c      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0xfa>
 80066ac:	2b50      	cmp	r3, #80	; 0x50
 80066ae:	d873      	bhi.n	8006798 <HAL_TIM_ConfigClockSource+0x16c>
 80066b0:	2b40      	cmp	r3, #64	; 0x40
 80066b2:	d058      	beq.n	8006766 <HAL_TIM_ConfigClockSource+0x13a>
 80066b4:	2b40      	cmp	r3, #64	; 0x40
 80066b6:	d86f      	bhi.n	8006798 <HAL_TIM_ConfigClockSource+0x16c>
 80066b8:	2b30      	cmp	r3, #48	; 0x30
 80066ba:	d064      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0x15a>
 80066bc:	2b30      	cmp	r3, #48	; 0x30
 80066be:	d86b      	bhi.n	8006798 <HAL_TIM_ConfigClockSource+0x16c>
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d060      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0x15a>
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	d867      	bhi.n	8006798 <HAL_TIM_ConfigClockSource+0x16c>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d05c      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0x15a>
 80066cc:	2b10      	cmp	r3, #16
 80066ce:	d05a      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0x15a>
 80066d0:	e062      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6899      	ldr	r1, [r3, #8]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f000 faf1 	bl	8006cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	609a      	str	r2, [r3, #8]
      break;
 80066fe:	e04f      	b.n	80067a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	6899      	ldr	r1, [r3, #8]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f000 fada 	bl	8006cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006722:	609a      	str	r2, [r3, #8]
      break;
 8006724:	e03c      	b.n	80067a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6859      	ldr	r1, [r3, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	461a      	mov	r2, r3
 8006734:	f000 fa4e 	bl	8006bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2150      	movs	r1, #80	; 0x50
 800673e:	4618      	mov	r0, r3
 8006740:	f000 faa7 	bl	8006c92 <TIM_ITRx_SetConfig>
      break;
 8006744:	e02c      	b.n	80067a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	6859      	ldr	r1, [r3, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	461a      	mov	r2, r3
 8006754:	f000 fa6d 	bl	8006c32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2160      	movs	r1, #96	; 0x60
 800675e:	4618      	mov	r0, r3
 8006760:	f000 fa97 	bl	8006c92 <TIM_ITRx_SetConfig>
      break;
 8006764:	e01c      	b.n	80067a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	6859      	ldr	r1, [r3, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	461a      	mov	r2, r3
 8006774:	f000 fa2e 	bl	8006bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2140      	movs	r1, #64	; 0x40
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fa87 	bl	8006c92 <TIM_ITRx_SetConfig>
      break;
 8006784:	e00c      	b.n	80067a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4619      	mov	r1, r3
 8006790:	4610      	mov	r0, r2
 8006792:	f000 fa7e 	bl	8006c92 <TIM_ITRx_SetConfig>
      break;
 8006796:	e003      	b.n	80067a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	73fb      	strb	r3, [r7, #15]
      break;
 800679c:	e000      	b.n	80067a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800679e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
	...

080067bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a34      	ldr	r2, [pc, #208]	; (80068a0 <TIM_Base_SetConfig+0xe4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00f      	beq.n	80067f4 <TIM_Base_SetConfig+0x38>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067da:	d00b      	beq.n	80067f4 <TIM_Base_SetConfig+0x38>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a31      	ldr	r2, [pc, #196]	; (80068a4 <TIM_Base_SetConfig+0xe8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d007      	beq.n	80067f4 <TIM_Base_SetConfig+0x38>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a30      	ldr	r2, [pc, #192]	; (80068a8 <TIM_Base_SetConfig+0xec>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d003      	beq.n	80067f4 <TIM_Base_SetConfig+0x38>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a2f      	ldr	r2, [pc, #188]	; (80068ac <TIM_Base_SetConfig+0xf0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d108      	bne.n	8006806 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a25      	ldr	r2, [pc, #148]	; (80068a0 <TIM_Base_SetConfig+0xe4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d01b      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006814:	d017      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a22      	ldr	r2, [pc, #136]	; (80068a4 <TIM_Base_SetConfig+0xe8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d013      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a21      	ldr	r2, [pc, #132]	; (80068a8 <TIM_Base_SetConfig+0xec>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00f      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a20      	ldr	r2, [pc, #128]	; (80068ac <TIM_Base_SetConfig+0xf0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00b      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a1f      	ldr	r2, [pc, #124]	; (80068b0 <TIM_Base_SetConfig+0xf4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d007      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a1e      	ldr	r2, [pc, #120]	; (80068b4 <TIM_Base_SetConfig+0xf8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d003      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <TIM_Base_SetConfig+0xfc>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d108      	bne.n	8006858 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a08      	ldr	r2, [pc, #32]	; (80068a0 <TIM_Base_SetConfig+0xe4>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d103      	bne.n	800688c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	691a      	ldr	r2, [r3, #16]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	615a      	str	r2, [r3, #20]
}
 8006892:	bf00      	nop
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40010000 	.word	0x40010000
 80068a4:	40000400 	.word	0x40000400
 80068a8:	40000800 	.word	0x40000800
 80068ac:	40000c00 	.word	0x40000c00
 80068b0:	40014000 	.word	0x40014000
 80068b4:	40014400 	.word	0x40014400
 80068b8:	40014800 	.word	0x40014800

080068bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f023 0201 	bic.w	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0303 	bic.w	r3, r3, #3
 80068f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f023 0302 	bic.w	r3, r3, #2
 8006904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	4313      	orrs	r3, r2
 800690e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a1c      	ldr	r2, [pc, #112]	; (8006984 <TIM_OC1_SetConfig+0xc8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d10c      	bne.n	8006932 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f023 0308 	bic.w	r3, r3, #8
 800691e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	4313      	orrs	r3, r2
 8006928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f023 0304 	bic.w	r3, r3, #4
 8006930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a13      	ldr	r2, [pc, #76]	; (8006984 <TIM_OC1_SetConfig+0xc8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d111      	bne.n	800695e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	4313      	orrs	r3, r2
 8006952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	621a      	str	r2, [r3, #32]
}
 8006978:	bf00      	nop
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	40010000 	.word	0x40010000

08006988 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	f023 0210 	bic.w	r2, r3, #16
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	021b      	lsls	r3, r3, #8
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f023 0320 	bic.w	r3, r3, #32
 80069d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a1e      	ldr	r2, [pc, #120]	; (8006a5c <TIM_OC2_SetConfig+0xd4>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d10d      	bne.n	8006a04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <TIM_OC2_SetConfig+0xd4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d113      	bne.n	8006a34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	621a      	str	r2, [r3, #32]
}
 8006a4e:	bf00      	nop
 8006a50:	371c      	adds	r7, #28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40010000 	.word	0x40010000

08006a60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0303 	bic.w	r3, r3, #3
 8006a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	021b      	lsls	r3, r3, #8
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a1d      	ldr	r2, [pc, #116]	; (8006b30 <TIM_OC3_SetConfig+0xd0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d10d      	bne.n	8006ada <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	021b      	lsls	r3, r3, #8
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a14      	ldr	r2, [pc, #80]	; (8006b30 <TIM_OC3_SetConfig+0xd0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d113      	bne.n	8006b0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	621a      	str	r2, [r3, #32]
}
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	40010000 	.word	0x40010000

08006b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	031b      	lsls	r3, r3, #12
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a10      	ldr	r2, [pc, #64]	; (8006bd0 <TIM_OC4_SetConfig+0x9c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d109      	bne.n	8006ba8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	019b      	lsls	r3, r3, #6
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000

08006bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f023 0201 	bic.w	r2, r3, #1
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f023 030a 	bic.w	r3, r3, #10
 8006c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	621a      	str	r2, [r3, #32]
}
 8006c26:	bf00      	nop
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b087      	sub	sp, #28
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f023 0210 	bic.w	r2, r3, #16
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	031b      	lsls	r3, r3, #12
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	011b      	lsls	r3, r3, #4
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	621a      	str	r2, [r3, #32]
}
 8006c86:	bf00      	nop
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b085      	sub	sp, #20
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f043 0307 	orr.w	r3, r3, #7
 8006cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	609a      	str	r2, [r3, #8]
}
 8006cbc:	bf00      	nop
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	021a      	lsls	r2, r3, #8
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	431a      	orrs	r2, r3
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	609a      	str	r2, [r3, #8]
}
 8006cfc:	bf00      	nop
 8006cfe:	371c      	adds	r7, #28
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f003 031f 	and.w	r3, r3, #31
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a1a      	ldr	r2, [r3, #32]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	43db      	mvns	r3, r3
 8006d2a:	401a      	ands	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a1a      	ldr	r2, [r3, #32]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f003 031f 	and.w	r3, r3, #31
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d40:	431a      	orrs	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	621a      	str	r2, [r3, #32]
}
 8006d46:	bf00      	nop
 8006d48:	371c      	adds	r7, #28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e050      	b.n	8006e0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d018      	beq.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db8:	d013      	beq.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a18      	ldr	r2, [pc, #96]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00e      	beq.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a16      	ldr	r2, [pc, #88]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d009      	beq.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a15      	ldr	r2, [pc, #84]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d004      	beq.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a13      	ldr	r2, [pc, #76]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d10c      	bne.n	8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40010000 	.word	0x40010000
 8006e20:	40000400 	.word	0x40000400
 8006e24:	40000800 	.word	0x40000800
 8006e28:	40000c00 	.word	0x40000c00
 8006e2c:	40014000 	.word	0x40014000

08006e30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e03d      	b.n	8006ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e03f      	b.n	8006f66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fa ff30 	bl	8001d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2224      	movs	r2, #36	; 0x24
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fcdf 	bl	80078dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	695a      	ldr	r2, [r3, #20]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b20      	cmp	r3, #32
 8006f86:	d11d      	bne.n	8006fc4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <HAL_UART_Receive_IT+0x26>
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e016      	b.n	8006fc6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d101      	bne.n	8006fa6 <HAL_UART_Receive_IT+0x38>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e00f      	b.n	8006fc6 <HAL_UART_Receive_IT+0x58>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006fb4:	88fb      	ldrh	r3, [r7, #6]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 fab6 	bl	800752c <UART_Start_Receive_IT>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	e000      	b.n	8006fc6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006fc4:	2302      	movs	r3, #2
  }
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b0ba      	sub	sp, #232	; 0xe8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800700e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10f      	bne.n	8007036 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d009      	beq.n	8007036 <HAL_UART_IRQHandler+0x66>
 8007022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fb99 	bl	8007766 <UART_Receive_IT>
      return;
 8007034:	e256      	b.n	80074e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007036:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 80de 	beq.w	80071fc <HAL_UART_IRQHandler+0x22c>
 8007040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d106      	bne.n	800705a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800704c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007050:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 80d1 	beq.w	80071fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800705a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00b      	beq.n	800707e <HAL_UART_IRQHandler+0xae>
 8007066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800706a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706e:	2b00      	cmp	r3, #0
 8007070:	d005      	beq.n	800707e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	f043 0201 	orr.w	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800707e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007082:	f003 0304 	and.w	r3, r3, #4
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <HAL_UART_IRQHandler+0xd2>
 800708a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	f043 0202 	orr.w	r2, r3, #2
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <HAL_UART_IRQHandler+0xf6>
 80070ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d005      	beq.n	80070c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	f043 0204 	orr.w	r2, r3, #4
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80070c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d011      	beq.n	80070f6 <HAL_UART_IRQHandler+0x126>
 80070d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d105      	bne.n	80070ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	f043 0208 	orr.w	r2, r3, #8
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 81ed 	beq.w	80074da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b00      	cmp	r3, #0
 800710a:	d008      	beq.n	800711e <HAL_UART_IRQHandler+0x14e>
 800710c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fb24 	bl	8007766 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007128:	2b40      	cmp	r3, #64	; 0x40
 800712a:	bf0c      	ite	eq
 800712c:	2301      	moveq	r3, #1
 800712e:	2300      	movne	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	f003 0308 	and.w	r3, r3, #8
 800713e:	2b00      	cmp	r3, #0
 8007140:	d103      	bne.n	800714a <HAL_UART_IRQHandler+0x17a>
 8007142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007146:	2b00      	cmp	r3, #0
 8007148:	d04f      	beq.n	80071ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fa2c 	bl	80075a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715a:	2b40      	cmp	r3, #64	; 0x40
 800715c:	d141      	bne.n	80071e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3314      	adds	r3, #20
 8007164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800717c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3314      	adds	r3, #20
 8007186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800718a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800718e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800719a:	e841 2300 	strex	r3, r2, [r1]
 800719e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80071a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1d9      	bne.n	800715e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d013      	beq.n	80071da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	4a7d      	ldr	r2, [pc, #500]	; (80073ac <HAL_UART_IRQHandler+0x3dc>)
 80071b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fb fe17 	bl	8002df2 <HAL_DMA_Abort_IT>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d016      	beq.n	80071f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071d4:	4610      	mov	r0, r2
 80071d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d8:	e00e      	b.n	80071f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f990 	bl	8007500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e0:	e00a      	b.n	80071f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f98c 	bl	8007500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e8:	e006      	b.n	80071f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f988 	bl	8007500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80071f6:	e170      	b.n	80074da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f8:	bf00      	nop
    return;
 80071fa:	e16e      	b.n	80074da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007200:	2b01      	cmp	r3, #1
 8007202:	f040 814a 	bne.w	800749a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720a:	f003 0310 	and.w	r3, r3, #16
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 8143 	beq.w	800749a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007218:	f003 0310 	and.w	r3, r3, #16
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 813c 	beq.w	800749a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007222:	2300      	movs	r3, #0
 8007224:	60bb      	str	r3, [r7, #8]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	60bb      	str	r3, [r7, #8]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	60bb      	str	r3, [r7, #8]
 8007236:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007242:	2b40      	cmp	r3, #64	; 0x40
 8007244:	f040 80b4 	bne.w	80073b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007254:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 8140 	beq.w	80074de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007266:	429a      	cmp	r2, r3
 8007268:	f080 8139 	bcs.w	80074de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007272:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800727e:	f000 8088 	beq.w	8007392 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	330c      	adds	r3, #12
 8007288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800729c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	330c      	adds	r3, #12
 80072aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80072ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1d9      	bne.n	8007282 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3314      	adds	r3, #20
 80072d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072e0:	f023 0301 	bic.w	r3, r3, #1
 80072e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3314      	adds	r3, #20
 80072ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072fe:	e841 2300 	strex	r3, r2, [r1]
 8007302:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1e1      	bne.n	80072ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3314      	adds	r3, #20
 8007310:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800731a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800731c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3314      	adds	r3, #20
 800732a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800732e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007330:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007334:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800733c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e3      	bne.n	800730a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	330c      	adds	r3, #12
 8007356:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007362:	f023 0310 	bic.w	r3, r3, #16
 8007366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007374:	65ba      	str	r2, [r7, #88]	; 0x58
 8007376:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800737a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e3      	bne.n	8007350 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738c:	4618      	mov	r0, r3
 800738e:	f7fb fcc0 	bl	8002d12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800739a:	b29b      	uxth	r3, r3
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	b29b      	uxth	r3, r3
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f8b6 	bl	8007514 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073a8:	e099      	b.n	80074de <HAL_UART_IRQHandler+0x50e>
 80073aa:	bf00      	nop
 80073ac:	0800766f 	.word	0x0800766f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 808b 	beq.w	80074e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80073cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 8086 	beq.w	80074e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	330c      	adds	r3, #12
 80073dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	330c      	adds	r3, #12
 80073f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80073fa:	647a      	str	r2, [r7, #68]	; 0x44
 80073fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e3      	bne.n	80073d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3314      	adds	r3, #20
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	623b      	str	r3, [r7, #32]
   return(result);
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	f023 0301 	bic.w	r3, r3, #1
 8007424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3314      	adds	r3, #20
 800742e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007432:	633a      	str	r2, [r7, #48]	; 0x30
 8007434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e3      	bne.n	800740e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2220      	movs	r2, #32
 800744a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	330c      	adds	r3, #12
 800745a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	60fb      	str	r3, [r7, #12]
   return(result);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0310 	bic.w	r3, r3, #16
 800746a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	330c      	adds	r3, #12
 8007474:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007478:	61fa      	str	r2, [r7, #28]
 800747a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	69b9      	ldr	r1, [r7, #24]
 800747e:	69fa      	ldr	r2, [r7, #28]
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	617b      	str	r3, [r7, #20]
   return(result);
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e3      	bne.n	8007454 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800748c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f83e 	bl	8007514 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007498:	e023      	b.n	80074e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800749a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d009      	beq.n	80074ba <HAL_UART_IRQHandler+0x4ea>
 80074a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f8ef 	bl	8007696 <UART_Transmit_IT>
    return;
 80074b8:	e014      	b.n	80074e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00e      	beq.n	80074e4 <HAL_UART_IRQHandler+0x514>
 80074c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d008      	beq.n	80074e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f92f 	bl	8007736 <UART_EndTransmit_IT>
    return;
 80074d8:	e004      	b.n	80074e4 <HAL_UART_IRQHandler+0x514>
    return;
 80074da:	bf00      	nop
 80074dc:	e002      	b.n	80074e4 <HAL_UART_IRQHandler+0x514>
      return;
 80074de:	bf00      	nop
 80074e0:	e000      	b.n	80074e4 <HAL_UART_IRQHandler+0x514>
      return;
 80074e2:	bf00      	nop
  }
}
 80074e4:	37e8      	adds	r7, #232	; 0xe8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop

080074ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	4613      	mov	r3, r2
 8007538:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	88fa      	ldrh	r2, [r7, #6]
 8007544:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	88fa      	ldrh	r2, [r7, #6]
 800754a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2222      	movs	r2, #34	; 0x22
 8007556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d007      	beq.n	800757a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68da      	ldr	r2, [r3, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007578:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	695a      	ldr	r2, [r3, #20]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 0201 	orr.w	r2, r2, #1
 8007588:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f042 0220 	orr.w	r2, r2, #32
 8007598:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b095      	sub	sp, #84	; 0x54
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	330c      	adds	r3, #12
 80075b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ba:	e853 3f00 	ldrex	r3, [r3]
 80075be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	330c      	adds	r3, #12
 80075ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075d0:	643a      	str	r2, [r7, #64]	; 0x40
 80075d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e5      	bne.n	80075b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3314      	adds	r3, #20
 80075ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	f023 0301 	bic.w	r3, r3, #1
 80075fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3314      	adds	r3, #20
 8007602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007604:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800760a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e5      	bne.n	80075e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	2b01      	cmp	r3, #1
 800761e:	d119      	bne.n	8007654 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	330c      	adds	r3, #12
 8007626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	e853 3f00 	ldrex	r3, [r3]
 800762e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f023 0310 	bic.w	r3, r3, #16
 8007636:	647b      	str	r3, [r7, #68]	; 0x44
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	330c      	adds	r3, #12
 800763e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007640:	61ba      	str	r2, [r7, #24]
 8007642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	6979      	ldr	r1, [r7, #20]
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	e841 2300 	strex	r3, r2, [r1]
 800764c:	613b      	str	r3, [r7, #16]
   return(result);
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e5      	bne.n	8007620 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2220      	movs	r2, #32
 8007658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007662:	bf00      	nop
 8007664:	3754      	adds	r7, #84	; 0x54
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f7ff ff39 	bl	8007500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800768e:	bf00      	nop
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b21      	cmp	r3, #33	; 0x21
 80076a8:	d13e      	bne.n	8007728 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b2:	d114      	bne.n	80076de <UART_Transmit_IT+0x48>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d110      	bne.n	80076de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	1c9a      	adds	r2, r3, #2
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	621a      	str	r2, [r3, #32]
 80076dc:	e008      	b.n	80076f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	1c59      	adds	r1, r3, #1
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6211      	str	r1, [r2, #32]
 80076e8:	781a      	ldrb	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	4619      	mov	r1, r3
 80076fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10f      	bne.n	8007724 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68da      	ldr	r2, [r3, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007712:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007722:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	e000      	b.n	800772a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007728:	2302      	movs	r3, #2
  }
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800774c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2220      	movs	r2, #32
 8007752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7ff fec8 	bl	80074ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b08c      	sub	sp, #48	; 0x30
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b22      	cmp	r3, #34	; 0x22
 8007778:	f040 80ab 	bne.w	80078d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007784:	d117      	bne.n	80077b6 <UART_Receive_IT+0x50>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d113      	bne.n	80077b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800778e:	2300      	movs	r3, #0
 8007790:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	1c9a      	adds	r2, r3, #2
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	629a      	str	r2, [r3, #40]	; 0x28
 80077b4:	e026      	b.n	8007804 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80077bc:	2300      	movs	r3, #0
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c8:	d007      	beq.n	80077da <UART_Receive_IT+0x74>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <UART_Receive_IT+0x82>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	e008      	b.n	80077fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29b      	uxth	r3, r3
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4619      	mov	r1, r3
 8007812:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007814:	2b00      	cmp	r3, #0
 8007816:	d15a      	bne.n	80078ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0220 	bic.w	r2, r2, #32
 8007826:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007836:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	695a      	ldr	r2, [r3, #20]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0201 	bic.w	r2, r2, #1
 8007846:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	2b01      	cmp	r3, #1
 8007856:	d135      	bne.n	80078c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	330c      	adds	r3, #12
 8007864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	613b      	str	r3, [r7, #16]
   return(result);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f023 0310 	bic.w	r3, r3, #16
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	330c      	adds	r3, #12
 800787c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787e:	623a      	str	r2, [r7, #32]
 8007880:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007882:	69f9      	ldr	r1, [r7, #28]
 8007884:	6a3a      	ldr	r2, [r7, #32]
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	61bb      	str	r3, [r7, #24]
   return(result);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e5      	bne.n	800785e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	2b10      	cmp	r3, #16
 800789e:	d10a      	bne.n	80078b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff fe29 	bl	8007514 <HAL_UARTEx_RxEventCallback>
 80078c2:	e002      	b.n	80078ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7f9 fd0d 	bl	80012e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e002      	b.n	80078d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	e000      	b.n	80078d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80078d2:	2302      	movs	r3, #2
  }
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3730      	adds	r7, #48	; 0x30
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078e0:	b0c0      	sub	sp, #256	; 0x100
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f8:	68d9      	ldr	r1, [r3, #12]
 80078fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	ea40 0301 	orr.w	r3, r0, r1
 8007904:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	431a      	orrs	r2, r3
 8007914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	431a      	orrs	r2, r3
 800791c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	4313      	orrs	r3, r2
 8007924:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007934:	f021 010c 	bic.w	r1, r1, #12
 8007938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007942:	430b      	orrs	r3, r1
 8007944:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007956:	6999      	ldr	r1, [r3, #24]
 8007958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	ea40 0301 	orr.w	r3, r0, r1
 8007962:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	4b8f      	ldr	r3, [pc, #572]	; (8007ba8 <UART_SetConfig+0x2cc>)
 800796c:	429a      	cmp	r2, r3
 800796e:	d005      	beq.n	800797c <UART_SetConfig+0xa0>
 8007970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	4b8d      	ldr	r3, [pc, #564]	; (8007bac <UART_SetConfig+0x2d0>)
 8007978:	429a      	cmp	r2, r3
 800797a:	d104      	bne.n	8007986 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800797c:	f7fe fbce 	bl	800611c <HAL_RCC_GetPCLK2Freq>
 8007980:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007984:	e003      	b.n	800798e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007986:	f7fe fbb5 	bl	80060f4 <HAL_RCC_GetPCLK1Freq>
 800798a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800798e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007998:	f040 810c 	bne.w	8007bb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800799c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079a0:	2200      	movs	r2, #0
 80079a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80079aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80079ae:	4622      	mov	r2, r4
 80079b0:	462b      	mov	r3, r5
 80079b2:	1891      	adds	r1, r2, r2
 80079b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80079b6:	415b      	adcs	r3, r3
 80079b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80079be:	4621      	mov	r1, r4
 80079c0:	eb12 0801 	adds.w	r8, r2, r1
 80079c4:	4629      	mov	r1, r5
 80079c6:	eb43 0901 	adc.w	r9, r3, r1
 80079ca:	f04f 0200 	mov.w	r2, #0
 80079ce:	f04f 0300 	mov.w	r3, #0
 80079d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079de:	4690      	mov	r8, r2
 80079e0:	4699      	mov	r9, r3
 80079e2:	4623      	mov	r3, r4
 80079e4:	eb18 0303 	adds.w	r3, r8, r3
 80079e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079ec:	462b      	mov	r3, r5
 80079ee:	eb49 0303 	adc.w	r3, r9, r3
 80079f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	18db      	adds	r3, r3, r3
 8007a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8007a10:	4613      	mov	r3, r2
 8007a12:	eb42 0303 	adc.w	r3, r2, r3
 8007a16:	657b      	str	r3, [r7, #84]	; 0x54
 8007a18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a20:	f7f8 fc36 	bl	8000290 <__aeabi_uldivmod>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4b61      	ldr	r3, [pc, #388]	; (8007bb0 <UART_SetConfig+0x2d4>)
 8007a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a2e:	095b      	lsrs	r3, r3, #5
 8007a30:	011c      	lsls	r4, r3, #4
 8007a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a36:	2200      	movs	r2, #0
 8007a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a44:	4642      	mov	r2, r8
 8007a46:	464b      	mov	r3, r9
 8007a48:	1891      	adds	r1, r2, r2
 8007a4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a4c:	415b      	adcs	r3, r3
 8007a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a54:	4641      	mov	r1, r8
 8007a56:	eb12 0a01 	adds.w	sl, r2, r1
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	eb43 0b01 	adc.w	fp, r3, r1
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	f04f 0300 	mov.w	r3, #0
 8007a68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a74:	4692      	mov	sl, r2
 8007a76:	469b      	mov	fp, r3
 8007a78:	4643      	mov	r3, r8
 8007a7a:	eb1a 0303 	adds.w	r3, sl, r3
 8007a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a82:	464b      	mov	r3, r9
 8007a84:	eb4b 0303 	adc.w	r3, fp, r3
 8007a88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	18db      	adds	r3, r3, r3
 8007aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	eb42 0303 	adc.w	r3, r2, r3
 8007aac:	647b      	str	r3, [r7, #68]	; 0x44
 8007aae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ab2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007ab6:	f7f8 fbeb 	bl	8000290 <__aeabi_uldivmod>
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	4611      	mov	r1, r2
 8007ac0:	4b3b      	ldr	r3, [pc, #236]	; (8007bb0 <UART_SetConfig+0x2d4>)
 8007ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ac6:	095b      	lsrs	r3, r3, #5
 8007ac8:	2264      	movs	r2, #100	; 0x64
 8007aca:	fb02 f303 	mul.w	r3, r2, r3
 8007ace:	1acb      	subs	r3, r1, r3
 8007ad0:	00db      	lsls	r3, r3, #3
 8007ad2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ad6:	4b36      	ldr	r3, [pc, #216]	; (8007bb0 <UART_SetConfig+0x2d4>)
 8007ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8007adc:	095b      	lsrs	r3, r3, #5
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ae4:	441c      	add	r4, r3
 8007ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aea:	2200      	movs	r2, #0
 8007aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007af0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007af4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007af8:	4642      	mov	r2, r8
 8007afa:	464b      	mov	r3, r9
 8007afc:	1891      	adds	r1, r2, r2
 8007afe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b00:	415b      	adcs	r3, r3
 8007b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b08:	4641      	mov	r1, r8
 8007b0a:	1851      	adds	r1, r2, r1
 8007b0c:	6339      	str	r1, [r7, #48]	; 0x30
 8007b0e:	4649      	mov	r1, r9
 8007b10:	414b      	adcs	r3, r1
 8007b12:	637b      	str	r3, [r7, #52]	; 0x34
 8007b14:	f04f 0200 	mov.w	r2, #0
 8007b18:	f04f 0300 	mov.w	r3, #0
 8007b1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b20:	4659      	mov	r1, fp
 8007b22:	00cb      	lsls	r3, r1, #3
 8007b24:	4651      	mov	r1, sl
 8007b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b2a:	4651      	mov	r1, sl
 8007b2c:	00ca      	lsls	r2, r1, #3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4619      	mov	r1, r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	4642      	mov	r2, r8
 8007b36:	189b      	adds	r3, r3, r2
 8007b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b3c:	464b      	mov	r3, r9
 8007b3e:	460a      	mov	r2, r1
 8007b40:	eb42 0303 	adc.w	r3, r2, r3
 8007b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	18db      	adds	r3, r3, r3
 8007b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b62:	4613      	mov	r3, r2
 8007b64:	eb42 0303 	adc.w	r3, r2, r3
 8007b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b72:	f7f8 fb8d 	bl	8000290 <__aeabi_uldivmod>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4b0d      	ldr	r3, [pc, #52]	; (8007bb0 <UART_SetConfig+0x2d4>)
 8007b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b80:	095b      	lsrs	r3, r3, #5
 8007b82:	2164      	movs	r1, #100	; 0x64
 8007b84:	fb01 f303 	mul.w	r3, r1, r3
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	3332      	adds	r3, #50	; 0x32
 8007b8e:	4a08      	ldr	r2, [pc, #32]	; (8007bb0 <UART_SetConfig+0x2d4>)
 8007b90:	fba2 2303 	umull	r2, r3, r2, r3
 8007b94:	095b      	lsrs	r3, r3, #5
 8007b96:	f003 0207 	and.w	r2, r3, #7
 8007b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4422      	add	r2, r4
 8007ba2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ba4:	e105      	b.n	8007db2 <UART_SetConfig+0x4d6>
 8007ba6:	bf00      	nop
 8007ba8:	40011000 	.word	0x40011000
 8007bac:	40011400 	.word	0x40011400
 8007bb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007bbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007bc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007bc6:	4642      	mov	r2, r8
 8007bc8:	464b      	mov	r3, r9
 8007bca:	1891      	adds	r1, r2, r2
 8007bcc:	6239      	str	r1, [r7, #32]
 8007bce:	415b      	adcs	r3, r3
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bd6:	4641      	mov	r1, r8
 8007bd8:	1854      	adds	r4, r2, r1
 8007bda:	4649      	mov	r1, r9
 8007bdc:	eb43 0501 	adc.w	r5, r3, r1
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	00eb      	lsls	r3, r5, #3
 8007bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bee:	00e2      	lsls	r2, r4, #3
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	461d      	mov	r5, r3
 8007bf4:	4643      	mov	r3, r8
 8007bf6:	18e3      	adds	r3, r4, r3
 8007bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bfc:	464b      	mov	r3, r9
 8007bfe:	eb45 0303 	adc.w	r3, r5, r3
 8007c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c16:	f04f 0200 	mov.w	r2, #0
 8007c1a:	f04f 0300 	mov.w	r3, #0
 8007c1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c22:	4629      	mov	r1, r5
 8007c24:	008b      	lsls	r3, r1, #2
 8007c26:	4621      	mov	r1, r4
 8007c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	008a      	lsls	r2, r1, #2
 8007c30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c34:	f7f8 fb2c 	bl	8000290 <__aeabi_uldivmod>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4b60      	ldr	r3, [pc, #384]	; (8007dc0 <UART_SetConfig+0x4e4>)
 8007c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c42:	095b      	lsrs	r3, r3, #5
 8007c44:	011c      	lsls	r4, r3, #4
 8007c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c58:	4642      	mov	r2, r8
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	1891      	adds	r1, r2, r2
 8007c5e:	61b9      	str	r1, [r7, #24]
 8007c60:	415b      	adcs	r3, r3
 8007c62:	61fb      	str	r3, [r7, #28]
 8007c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c68:	4641      	mov	r1, r8
 8007c6a:	1851      	adds	r1, r2, r1
 8007c6c:	6139      	str	r1, [r7, #16]
 8007c6e:	4649      	mov	r1, r9
 8007c70:	414b      	adcs	r3, r1
 8007c72:	617b      	str	r3, [r7, #20]
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c80:	4659      	mov	r1, fp
 8007c82:	00cb      	lsls	r3, r1, #3
 8007c84:	4651      	mov	r1, sl
 8007c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c8a:	4651      	mov	r1, sl
 8007c8c:	00ca      	lsls	r2, r1, #3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	4619      	mov	r1, r3
 8007c92:	4603      	mov	r3, r0
 8007c94:	4642      	mov	r2, r8
 8007c96:	189b      	adds	r3, r3, r2
 8007c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c9c:	464b      	mov	r3, r9
 8007c9e:	460a      	mov	r2, r1
 8007ca0:	eb42 0303 	adc.w	r3, r2, r3
 8007ca4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	008b      	lsls	r3, r1, #2
 8007cc4:	4641      	mov	r1, r8
 8007cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cca:	4641      	mov	r1, r8
 8007ccc:	008a      	lsls	r2, r1, #2
 8007cce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007cd2:	f7f8 fadd 	bl	8000290 <__aeabi_uldivmod>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4b39      	ldr	r3, [pc, #228]	; (8007dc0 <UART_SetConfig+0x4e4>)
 8007cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ce0:	095b      	lsrs	r3, r3, #5
 8007ce2:	2164      	movs	r1, #100	; 0x64
 8007ce4:	fb01 f303 	mul.w	r3, r1, r3
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	011b      	lsls	r3, r3, #4
 8007cec:	3332      	adds	r3, #50	; 0x32
 8007cee:	4a34      	ldr	r2, [pc, #208]	; (8007dc0 <UART_SetConfig+0x4e4>)
 8007cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf4:	095b      	lsrs	r3, r3, #5
 8007cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cfa:	441c      	add	r4, r3
 8007cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d00:	2200      	movs	r2, #0
 8007d02:	673b      	str	r3, [r7, #112]	; 0x70
 8007d04:	677a      	str	r2, [r7, #116]	; 0x74
 8007d06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d0a:	4642      	mov	r2, r8
 8007d0c:	464b      	mov	r3, r9
 8007d0e:	1891      	adds	r1, r2, r2
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	415b      	adcs	r3, r3
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d1a:	4641      	mov	r1, r8
 8007d1c:	1851      	adds	r1, r2, r1
 8007d1e:	6039      	str	r1, [r7, #0]
 8007d20:	4649      	mov	r1, r9
 8007d22:	414b      	adcs	r3, r1
 8007d24:	607b      	str	r3, [r7, #4]
 8007d26:	f04f 0200 	mov.w	r2, #0
 8007d2a:	f04f 0300 	mov.w	r3, #0
 8007d2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d32:	4659      	mov	r1, fp
 8007d34:	00cb      	lsls	r3, r1, #3
 8007d36:	4651      	mov	r1, sl
 8007d38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d3c:	4651      	mov	r1, sl
 8007d3e:	00ca      	lsls	r2, r1, #3
 8007d40:	4610      	mov	r0, r2
 8007d42:	4619      	mov	r1, r3
 8007d44:	4603      	mov	r3, r0
 8007d46:	4642      	mov	r2, r8
 8007d48:	189b      	adds	r3, r3, r2
 8007d4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d4c:	464b      	mov	r3, r9
 8007d4e:	460a      	mov	r2, r1
 8007d50:	eb42 0303 	adc.w	r3, r2, r3
 8007d54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	663b      	str	r3, [r7, #96]	; 0x60
 8007d60:	667a      	str	r2, [r7, #100]	; 0x64
 8007d62:	f04f 0200 	mov.w	r2, #0
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d6e:	4649      	mov	r1, r9
 8007d70:	008b      	lsls	r3, r1, #2
 8007d72:	4641      	mov	r1, r8
 8007d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d78:	4641      	mov	r1, r8
 8007d7a:	008a      	lsls	r2, r1, #2
 8007d7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d80:	f7f8 fa86 	bl	8000290 <__aeabi_uldivmod>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <UART_SetConfig+0x4e4>)
 8007d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	2164      	movs	r1, #100	; 0x64
 8007d92:	fb01 f303 	mul.w	r3, r1, r3
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	3332      	adds	r3, #50	; 0x32
 8007d9c:	4a08      	ldr	r2, [pc, #32]	; (8007dc0 <UART_SetConfig+0x4e4>)
 8007d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007da2:	095b      	lsrs	r3, r3, #5
 8007da4:	f003 020f 	and.w	r2, r3, #15
 8007da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4422      	add	r2, r4
 8007db0:	609a      	str	r2, [r3, #8]
}
 8007db2:	bf00      	nop
 8007db4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007db8:	46bd      	mov	sp, r7
 8007dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dbe:	bf00      	nop
 8007dc0:	51eb851f 	.word	0x51eb851f

08007dc4 <_ZNSaIcEC1Ev>:
 8007dc4:	4770      	bx	lr

08007dc6 <_ZNSaIcED1Ev>:
 8007dc6:	4770      	bx	lr

08007dc8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8007dc8:	b10a      	cbz	r2, 8007dce <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8007dca:	f000 b90d 	b.w	8007fe8 <memcpy>
 8007dce:	4770      	bx	lr

08007dd0 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8007dd0:	b10a      	cbz	r2, 8007dd6 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8007dd2:	f000 b8f9 	b.w	8007fc8 <memcmp>
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4770      	bx	lr
	...

08007ddc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8007ddc:	b508      	push	{r3, lr}
 8007dde:	680b      	ldr	r3, [r1, #0]
 8007de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de4:	d302      	bcc.n	8007dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8007de6:	480d      	ldr	r0, [pc, #52]	; (8007e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8007de8:	f000 f8a0 	bl	8007f2c <_ZSt20__throw_length_errorPKc>
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d90b      	bls.n	8007e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8007df0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8007df4:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8007df8:	d206      	bcs.n	8007e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8007dfa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007dfe:	bf2a      	itet	cs
 8007e00:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8007e04:	6008      	strcc	r0, [r1, #0]
 8007e06:	600b      	strcs	r3, [r1, #0]
 8007e08:	6808      	ldr	r0, [r1, #0]
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d501      	bpl.n	8007e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8007e0e:	f000 f887 	bl	8007f20 <_ZSt17__throw_bad_allocv>
 8007e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e16:	f000 b872 	b.w	8007efe <_Znwj>
 8007e1a:	bf00      	nop
 8007e1c:	08008b24 	.word	0x08008b24

08007e20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8007e20:	f850 3b08 	ldr.w	r3, [r0], #8
 8007e24:	4283      	cmp	r3, r0
 8007e26:	d002      	beq.n	8007e2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 b866 	b.w	8007efa <_ZdlPv>
 8007e2e:	4770      	bx	lr

08007e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8007e30:	2a01      	cmp	r2, #1
 8007e32:	b410      	push	{r4}
 8007e34:	d104      	bne.n	8007e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8007e36:	780a      	ldrb	r2, [r1, #0]
 8007e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e3c:	7002      	strb	r2, [r0, #0]
 8007e3e:	4770      	bx	lr
 8007e40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e44:	f7ff bfc0 	b.w	8007dc8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08007e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8007e48:	b508      	push	{r3, lr}
 8007e4a:	1a52      	subs	r2, r2, r1
 8007e4c:	f7ff fff0 	bl	8007e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007e50:	bd08      	pop	{r3, pc}

08007e52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8007e52:	b510      	push	{r4, lr}
 8007e54:	4604      	mov	r4, r0
 8007e56:	f7ff ffe3 	bl	8007e20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	bd10      	pop	{r4, pc}

08007e5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8007e5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e60:	6846      	ldr	r6, [r0, #4]
 8007e62:	9101      	str	r1, [sp, #4]
 8007e64:	4605      	mov	r5, r0
 8007e66:	4608      	mov	r0, r1
 8007e68:	f7f8 fa0a 	bl	8000280 <strlen>
 8007e6c:	4286      	cmp	r6, r0
 8007e6e:	4604      	mov	r4, r0
 8007e70:	4632      	mov	r2, r6
 8007e72:	9901      	ldr	r1, [sp, #4]
 8007e74:	bf28      	it	cs
 8007e76:	4602      	movcs	r2, r0
 8007e78:	6828      	ldr	r0, [r5, #0]
 8007e7a:	f7ff ffa9 	bl	8007dd0 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8007e7e:	b900      	cbnz	r0, 8007e82 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8007e80:	1b30      	subs	r0, r6, r4
 8007e82:	b002      	add	sp, #8
 8007e84:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8007e88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	4616      	mov	r6, r2
 8007e8e:	460d      	mov	r5, r1
 8007e90:	b919      	cbnz	r1, 8007e9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8007e92:	b112      	cbz	r2, 8007e9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8007e94:	480d      	ldr	r0, [pc, #52]	; (8007ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8007e96:	f000 f846 	bl	8007f26 <_ZSt19__throw_logic_errorPKc>
 8007e9a:	1b73      	subs	r3, r6, r5
 8007e9c:	2b0f      	cmp	r3, #15
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	d907      	bls.n	8007eb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	a901      	add	r1, sp, #4
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f7ff ff98 	bl	8007ddc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007eac:	9b01      	ldr	r3, [sp, #4]
 8007eae:	6020      	str	r0, [r4, #0]
 8007eb0:	60a3      	str	r3, [r4, #8]
 8007eb2:	4632      	mov	r2, r6
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	6820      	ldr	r0, [r4, #0]
 8007eb8:	f7ff ffc6 	bl	8007e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8007ebc:	9b01      	ldr	r3, [sp, #4]
 8007ebe:	6822      	ldr	r2, [r4, #0]
 8007ec0:	6063      	str	r3, [r4, #4]
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	54d1      	strb	r1, [r2, r3]
 8007ec6:	b002      	add	sp, #8
 8007ec8:	bd70      	pop	{r4, r5, r6, pc}
 8007eca:	bf00      	nop
 8007ecc:	08008b3c 	.word	0x08008b3c

08007ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	f100 0308 	add.w	r3, r0, #8
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	6003      	str	r3, [r0, #0]
 8007eda:	460d      	mov	r5, r1
 8007edc:	b159      	cbz	r1, 8007ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8007ede:	4608      	mov	r0, r1
 8007ee0:	f7f8 f9ce 	bl	8000280 <strlen>
 8007ee4:	182a      	adds	r2, r5, r0
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	4629      	mov	r1, r5
 8007eee:	f7ff ffcb 	bl	8007e88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	bd38      	pop	{r3, r4, r5, pc}
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	e7f5      	b.n	8007ee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08007efa <_ZdlPv>:
 8007efa:	f000 b85d 	b.w	8007fb8 <free>

08007efe <_Znwj>:
 8007efe:	2801      	cmp	r0, #1
 8007f00:	bf38      	it	cc
 8007f02:	2001      	movcc	r0, #1
 8007f04:	b510      	push	{r4, lr}
 8007f06:	4604      	mov	r4, r0
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 f84d 	bl	8007fa8 <malloc>
 8007f0e:	b930      	cbnz	r0, 8007f1e <_Znwj+0x20>
 8007f10:	f000 f810 	bl	8007f34 <_ZSt15get_new_handlerv>
 8007f14:	b908      	cbnz	r0, 8007f1a <_Znwj+0x1c>
 8007f16:	f000 f815 	bl	8007f44 <abort>
 8007f1a:	4780      	blx	r0
 8007f1c:	e7f4      	b.n	8007f08 <_Znwj+0xa>
 8007f1e:	bd10      	pop	{r4, pc}

08007f20 <_ZSt17__throw_bad_allocv>:
 8007f20:	b508      	push	{r3, lr}
 8007f22:	f000 f80f 	bl	8007f44 <abort>

08007f26 <_ZSt19__throw_logic_errorPKc>:
 8007f26:	b508      	push	{r3, lr}
 8007f28:	f000 f80c 	bl	8007f44 <abort>

08007f2c <_ZSt20__throw_length_errorPKc>:
 8007f2c:	b508      	push	{r3, lr}
 8007f2e:	f000 f809 	bl	8007f44 <abort>
	...

08007f34 <_ZSt15get_new_handlerv>:
 8007f34:	4b02      	ldr	r3, [pc, #8]	; (8007f40 <_ZSt15get_new_handlerv+0xc>)
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	f3bf 8f5b 	dmb	ish
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	200003bc 	.word	0x200003bc

08007f44 <abort>:
 8007f44:	b508      	push	{r3, lr}
 8007f46:	2006      	movs	r0, #6
 8007f48:	f000 f996 	bl	8008278 <raise>
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	f7f9 ffc7 	bl	8001ee0 <_exit>
	...

08007f54 <__errno>:
 8007f54:	4b01      	ldr	r3, [pc, #4]	; (8007f5c <__errno+0x8>)
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	2000000c 	.word	0x2000000c

08007f60 <__libc_init_array>:
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	4d0d      	ldr	r5, [pc, #52]	; (8007f98 <__libc_init_array+0x38>)
 8007f64:	4c0d      	ldr	r4, [pc, #52]	; (8007f9c <__libc_init_array+0x3c>)
 8007f66:	1b64      	subs	r4, r4, r5
 8007f68:	10a4      	asrs	r4, r4, #2
 8007f6a:	2600      	movs	r6, #0
 8007f6c:	42a6      	cmp	r6, r4
 8007f6e:	d109      	bne.n	8007f84 <__libc_init_array+0x24>
 8007f70:	4d0b      	ldr	r5, [pc, #44]	; (8007fa0 <__libc_init_array+0x40>)
 8007f72:	4c0c      	ldr	r4, [pc, #48]	; (8007fa4 <__libc_init_array+0x44>)
 8007f74:	f000 fd7e 	bl	8008a74 <_init>
 8007f78:	1b64      	subs	r4, r4, r5
 8007f7a:	10a4      	asrs	r4, r4, #2
 8007f7c:	2600      	movs	r6, #0
 8007f7e:	42a6      	cmp	r6, r4
 8007f80:	d105      	bne.n	8007f8e <__libc_init_array+0x2e>
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f88:	4798      	blx	r3
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	e7ee      	b.n	8007f6c <__libc_init_array+0xc>
 8007f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f92:	4798      	blx	r3
 8007f94:	3601      	adds	r6, #1
 8007f96:	e7f2      	b.n	8007f7e <__libc_init_array+0x1e>
 8007f98:	08008ca4 	.word	0x08008ca4
 8007f9c:	08008ca4 	.word	0x08008ca4
 8007fa0:	08008ca4 	.word	0x08008ca4
 8007fa4:	08008cac 	.word	0x08008cac

08007fa8 <malloc>:
 8007fa8:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <malloc+0xc>)
 8007faa:	4601      	mov	r1, r0
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	f000 b8b7 	b.w	8008120 <_malloc_r>
 8007fb2:	bf00      	nop
 8007fb4:	2000000c 	.word	0x2000000c

08007fb8 <free>:
 8007fb8:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <free+0xc>)
 8007fba:	4601      	mov	r1, r0
 8007fbc:	6818      	ldr	r0, [r3, #0]
 8007fbe:	f000 b843 	b.w	8008048 <_free_r>
 8007fc2:	bf00      	nop
 8007fc4:	2000000c 	.word	0x2000000c

08007fc8 <memcmp>:
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	3901      	subs	r1, #1
 8007fcc:	4402      	add	r2, r0
 8007fce:	4290      	cmp	r0, r2
 8007fd0:	d101      	bne.n	8007fd6 <memcmp+0xe>
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	e005      	b.n	8007fe2 <memcmp+0x1a>
 8007fd6:	7803      	ldrb	r3, [r0, #0]
 8007fd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	d001      	beq.n	8007fe4 <memcmp+0x1c>
 8007fe0:	1b18      	subs	r0, r3, r4
 8007fe2:	bd10      	pop	{r4, pc}
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	e7f2      	b.n	8007fce <memcmp+0x6>

08007fe8 <memcpy>:
 8007fe8:	440a      	add	r2, r1
 8007fea:	4291      	cmp	r1, r2
 8007fec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ff0:	d100      	bne.n	8007ff4 <memcpy+0xc>
 8007ff2:	4770      	bx	lr
 8007ff4:	b510      	push	{r4, lr}
 8007ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ffa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ffe:	4291      	cmp	r1, r2
 8008000:	d1f9      	bne.n	8007ff6 <memcpy+0xe>
 8008002:	bd10      	pop	{r4, pc}

08008004 <memmove>:
 8008004:	4288      	cmp	r0, r1
 8008006:	b510      	push	{r4, lr}
 8008008:	eb01 0402 	add.w	r4, r1, r2
 800800c:	d902      	bls.n	8008014 <memmove+0x10>
 800800e:	4284      	cmp	r4, r0
 8008010:	4623      	mov	r3, r4
 8008012:	d807      	bhi.n	8008024 <memmove+0x20>
 8008014:	1e43      	subs	r3, r0, #1
 8008016:	42a1      	cmp	r1, r4
 8008018:	d008      	beq.n	800802c <memmove+0x28>
 800801a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800801e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008022:	e7f8      	b.n	8008016 <memmove+0x12>
 8008024:	4402      	add	r2, r0
 8008026:	4601      	mov	r1, r0
 8008028:	428a      	cmp	r2, r1
 800802a:	d100      	bne.n	800802e <memmove+0x2a>
 800802c:	bd10      	pop	{r4, pc}
 800802e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008036:	e7f7      	b.n	8008028 <memmove+0x24>

08008038 <memset>:
 8008038:	4402      	add	r2, r0
 800803a:	4603      	mov	r3, r0
 800803c:	4293      	cmp	r3, r2
 800803e:	d100      	bne.n	8008042 <memset+0xa>
 8008040:	4770      	bx	lr
 8008042:	f803 1b01 	strb.w	r1, [r3], #1
 8008046:	e7f9      	b.n	800803c <memset+0x4>

08008048 <_free_r>:
 8008048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800804a:	2900      	cmp	r1, #0
 800804c:	d044      	beq.n	80080d8 <_free_r+0x90>
 800804e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008052:	9001      	str	r0, [sp, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	f1a1 0404 	sub.w	r4, r1, #4
 800805a:	bfb8      	it	lt
 800805c:	18e4      	addlt	r4, r4, r3
 800805e:	f000 f9d3 	bl	8008408 <__malloc_lock>
 8008062:	4a1e      	ldr	r2, [pc, #120]	; (80080dc <_free_r+0x94>)
 8008064:	9801      	ldr	r0, [sp, #4]
 8008066:	6813      	ldr	r3, [r2, #0]
 8008068:	b933      	cbnz	r3, 8008078 <_free_r+0x30>
 800806a:	6063      	str	r3, [r4, #4]
 800806c:	6014      	str	r4, [r2, #0]
 800806e:	b003      	add	sp, #12
 8008070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008074:	f000 b9ce 	b.w	8008414 <__malloc_unlock>
 8008078:	42a3      	cmp	r3, r4
 800807a:	d908      	bls.n	800808e <_free_r+0x46>
 800807c:	6825      	ldr	r5, [r4, #0]
 800807e:	1961      	adds	r1, r4, r5
 8008080:	428b      	cmp	r3, r1
 8008082:	bf01      	itttt	eq
 8008084:	6819      	ldreq	r1, [r3, #0]
 8008086:	685b      	ldreq	r3, [r3, #4]
 8008088:	1949      	addeq	r1, r1, r5
 800808a:	6021      	streq	r1, [r4, #0]
 800808c:	e7ed      	b.n	800806a <_free_r+0x22>
 800808e:	461a      	mov	r2, r3
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	b10b      	cbz	r3, 8008098 <_free_r+0x50>
 8008094:	42a3      	cmp	r3, r4
 8008096:	d9fa      	bls.n	800808e <_free_r+0x46>
 8008098:	6811      	ldr	r1, [r2, #0]
 800809a:	1855      	adds	r5, r2, r1
 800809c:	42a5      	cmp	r5, r4
 800809e:	d10b      	bne.n	80080b8 <_free_r+0x70>
 80080a0:	6824      	ldr	r4, [r4, #0]
 80080a2:	4421      	add	r1, r4
 80080a4:	1854      	adds	r4, r2, r1
 80080a6:	42a3      	cmp	r3, r4
 80080a8:	6011      	str	r1, [r2, #0]
 80080aa:	d1e0      	bne.n	800806e <_free_r+0x26>
 80080ac:	681c      	ldr	r4, [r3, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	6053      	str	r3, [r2, #4]
 80080b2:	4421      	add	r1, r4
 80080b4:	6011      	str	r1, [r2, #0]
 80080b6:	e7da      	b.n	800806e <_free_r+0x26>
 80080b8:	d902      	bls.n	80080c0 <_free_r+0x78>
 80080ba:	230c      	movs	r3, #12
 80080bc:	6003      	str	r3, [r0, #0]
 80080be:	e7d6      	b.n	800806e <_free_r+0x26>
 80080c0:	6825      	ldr	r5, [r4, #0]
 80080c2:	1961      	adds	r1, r4, r5
 80080c4:	428b      	cmp	r3, r1
 80080c6:	bf04      	itt	eq
 80080c8:	6819      	ldreq	r1, [r3, #0]
 80080ca:	685b      	ldreq	r3, [r3, #4]
 80080cc:	6063      	str	r3, [r4, #4]
 80080ce:	bf04      	itt	eq
 80080d0:	1949      	addeq	r1, r1, r5
 80080d2:	6021      	streq	r1, [r4, #0]
 80080d4:	6054      	str	r4, [r2, #4]
 80080d6:	e7ca      	b.n	800806e <_free_r+0x26>
 80080d8:	b003      	add	sp, #12
 80080da:	bd30      	pop	{r4, r5, pc}
 80080dc:	200003c0 	.word	0x200003c0

080080e0 <sbrk_aligned>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	4e0e      	ldr	r6, [pc, #56]	; (800811c <sbrk_aligned+0x3c>)
 80080e4:	460c      	mov	r4, r1
 80080e6:	6831      	ldr	r1, [r6, #0]
 80080e8:	4605      	mov	r5, r0
 80080ea:	b911      	cbnz	r1, 80080f2 <sbrk_aligned+0x12>
 80080ec:	f000 f88c 	bl	8008208 <_sbrk_r>
 80080f0:	6030      	str	r0, [r6, #0]
 80080f2:	4621      	mov	r1, r4
 80080f4:	4628      	mov	r0, r5
 80080f6:	f000 f887 	bl	8008208 <_sbrk_r>
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	d00a      	beq.n	8008114 <sbrk_aligned+0x34>
 80080fe:	1cc4      	adds	r4, r0, #3
 8008100:	f024 0403 	bic.w	r4, r4, #3
 8008104:	42a0      	cmp	r0, r4
 8008106:	d007      	beq.n	8008118 <sbrk_aligned+0x38>
 8008108:	1a21      	subs	r1, r4, r0
 800810a:	4628      	mov	r0, r5
 800810c:	f000 f87c 	bl	8008208 <_sbrk_r>
 8008110:	3001      	adds	r0, #1
 8008112:	d101      	bne.n	8008118 <sbrk_aligned+0x38>
 8008114:	f04f 34ff 	mov.w	r4, #4294967295
 8008118:	4620      	mov	r0, r4
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	200003c4 	.word	0x200003c4

08008120 <_malloc_r>:
 8008120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008124:	1ccd      	adds	r5, r1, #3
 8008126:	f025 0503 	bic.w	r5, r5, #3
 800812a:	3508      	adds	r5, #8
 800812c:	2d0c      	cmp	r5, #12
 800812e:	bf38      	it	cc
 8008130:	250c      	movcc	r5, #12
 8008132:	2d00      	cmp	r5, #0
 8008134:	4607      	mov	r7, r0
 8008136:	db01      	blt.n	800813c <_malloc_r+0x1c>
 8008138:	42a9      	cmp	r1, r5
 800813a:	d905      	bls.n	8008148 <_malloc_r+0x28>
 800813c:	230c      	movs	r3, #12
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	2600      	movs	r6, #0
 8008142:	4630      	mov	r0, r6
 8008144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008148:	4e2e      	ldr	r6, [pc, #184]	; (8008204 <_malloc_r+0xe4>)
 800814a:	f000 f95d 	bl	8008408 <__malloc_lock>
 800814e:	6833      	ldr	r3, [r6, #0]
 8008150:	461c      	mov	r4, r3
 8008152:	bb34      	cbnz	r4, 80081a2 <_malloc_r+0x82>
 8008154:	4629      	mov	r1, r5
 8008156:	4638      	mov	r0, r7
 8008158:	f7ff ffc2 	bl	80080e0 <sbrk_aligned>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	4604      	mov	r4, r0
 8008160:	d14d      	bne.n	80081fe <_malloc_r+0xde>
 8008162:	6834      	ldr	r4, [r6, #0]
 8008164:	4626      	mov	r6, r4
 8008166:	2e00      	cmp	r6, #0
 8008168:	d140      	bne.n	80081ec <_malloc_r+0xcc>
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	4631      	mov	r1, r6
 800816e:	4638      	mov	r0, r7
 8008170:	eb04 0803 	add.w	r8, r4, r3
 8008174:	f000 f848 	bl	8008208 <_sbrk_r>
 8008178:	4580      	cmp	r8, r0
 800817a:	d13a      	bne.n	80081f2 <_malloc_r+0xd2>
 800817c:	6821      	ldr	r1, [r4, #0]
 800817e:	3503      	adds	r5, #3
 8008180:	1a6d      	subs	r5, r5, r1
 8008182:	f025 0503 	bic.w	r5, r5, #3
 8008186:	3508      	adds	r5, #8
 8008188:	2d0c      	cmp	r5, #12
 800818a:	bf38      	it	cc
 800818c:	250c      	movcc	r5, #12
 800818e:	4629      	mov	r1, r5
 8008190:	4638      	mov	r0, r7
 8008192:	f7ff ffa5 	bl	80080e0 <sbrk_aligned>
 8008196:	3001      	adds	r0, #1
 8008198:	d02b      	beq.n	80081f2 <_malloc_r+0xd2>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	442b      	add	r3, r5
 800819e:	6023      	str	r3, [r4, #0]
 80081a0:	e00e      	b.n	80081c0 <_malloc_r+0xa0>
 80081a2:	6822      	ldr	r2, [r4, #0]
 80081a4:	1b52      	subs	r2, r2, r5
 80081a6:	d41e      	bmi.n	80081e6 <_malloc_r+0xc6>
 80081a8:	2a0b      	cmp	r2, #11
 80081aa:	d916      	bls.n	80081da <_malloc_r+0xba>
 80081ac:	1961      	adds	r1, r4, r5
 80081ae:	42a3      	cmp	r3, r4
 80081b0:	6025      	str	r5, [r4, #0]
 80081b2:	bf18      	it	ne
 80081b4:	6059      	strne	r1, [r3, #4]
 80081b6:	6863      	ldr	r3, [r4, #4]
 80081b8:	bf08      	it	eq
 80081ba:	6031      	streq	r1, [r6, #0]
 80081bc:	5162      	str	r2, [r4, r5]
 80081be:	604b      	str	r3, [r1, #4]
 80081c0:	4638      	mov	r0, r7
 80081c2:	f104 060b 	add.w	r6, r4, #11
 80081c6:	f000 f925 	bl	8008414 <__malloc_unlock>
 80081ca:	f026 0607 	bic.w	r6, r6, #7
 80081ce:	1d23      	adds	r3, r4, #4
 80081d0:	1af2      	subs	r2, r6, r3
 80081d2:	d0b6      	beq.n	8008142 <_malloc_r+0x22>
 80081d4:	1b9b      	subs	r3, r3, r6
 80081d6:	50a3      	str	r3, [r4, r2]
 80081d8:	e7b3      	b.n	8008142 <_malloc_r+0x22>
 80081da:	6862      	ldr	r2, [r4, #4]
 80081dc:	42a3      	cmp	r3, r4
 80081de:	bf0c      	ite	eq
 80081e0:	6032      	streq	r2, [r6, #0]
 80081e2:	605a      	strne	r2, [r3, #4]
 80081e4:	e7ec      	b.n	80081c0 <_malloc_r+0xa0>
 80081e6:	4623      	mov	r3, r4
 80081e8:	6864      	ldr	r4, [r4, #4]
 80081ea:	e7b2      	b.n	8008152 <_malloc_r+0x32>
 80081ec:	4634      	mov	r4, r6
 80081ee:	6876      	ldr	r6, [r6, #4]
 80081f0:	e7b9      	b.n	8008166 <_malloc_r+0x46>
 80081f2:	230c      	movs	r3, #12
 80081f4:	603b      	str	r3, [r7, #0]
 80081f6:	4638      	mov	r0, r7
 80081f8:	f000 f90c 	bl	8008414 <__malloc_unlock>
 80081fc:	e7a1      	b.n	8008142 <_malloc_r+0x22>
 80081fe:	6025      	str	r5, [r4, #0]
 8008200:	e7de      	b.n	80081c0 <_malloc_r+0xa0>
 8008202:	bf00      	nop
 8008204:	200003c0 	.word	0x200003c0

08008208 <_sbrk_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4d06      	ldr	r5, [pc, #24]	; (8008224 <_sbrk_r+0x1c>)
 800820c:	2300      	movs	r3, #0
 800820e:	4604      	mov	r4, r0
 8008210:	4608      	mov	r0, r1
 8008212:	602b      	str	r3, [r5, #0]
 8008214:	f7f9 fe6e 	bl	8001ef4 <_sbrk>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d102      	bne.n	8008222 <_sbrk_r+0x1a>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	b103      	cbz	r3, 8008222 <_sbrk_r+0x1a>
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	200003c8 	.word	0x200003c8

08008228 <_raise_r>:
 8008228:	291f      	cmp	r1, #31
 800822a:	b538      	push	{r3, r4, r5, lr}
 800822c:	4604      	mov	r4, r0
 800822e:	460d      	mov	r5, r1
 8008230:	d904      	bls.n	800823c <_raise_r+0x14>
 8008232:	2316      	movs	r3, #22
 8008234:	6003      	str	r3, [r0, #0]
 8008236:	f04f 30ff 	mov.w	r0, #4294967295
 800823a:	bd38      	pop	{r3, r4, r5, pc}
 800823c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800823e:	b112      	cbz	r2, 8008246 <_raise_r+0x1e>
 8008240:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008244:	b94b      	cbnz	r3, 800825a <_raise_r+0x32>
 8008246:	4620      	mov	r0, r4
 8008248:	f000 f830 	bl	80082ac <_getpid_r>
 800824c:	462a      	mov	r2, r5
 800824e:	4601      	mov	r1, r0
 8008250:	4620      	mov	r0, r4
 8008252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008256:	f000 b817 	b.w	8008288 <_kill_r>
 800825a:	2b01      	cmp	r3, #1
 800825c:	d00a      	beq.n	8008274 <_raise_r+0x4c>
 800825e:	1c59      	adds	r1, r3, #1
 8008260:	d103      	bne.n	800826a <_raise_r+0x42>
 8008262:	2316      	movs	r3, #22
 8008264:	6003      	str	r3, [r0, #0]
 8008266:	2001      	movs	r0, #1
 8008268:	e7e7      	b.n	800823a <_raise_r+0x12>
 800826a:	2400      	movs	r4, #0
 800826c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008270:	4628      	mov	r0, r5
 8008272:	4798      	blx	r3
 8008274:	2000      	movs	r0, #0
 8008276:	e7e0      	b.n	800823a <_raise_r+0x12>

08008278 <raise>:
 8008278:	4b02      	ldr	r3, [pc, #8]	; (8008284 <raise+0xc>)
 800827a:	4601      	mov	r1, r0
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	f7ff bfd3 	b.w	8008228 <_raise_r>
 8008282:	bf00      	nop
 8008284:	2000000c 	.word	0x2000000c

08008288 <_kill_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d07      	ldr	r5, [pc, #28]	; (80082a8 <_kill_r+0x20>)
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	4611      	mov	r1, r2
 8008294:	602b      	str	r3, [r5, #0]
 8008296:	f7f9 fe13 	bl	8001ec0 <_kill>
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	d102      	bne.n	80082a4 <_kill_r+0x1c>
 800829e:	682b      	ldr	r3, [r5, #0]
 80082a0:	b103      	cbz	r3, 80082a4 <_kill_r+0x1c>
 80082a2:	6023      	str	r3, [r4, #0]
 80082a4:	bd38      	pop	{r3, r4, r5, pc}
 80082a6:	bf00      	nop
 80082a8:	200003c8 	.word	0x200003c8

080082ac <_getpid_r>:
 80082ac:	f7f9 be00 	b.w	8001eb0 <_getpid>

080082b0 <siprintf>:
 80082b0:	b40e      	push	{r1, r2, r3}
 80082b2:	b500      	push	{lr}
 80082b4:	b09c      	sub	sp, #112	; 0x70
 80082b6:	ab1d      	add	r3, sp, #116	; 0x74
 80082b8:	9002      	str	r0, [sp, #8]
 80082ba:	9006      	str	r0, [sp, #24]
 80082bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082c0:	4809      	ldr	r0, [pc, #36]	; (80082e8 <siprintf+0x38>)
 80082c2:	9107      	str	r1, [sp, #28]
 80082c4:	9104      	str	r1, [sp, #16]
 80082c6:	4909      	ldr	r1, [pc, #36]	; (80082ec <siprintf+0x3c>)
 80082c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80082cc:	9105      	str	r1, [sp, #20]
 80082ce:	6800      	ldr	r0, [r0, #0]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	a902      	add	r1, sp, #8
 80082d4:	f000 f900 	bl	80084d8 <_svfiprintf_r>
 80082d8:	9b02      	ldr	r3, [sp, #8]
 80082da:	2200      	movs	r2, #0
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	b01c      	add	sp, #112	; 0x70
 80082e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e4:	b003      	add	sp, #12
 80082e6:	4770      	bx	lr
 80082e8:	2000000c 	.word	0x2000000c
 80082ec:	ffff0208 	.word	0xffff0208

080082f0 <_strtol_l.constprop.0>:
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f6:	d001      	beq.n	80082fc <_strtol_l.constprop.0+0xc>
 80082f8:	2b24      	cmp	r3, #36	; 0x24
 80082fa:	d906      	bls.n	800830a <_strtol_l.constprop.0+0x1a>
 80082fc:	f7ff fe2a 	bl	8007f54 <__errno>
 8008300:	2316      	movs	r3, #22
 8008302:	6003      	str	r3, [r0, #0]
 8008304:	2000      	movs	r0, #0
 8008306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80083f0 <_strtol_l.constprop.0+0x100>
 800830e:	460d      	mov	r5, r1
 8008310:	462e      	mov	r6, r5
 8008312:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008316:	f814 700c 	ldrb.w	r7, [r4, ip]
 800831a:	f017 0708 	ands.w	r7, r7, #8
 800831e:	d1f7      	bne.n	8008310 <_strtol_l.constprop.0+0x20>
 8008320:	2c2d      	cmp	r4, #45	; 0x2d
 8008322:	d132      	bne.n	800838a <_strtol_l.constprop.0+0x9a>
 8008324:	782c      	ldrb	r4, [r5, #0]
 8008326:	2701      	movs	r7, #1
 8008328:	1cb5      	adds	r5, r6, #2
 800832a:	2b00      	cmp	r3, #0
 800832c:	d05b      	beq.n	80083e6 <_strtol_l.constprop.0+0xf6>
 800832e:	2b10      	cmp	r3, #16
 8008330:	d109      	bne.n	8008346 <_strtol_l.constprop.0+0x56>
 8008332:	2c30      	cmp	r4, #48	; 0x30
 8008334:	d107      	bne.n	8008346 <_strtol_l.constprop.0+0x56>
 8008336:	782c      	ldrb	r4, [r5, #0]
 8008338:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800833c:	2c58      	cmp	r4, #88	; 0x58
 800833e:	d14d      	bne.n	80083dc <_strtol_l.constprop.0+0xec>
 8008340:	786c      	ldrb	r4, [r5, #1]
 8008342:	2310      	movs	r3, #16
 8008344:	3502      	adds	r5, #2
 8008346:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800834a:	f108 38ff 	add.w	r8, r8, #4294967295
 800834e:	f04f 0c00 	mov.w	ip, #0
 8008352:	fbb8 f9f3 	udiv	r9, r8, r3
 8008356:	4666      	mov	r6, ip
 8008358:	fb03 8a19 	mls	sl, r3, r9, r8
 800835c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008360:	f1be 0f09 	cmp.w	lr, #9
 8008364:	d816      	bhi.n	8008394 <_strtol_l.constprop.0+0xa4>
 8008366:	4674      	mov	r4, lr
 8008368:	42a3      	cmp	r3, r4
 800836a:	dd24      	ble.n	80083b6 <_strtol_l.constprop.0+0xc6>
 800836c:	f1bc 0f00 	cmp.w	ip, #0
 8008370:	db1e      	blt.n	80083b0 <_strtol_l.constprop.0+0xc0>
 8008372:	45b1      	cmp	r9, r6
 8008374:	d31c      	bcc.n	80083b0 <_strtol_l.constprop.0+0xc0>
 8008376:	d101      	bne.n	800837c <_strtol_l.constprop.0+0x8c>
 8008378:	45a2      	cmp	sl, r4
 800837a:	db19      	blt.n	80083b0 <_strtol_l.constprop.0+0xc0>
 800837c:	fb06 4603 	mla	r6, r6, r3, r4
 8008380:	f04f 0c01 	mov.w	ip, #1
 8008384:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008388:	e7e8      	b.n	800835c <_strtol_l.constprop.0+0x6c>
 800838a:	2c2b      	cmp	r4, #43	; 0x2b
 800838c:	bf04      	itt	eq
 800838e:	782c      	ldrbeq	r4, [r5, #0]
 8008390:	1cb5      	addeq	r5, r6, #2
 8008392:	e7ca      	b.n	800832a <_strtol_l.constprop.0+0x3a>
 8008394:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008398:	f1be 0f19 	cmp.w	lr, #25
 800839c:	d801      	bhi.n	80083a2 <_strtol_l.constprop.0+0xb2>
 800839e:	3c37      	subs	r4, #55	; 0x37
 80083a0:	e7e2      	b.n	8008368 <_strtol_l.constprop.0+0x78>
 80083a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80083a6:	f1be 0f19 	cmp.w	lr, #25
 80083aa:	d804      	bhi.n	80083b6 <_strtol_l.constprop.0+0xc6>
 80083ac:	3c57      	subs	r4, #87	; 0x57
 80083ae:	e7db      	b.n	8008368 <_strtol_l.constprop.0+0x78>
 80083b0:	f04f 3cff 	mov.w	ip, #4294967295
 80083b4:	e7e6      	b.n	8008384 <_strtol_l.constprop.0+0x94>
 80083b6:	f1bc 0f00 	cmp.w	ip, #0
 80083ba:	da05      	bge.n	80083c8 <_strtol_l.constprop.0+0xd8>
 80083bc:	2322      	movs	r3, #34	; 0x22
 80083be:	6003      	str	r3, [r0, #0]
 80083c0:	4646      	mov	r6, r8
 80083c2:	b942      	cbnz	r2, 80083d6 <_strtol_l.constprop.0+0xe6>
 80083c4:	4630      	mov	r0, r6
 80083c6:	e79e      	b.n	8008306 <_strtol_l.constprop.0+0x16>
 80083c8:	b107      	cbz	r7, 80083cc <_strtol_l.constprop.0+0xdc>
 80083ca:	4276      	negs	r6, r6
 80083cc:	2a00      	cmp	r2, #0
 80083ce:	d0f9      	beq.n	80083c4 <_strtol_l.constprop.0+0xd4>
 80083d0:	f1bc 0f00 	cmp.w	ip, #0
 80083d4:	d000      	beq.n	80083d8 <_strtol_l.constprop.0+0xe8>
 80083d6:	1e69      	subs	r1, r5, #1
 80083d8:	6011      	str	r1, [r2, #0]
 80083da:	e7f3      	b.n	80083c4 <_strtol_l.constprop.0+0xd4>
 80083dc:	2430      	movs	r4, #48	; 0x30
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1b1      	bne.n	8008346 <_strtol_l.constprop.0+0x56>
 80083e2:	2308      	movs	r3, #8
 80083e4:	e7af      	b.n	8008346 <_strtol_l.constprop.0+0x56>
 80083e6:	2c30      	cmp	r4, #48	; 0x30
 80083e8:	d0a5      	beq.n	8008336 <_strtol_l.constprop.0+0x46>
 80083ea:	230a      	movs	r3, #10
 80083ec:	e7ab      	b.n	8008346 <_strtol_l.constprop.0+0x56>
 80083ee:	bf00      	nop
 80083f0:	08008b67 	.word	0x08008b67

080083f4 <strtol>:
 80083f4:	4613      	mov	r3, r2
 80083f6:	460a      	mov	r2, r1
 80083f8:	4601      	mov	r1, r0
 80083fa:	4802      	ldr	r0, [pc, #8]	; (8008404 <strtol+0x10>)
 80083fc:	6800      	ldr	r0, [r0, #0]
 80083fe:	f7ff bf77 	b.w	80082f0 <_strtol_l.constprop.0>
 8008402:	bf00      	nop
 8008404:	2000000c 	.word	0x2000000c

08008408 <__malloc_lock>:
 8008408:	4801      	ldr	r0, [pc, #4]	; (8008410 <__malloc_lock+0x8>)
 800840a:	f000 baf9 	b.w	8008a00 <__retarget_lock_acquire_recursive>
 800840e:	bf00      	nop
 8008410:	200003cc 	.word	0x200003cc

08008414 <__malloc_unlock>:
 8008414:	4801      	ldr	r0, [pc, #4]	; (800841c <__malloc_unlock+0x8>)
 8008416:	f000 baf4 	b.w	8008a02 <__retarget_lock_release_recursive>
 800841a:	bf00      	nop
 800841c:	200003cc 	.word	0x200003cc

08008420 <__ssputs_r>:
 8008420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008424:	688e      	ldr	r6, [r1, #8]
 8008426:	429e      	cmp	r6, r3
 8008428:	4682      	mov	sl, r0
 800842a:	460c      	mov	r4, r1
 800842c:	4690      	mov	r8, r2
 800842e:	461f      	mov	r7, r3
 8008430:	d838      	bhi.n	80084a4 <__ssputs_r+0x84>
 8008432:	898a      	ldrh	r2, [r1, #12]
 8008434:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008438:	d032      	beq.n	80084a0 <__ssputs_r+0x80>
 800843a:	6825      	ldr	r5, [r4, #0]
 800843c:	6909      	ldr	r1, [r1, #16]
 800843e:	eba5 0901 	sub.w	r9, r5, r1
 8008442:	6965      	ldr	r5, [r4, #20]
 8008444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008448:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800844c:	3301      	adds	r3, #1
 800844e:	444b      	add	r3, r9
 8008450:	106d      	asrs	r5, r5, #1
 8008452:	429d      	cmp	r5, r3
 8008454:	bf38      	it	cc
 8008456:	461d      	movcc	r5, r3
 8008458:	0553      	lsls	r3, r2, #21
 800845a:	d531      	bpl.n	80084c0 <__ssputs_r+0xa0>
 800845c:	4629      	mov	r1, r5
 800845e:	f7ff fe5f 	bl	8008120 <_malloc_r>
 8008462:	4606      	mov	r6, r0
 8008464:	b950      	cbnz	r0, 800847c <__ssputs_r+0x5c>
 8008466:	230c      	movs	r3, #12
 8008468:	f8ca 3000 	str.w	r3, [sl]
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008472:	81a3      	strh	r3, [r4, #12]
 8008474:	f04f 30ff 	mov.w	r0, #4294967295
 8008478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847c:	6921      	ldr	r1, [r4, #16]
 800847e:	464a      	mov	r2, r9
 8008480:	f7ff fdb2 	bl	8007fe8 <memcpy>
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800848a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848e:	81a3      	strh	r3, [r4, #12]
 8008490:	6126      	str	r6, [r4, #16]
 8008492:	6165      	str	r5, [r4, #20]
 8008494:	444e      	add	r6, r9
 8008496:	eba5 0509 	sub.w	r5, r5, r9
 800849a:	6026      	str	r6, [r4, #0]
 800849c:	60a5      	str	r5, [r4, #8]
 800849e:	463e      	mov	r6, r7
 80084a0:	42be      	cmp	r6, r7
 80084a2:	d900      	bls.n	80084a6 <__ssputs_r+0x86>
 80084a4:	463e      	mov	r6, r7
 80084a6:	6820      	ldr	r0, [r4, #0]
 80084a8:	4632      	mov	r2, r6
 80084aa:	4641      	mov	r1, r8
 80084ac:	f7ff fdaa 	bl	8008004 <memmove>
 80084b0:	68a3      	ldr	r3, [r4, #8]
 80084b2:	1b9b      	subs	r3, r3, r6
 80084b4:	60a3      	str	r3, [r4, #8]
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	4433      	add	r3, r6
 80084ba:	6023      	str	r3, [r4, #0]
 80084bc:	2000      	movs	r0, #0
 80084be:	e7db      	b.n	8008478 <__ssputs_r+0x58>
 80084c0:	462a      	mov	r2, r5
 80084c2:	f000 fa9f 	bl	8008a04 <_realloc_r>
 80084c6:	4606      	mov	r6, r0
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d1e1      	bne.n	8008490 <__ssputs_r+0x70>
 80084cc:	6921      	ldr	r1, [r4, #16]
 80084ce:	4650      	mov	r0, sl
 80084d0:	f7ff fdba 	bl	8008048 <_free_r>
 80084d4:	e7c7      	b.n	8008466 <__ssputs_r+0x46>
	...

080084d8 <_svfiprintf_r>:
 80084d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084dc:	4698      	mov	r8, r3
 80084de:	898b      	ldrh	r3, [r1, #12]
 80084e0:	061b      	lsls	r3, r3, #24
 80084e2:	b09d      	sub	sp, #116	; 0x74
 80084e4:	4607      	mov	r7, r0
 80084e6:	460d      	mov	r5, r1
 80084e8:	4614      	mov	r4, r2
 80084ea:	d50e      	bpl.n	800850a <_svfiprintf_r+0x32>
 80084ec:	690b      	ldr	r3, [r1, #16]
 80084ee:	b963      	cbnz	r3, 800850a <_svfiprintf_r+0x32>
 80084f0:	2140      	movs	r1, #64	; 0x40
 80084f2:	f7ff fe15 	bl	8008120 <_malloc_r>
 80084f6:	6028      	str	r0, [r5, #0]
 80084f8:	6128      	str	r0, [r5, #16]
 80084fa:	b920      	cbnz	r0, 8008506 <_svfiprintf_r+0x2e>
 80084fc:	230c      	movs	r3, #12
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	f04f 30ff 	mov.w	r0, #4294967295
 8008504:	e0d1      	b.n	80086aa <_svfiprintf_r+0x1d2>
 8008506:	2340      	movs	r3, #64	; 0x40
 8008508:	616b      	str	r3, [r5, #20]
 800850a:	2300      	movs	r3, #0
 800850c:	9309      	str	r3, [sp, #36]	; 0x24
 800850e:	2320      	movs	r3, #32
 8008510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008514:	f8cd 800c 	str.w	r8, [sp, #12]
 8008518:	2330      	movs	r3, #48	; 0x30
 800851a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086c4 <_svfiprintf_r+0x1ec>
 800851e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008522:	f04f 0901 	mov.w	r9, #1
 8008526:	4623      	mov	r3, r4
 8008528:	469a      	mov	sl, r3
 800852a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800852e:	b10a      	cbz	r2, 8008534 <_svfiprintf_r+0x5c>
 8008530:	2a25      	cmp	r2, #37	; 0x25
 8008532:	d1f9      	bne.n	8008528 <_svfiprintf_r+0x50>
 8008534:	ebba 0b04 	subs.w	fp, sl, r4
 8008538:	d00b      	beq.n	8008552 <_svfiprintf_r+0x7a>
 800853a:	465b      	mov	r3, fp
 800853c:	4622      	mov	r2, r4
 800853e:	4629      	mov	r1, r5
 8008540:	4638      	mov	r0, r7
 8008542:	f7ff ff6d 	bl	8008420 <__ssputs_r>
 8008546:	3001      	adds	r0, #1
 8008548:	f000 80aa 	beq.w	80086a0 <_svfiprintf_r+0x1c8>
 800854c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800854e:	445a      	add	r2, fp
 8008550:	9209      	str	r2, [sp, #36]	; 0x24
 8008552:	f89a 3000 	ldrb.w	r3, [sl]
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 80a2 	beq.w	80086a0 <_svfiprintf_r+0x1c8>
 800855c:	2300      	movs	r3, #0
 800855e:	f04f 32ff 	mov.w	r2, #4294967295
 8008562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008566:	f10a 0a01 	add.w	sl, sl, #1
 800856a:	9304      	str	r3, [sp, #16]
 800856c:	9307      	str	r3, [sp, #28]
 800856e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008572:	931a      	str	r3, [sp, #104]	; 0x68
 8008574:	4654      	mov	r4, sl
 8008576:	2205      	movs	r2, #5
 8008578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857c:	4851      	ldr	r0, [pc, #324]	; (80086c4 <_svfiprintf_r+0x1ec>)
 800857e:	f7f7 fe2f 	bl	80001e0 <memchr>
 8008582:	9a04      	ldr	r2, [sp, #16]
 8008584:	b9d8      	cbnz	r0, 80085be <_svfiprintf_r+0xe6>
 8008586:	06d0      	lsls	r0, r2, #27
 8008588:	bf44      	itt	mi
 800858a:	2320      	movmi	r3, #32
 800858c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008590:	0711      	lsls	r1, r2, #28
 8008592:	bf44      	itt	mi
 8008594:	232b      	movmi	r3, #43	; 0x2b
 8008596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800859a:	f89a 3000 	ldrb.w	r3, [sl]
 800859e:	2b2a      	cmp	r3, #42	; 0x2a
 80085a0:	d015      	beq.n	80085ce <_svfiprintf_r+0xf6>
 80085a2:	9a07      	ldr	r2, [sp, #28]
 80085a4:	4654      	mov	r4, sl
 80085a6:	2000      	movs	r0, #0
 80085a8:	f04f 0c0a 	mov.w	ip, #10
 80085ac:	4621      	mov	r1, r4
 80085ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085b2:	3b30      	subs	r3, #48	; 0x30
 80085b4:	2b09      	cmp	r3, #9
 80085b6:	d94e      	bls.n	8008656 <_svfiprintf_r+0x17e>
 80085b8:	b1b0      	cbz	r0, 80085e8 <_svfiprintf_r+0x110>
 80085ba:	9207      	str	r2, [sp, #28]
 80085bc:	e014      	b.n	80085e8 <_svfiprintf_r+0x110>
 80085be:	eba0 0308 	sub.w	r3, r0, r8
 80085c2:	fa09 f303 	lsl.w	r3, r9, r3
 80085c6:	4313      	orrs	r3, r2
 80085c8:	9304      	str	r3, [sp, #16]
 80085ca:	46a2      	mov	sl, r4
 80085cc:	e7d2      	b.n	8008574 <_svfiprintf_r+0x9c>
 80085ce:	9b03      	ldr	r3, [sp, #12]
 80085d0:	1d19      	adds	r1, r3, #4
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	9103      	str	r1, [sp, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	bfbb      	ittet	lt
 80085da:	425b      	neglt	r3, r3
 80085dc:	f042 0202 	orrlt.w	r2, r2, #2
 80085e0:	9307      	strge	r3, [sp, #28]
 80085e2:	9307      	strlt	r3, [sp, #28]
 80085e4:	bfb8      	it	lt
 80085e6:	9204      	strlt	r2, [sp, #16]
 80085e8:	7823      	ldrb	r3, [r4, #0]
 80085ea:	2b2e      	cmp	r3, #46	; 0x2e
 80085ec:	d10c      	bne.n	8008608 <_svfiprintf_r+0x130>
 80085ee:	7863      	ldrb	r3, [r4, #1]
 80085f0:	2b2a      	cmp	r3, #42	; 0x2a
 80085f2:	d135      	bne.n	8008660 <_svfiprintf_r+0x188>
 80085f4:	9b03      	ldr	r3, [sp, #12]
 80085f6:	1d1a      	adds	r2, r3, #4
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	9203      	str	r2, [sp, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	bfb8      	it	lt
 8008600:	f04f 33ff 	movlt.w	r3, #4294967295
 8008604:	3402      	adds	r4, #2
 8008606:	9305      	str	r3, [sp, #20]
 8008608:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086d4 <_svfiprintf_r+0x1fc>
 800860c:	7821      	ldrb	r1, [r4, #0]
 800860e:	2203      	movs	r2, #3
 8008610:	4650      	mov	r0, sl
 8008612:	f7f7 fde5 	bl	80001e0 <memchr>
 8008616:	b140      	cbz	r0, 800862a <_svfiprintf_r+0x152>
 8008618:	2340      	movs	r3, #64	; 0x40
 800861a:	eba0 000a 	sub.w	r0, r0, sl
 800861e:	fa03 f000 	lsl.w	r0, r3, r0
 8008622:	9b04      	ldr	r3, [sp, #16]
 8008624:	4303      	orrs	r3, r0
 8008626:	3401      	adds	r4, #1
 8008628:	9304      	str	r3, [sp, #16]
 800862a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862e:	4826      	ldr	r0, [pc, #152]	; (80086c8 <_svfiprintf_r+0x1f0>)
 8008630:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008634:	2206      	movs	r2, #6
 8008636:	f7f7 fdd3 	bl	80001e0 <memchr>
 800863a:	2800      	cmp	r0, #0
 800863c:	d038      	beq.n	80086b0 <_svfiprintf_r+0x1d8>
 800863e:	4b23      	ldr	r3, [pc, #140]	; (80086cc <_svfiprintf_r+0x1f4>)
 8008640:	bb1b      	cbnz	r3, 800868a <_svfiprintf_r+0x1b2>
 8008642:	9b03      	ldr	r3, [sp, #12]
 8008644:	3307      	adds	r3, #7
 8008646:	f023 0307 	bic.w	r3, r3, #7
 800864a:	3308      	adds	r3, #8
 800864c:	9303      	str	r3, [sp, #12]
 800864e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008650:	4433      	add	r3, r6
 8008652:	9309      	str	r3, [sp, #36]	; 0x24
 8008654:	e767      	b.n	8008526 <_svfiprintf_r+0x4e>
 8008656:	fb0c 3202 	mla	r2, ip, r2, r3
 800865a:	460c      	mov	r4, r1
 800865c:	2001      	movs	r0, #1
 800865e:	e7a5      	b.n	80085ac <_svfiprintf_r+0xd4>
 8008660:	2300      	movs	r3, #0
 8008662:	3401      	adds	r4, #1
 8008664:	9305      	str	r3, [sp, #20]
 8008666:	4619      	mov	r1, r3
 8008668:	f04f 0c0a 	mov.w	ip, #10
 800866c:	4620      	mov	r0, r4
 800866e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008672:	3a30      	subs	r2, #48	; 0x30
 8008674:	2a09      	cmp	r2, #9
 8008676:	d903      	bls.n	8008680 <_svfiprintf_r+0x1a8>
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0c5      	beq.n	8008608 <_svfiprintf_r+0x130>
 800867c:	9105      	str	r1, [sp, #20]
 800867e:	e7c3      	b.n	8008608 <_svfiprintf_r+0x130>
 8008680:	fb0c 2101 	mla	r1, ip, r1, r2
 8008684:	4604      	mov	r4, r0
 8008686:	2301      	movs	r3, #1
 8008688:	e7f0      	b.n	800866c <_svfiprintf_r+0x194>
 800868a:	ab03      	add	r3, sp, #12
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	462a      	mov	r2, r5
 8008690:	4b0f      	ldr	r3, [pc, #60]	; (80086d0 <_svfiprintf_r+0x1f8>)
 8008692:	a904      	add	r1, sp, #16
 8008694:	4638      	mov	r0, r7
 8008696:	f3af 8000 	nop.w
 800869a:	1c42      	adds	r2, r0, #1
 800869c:	4606      	mov	r6, r0
 800869e:	d1d6      	bne.n	800864e <_svfiprintf_r+0x176>
 80086a0:	89ab      	ldrh	r3, [r5, #12]
 80086a2:	065b      	lsls	r3, r3, #25
 80086a4:	f53f af2c 	bmi.w	8008500 <_svfiprintf_r+0x28>
 80086a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086aa:	b01d      	add	sp, #116	; 0x74
 80086ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b0:	ab03      	add	r3, sp, #12
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	462a      	mov	r2, r5
 80086b6:	4b06      	ldr	r3, [pc, #24]	; (80086d0 <_svfiprintf_r+0x1f8>)
 80086b8:	a904      	add	r1, sp, #16
 80086ba:	4638      	mov	r0, r7
 80086bc:	f000 f87a 	bl	80087b4 <_printf_i>
 80086c0:	e7eb      	b.n	800869a <_svfiprintf_r+0x1c2>
 80086c2:	bf00      	nop
 80086c4:	08008c67 	.word	0x08008c67
 80086c8:	08008c71 	.word	0x08008c71
 80086cc:	00000000 	.word	0x00000000
 80086d0:	08008421 	.word	0x08008421
 80086d4:	08008c6d 	.word	0x08008c6d

080086d8 <_printf_common>:
 80086d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086dc:	4616      	mov	r6, r2
 80086de:	4699      	mov	r9, r3
 80086e0:	688a      	ldr	r2, [r1, #8]
 80086e2:	690b      	ldr	r3, [r1, #16]
 80086e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086e8:	4293      	cmp	r3, r2
 80086ea:	bfb8      	it	lt
 80086ec:	4613      	movlt	r3, r2
 80086ee:	6033      	str	r3, [r6, #0]
 80086f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086f4:	4607      	mov	r7, r0
 80086f6:	460c      	mov	r4, r1
 80086f8:	b10a      	cbz	r2, 80086fe <_printf_common+0x26>
 80086fa:	3301      	adds	r3, #1
 80086fc:	6033      	str	r3, [r6, #0]
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	0699      	lsls	r1, r3, #26
 8008702:	bf42      	ittt	mi
 8008704:	6833      	ldrmi	r3, [r6, #0]
 8008706:	3302      	addmi	r3, #2
 8008708:	6033      	strmi	r3, [r6, #0]
 800870a:	6825      	ldr	r5, [r4, #0]
 800870c:	f015 0506 	ands.w	r5, r5, #6
 8008710:	d106      	bne.n	8008720 <_printf_common+0x48>
 8008712:	f104 0a19 	add.w	sl, r4, #25
 8008716:	68e3      	ldr	r3, [r4, #12]
 8008718:	6832      	ldr	r2, [r6, #0]
 800871a:	1a9b      	subs	r3, r3, r2
 800871c:	42ab      	cmp	r3, r5
 800871e:	dc26      	bgt.n	800876e <_printf_common+0x96>
 8008720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008724:	1e13      	subs	r3, r2, #0
 8008726:	6822      	ldr	r2, [r4, #0]
 8008728:	bf18      	it	ne
 800872a:	2301      	movne	r3, #1
 800872c:	0692      	lsls	r2, r2, #26
 800872e:	d42b      	bmi.n	8008788 <_printf_common+0xb0>
 8008730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008734:	4649      	mov	r1, r9
 8008736:	4638      	mov	r0, r7
 8008738:	47c0      	blx	r8
 800873a:	3001      	adds	r0, #1
 800873c:	d01e      	beq.n	800877c <_printf_common+0xa4>
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	68e5      	ldr	r5, [r4, #12]
 8008742:	6832      	ldr	r2, [r6, #0]
 8008744:	f003 0306 	and.w	r3, r3, #6
 8008748:	2b04      	cmp	r3, #4
 800874a:	bf08      	it	eq
 800874c:	1aad      	subeq	r5, r5, r2
 800874e:	68a3      	ldr	r3, [r4, #8]
 8008750:	6922      	ldr	r2, [r4, #16]
 8008752:	bf0c      	ite	eq
 8008754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008758:	2500      	movne	r5, #0
 800875a:	4293      	cmp	r3, r2
 800875c:	bfc4      	itt	gt
 800875e:	1a9b      	subgt	r3, r3, r2
 8008760:	18ed      	addgt	r5, r5, r3
 8008762:	2600      	movs	r6, #0
 8008764:	341a      	adds	r4, #26
 8008766:	42b5      	cmp	r5, r6
 8008768:	d11a      	bne.n	80087a0 <_printf_common+0xc8>
 800876a:	2000      	movs	r0, #0
 800876c:	e008      	b.n	8008780 <_printf_common+0xa8>
 800876e:	2301      	movs	r3, #1
 8008770:	4652      	mov	r2, sl
 8008772:	4649      	mov	r1, r9
 8008774:	4638      	mov	r0, r7
 8008776:	47c0      	blx	r8
 8008778:	3001      	adds	r0, #1
 800877a:	d103      	bne.n	8008784 <_printf_common+0xac>
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008784:	3501      	adds	r5, #1
 8008786:	e7c6      	b.n	8008716 <_printf_common+0x3e>
 8008788:	18e1      	adds	r1, r4, r3
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	2030      	movs	r0, #48	; 0x30
 800878e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008792:	4422      	add	r2, r4
 8008794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008798:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800879c:	3302      	adds	r3, #2
 800879e:	e7c7      	b.n	8008730 <_printf_common+0x58>
 80087a0:	2301      	movs	r3, #1
 80087a2:	4622      	mov	r2, r4
 80087a4:	4649      	mov	r1, r9
 80087a6:	4638      	mov	r0, r7
 80087a8:	47c0      	blx	r8
 80087aa:	3001      	adds	r0, #1
 80087ac:	d0e6      	beq.n	800877c <_printf_common+0xa4>
 80087ae:	3601      	adds	r6, #1
 80087b0:	e7d9      	b.n	8008766 <_printf_common+0x8e>
	...

080087b4 <_printf_i>:
 80087b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087b8:	7e0f      	ldrb	r7, [r1, #24]
 80087ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087bc:	2f78      	cmp	r7, #120	; 0x78
 80087be:	4691      	mov	r9, r2
 80087c0:	4680      	mov	r8, r0
 80087c2:	460c      	mov	r4, r1
 80087c4:	469a      	mov	sl, r3
 80087c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087ca:	d807      	bhi.n	80087dc <_printf_i+0x28>
 80087cc:	2f62      	cmp	r7, #98	; 0x62
 80087ce:	d80a      	bhi.n	80087e6 <_printf_i+0x32>
 80087d0:	2f00      	cmp	r7, #0
 80087d2:	f000 80d8 	beq.w	8008986 <_printf_i+0x1d2>
 80087d6:	2f58      	cmp	r7, #88	; 0x58
 80087d8:	f000 80a3 	beq.w	8008922 <_printf_i+0x16e>
 80087dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087e4:	e03a      	b.n	800885c <_printf_i+0xa8>
 80087e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087ea:	2b15      	cmp	r3, #21
 80087ec:	d8f6      	bhi.n	80087dc <_printf_i+0x28>
 80087ee:	a101      	add	r1, pc, #4	; (adr r1, 80087f4 <_printf_i+0x40>)
 80087f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087f4:	0800884d 	.word	0x0800884d
 80087f8:	08008861 	.word	0x08008861
 80087fc:	080087dd 	.word	0x080087dd
 8008800:	080087dd 	.word	0x080087dd
 8008804:	080087dd 	.word	0x080087dd
 8008808:	080087dd 	.word	0x080087dd
 800880c:	08008861 	.word	0x08008861
 8008810:	080087dd 	.word	0x080087dd
 8008814:	080087dd 	.word	0x080087dd
 8008818:	080087dd 	.word	0x080087dd
 800881c:	080087dd 	.word	0x080087dd
 8008820:	0800896d 	.word	0x0800896d
 8008824:	08008891 	.word	0x08008891
 8008828:	0800894f 	.word	0x0800894f
 800882c:	080087dd 	.word	0x080087dd
 8008830:	080087dd 	.word	0x080087dd
 8008834:	0800898f 	.word	0x0800898f
 8008838:	080087dd 	.word	0x080087dd
 800883c:	08008891 	.word	0x08008891
 8008840:	080087dd 	.word	0x080087dd
 8008844:	080087dd 	.word	0x080087dd
 8008848:	08008957 	.word	0x08008957
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	1d1a      	adds	r2, r3, #4
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	602a      	str	r2, [r5, #0]
 8008854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800885c:	2301      	movs	r3, #1
 800885e:	e0a3      	b.n	80089a8 <_printf_i+0x1f4>
 8008860:	6820      	ldr	r0, [r4, #0]
 8008862:	6829      	ldr	r1, [r5, #0]
 8008864:	0606      	lsls	r6, r0, #24
 8008866:	f101 0304 	add.w	r3, r1, #4
 800886a:	d50a      	bpl.n	8008882 <_printf_i+0xce>
 800886c:	680e      	ldr	r6, [r1, #0]
 800886e:	602b      	str	r3, [r5, #0]
 8008870:	2e00      	cmp	r6, #0
 8008872:	da03      	bge.n	800887c <_printf_i+0xc8>
 8008874:	232d      	movs	r3, #45	; 0x2d
 8008876:	4276      	negs	r6, r6
 8008878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800887c:	485e      	ldr	r0, [pc, #376]	; (80089f8 <_printf_i+0x244>)
 800887e:	230a      	movs	r3, #10
 8008880:	e019      	b.n	80088b6 <_printf_i+0x102>
 8008882:	680e      	ldr	r6, [r1, #0]
 8008884:	602b      	str	r3, [r5, #0]
 8008886:	f010 0f40 	tst.w	r0, #64	; 0x40
 800888a:	bf18      	it	ne
 800888c:	b236      	sxthne	r6, r6
 800888e:	e7ef      	b.n	8008870 <_printf_i+0xbc>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	6820      	ldr	r0, [r4, #0]
 8008894:	1d19      	adds	r1, r3, #4
 8008896:	6029      	str	r1, [r5, #0]
 8008898:	0601      	lsls	r1, r0, #24
 800889a:	d501      	bpl.n	80088a0 <_printf_i+0xec>
 800889c:	681e      	ldr	r6, [r3, #0]
 800889e:	e002      	b.n	80088a6 <_printf_i+0xf2>
 80088a0:	0646      	lsls	r6, r0, #25
 80088a2:	d5fb      	bpl.n	800889c <_printf_i+0xe8>
 80088a4:	881e      	ldrh	r6, [r3, #0]
 80088a6:	4854      	ldr	r0, [pc, #336]	; (80089f8 <_printf_i+0x244>)
 80088a8:	2f6f      	cmp	r7, #111	; 0x6f
 80088aa:	bf0c      	ite	eq
 80088ac:	2308      	moveq	r3, #8
 80088ae:	230a      	movne	r3, #10
 80088b0:	2100      	movs	r1, #0
 80088b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088b6:	6865      	ldr	r5, [r4, #4]
 80088b8:	60a5      	str	r5, [r4, #8]
 80088ba:	2d00      	cmp	r5, #0
 80088bc:	bfa2      	ittt	ge
 80088be:	6821      	ldrge	r1, [r4, #0]
 80088c0:	f021 0104 	bicge.w	r1, r1, #4
 80088c4:	6021      	strge	r1, [r4, #0]
 80088c6:	b90e      	cbnz	r6, 80088cc <_printf_i+0x118>
 80088c8:	2d00      	cmp	r5, #0
 80088ca:	d04d      	beq.n	8008968 <_printf_i+0x1b4>
 80088cc:	4615      	mov	r5, r2
 80088ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80088d2:	fb03 6711 	mls	r7, r3, r1, r6
 80088d6:	5dc7      	ldrb	r7, [r0, r7]
 80088d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088dc:	4637      	mov	r7, r6
 80088de:	42bb      	cmp	r3, r7
 80088e0:	460e      	mov	r6, r1
 80088e2:	d9f4      	bls.n	80088ce <_printf_i+0x11a>
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d10b      	bne.n	8008900 <_printf_i+0x14c>
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	07de      	lsls	r6, r3, #31
 80088ec:	d508      	bpl.n	8008900 <_printf_i+0x14c>
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	6861      	ldr	r1, [r4, #4]
 80088f2:	4299      	cmp	r1, r3
 80088f4:	bfde      	ittt	le
 80088f6:	2330      	movle	r3, #48	; 0x30
 80088f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008900:	1b52      	subs	r2, r2, r5
 8008902:	6122      	str	r2, [r4, #16]
 8008904:	f8cd a000 	str.w	sl, [sp]
 8008908:	464b      	mov	r3, r9
 800890a:	aa03      	add	r2, sp, #12
 800890c:	4621      	mov	r1, r4
 800890e:	4640      	mov	r0, r8
 8008910:	f7ff fee2 	bl	80086d8 <_printf_common>
 8008914:	3001      	adds	r0, #1
 8008916:	d14c      	bne.n	80089b2 <_printf_i+0x1fe>
 8008918:	f04f 30ff 	mov.w	r0, #4294967295
 800891c:	b004      	add	sp, #16
 800891e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008922:	4835      	ldr	r0, [pc, #212]	; (80089f8 <_printf_i+0x244>)
 8008924:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008928:	6829      	ldr	r1, [r5, #0]
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008930:	6029      	str	r1, [r5, #0]
 8008932:	061d      	lsls	r5, r3, #24
 8008934:	d514      	bpl.n	8008960 <_printf_i+0x1ac>
 8008936:	07df      	lsls	r7, r3, #31
 8008938:	bf44      	itt	mi
 800893a:	f043 0320 	orrmi.w	r3, r3, #32
 800893e:	6023      	strmi	r3, [r4, #0]
 8008940:	b91e      	cbnz	r6, 800894a <_printf_i+0x196>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	f023 0320 	bic.w	r3, r3, #32
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	2310      	movs	r3, #16
 800894c:	e7b0      	b.n	80088b0 <_printf_i+0xfc>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	f043 0320 	orr.w	r3, r3, #32
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	2378      	movs	r3, #120	; 0x78
 8008958:	4828      	ldr	r0, [pc, #160]	; (80089fc <_printf_i+0x248>)
 800895a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800895e:	e7e3      	b.n	8008928 <_printf_i+0x174>
 8008960:	0659      	lsls	r1, r3, #25
 8008962:	bf48      	it	mi
 8008964:	b2b6      	uxthmi	r6, r6
 8008966:	e7e6      	b.n	8008936 <_printf_i+0x182>
 8008968:	4615      	mov	r5, r2
 800896a:	e7bb      	b.n	80088e4 <_printf_i+0x130>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	6826      	ldr	r6, [r4, #0]
 8008970:	6961      	ldr	r1, [r4, #20]
 8008972:	1d18      	adds	r0, r3, #4
 8008974:	6028      	str	r0, [r5, #0]
 8008976:	0635      	lsls	r5, r6, #24
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	d501      	bpl.n	8008980 <_printf_i+0x1cc>
 800897c:	6019      	str	r1, [r3, #0]
 800897e:	e002      	b.n	8008986 <_printf_i+0x1d2>
 8008980:	0670      	lsls	r0, r6, #25
 8008982:	d5fb      	bpl.n	800897c <_printf_i+0x1c8>
 8008984:	8019      	strh	r1, [r3, #0]
 8008986:	2300      	movs	r3, #0
 8008988:	6123      	str	r3, [r4, #16]
 800898a:	4615      	mov	r5, r2
 800898c:	e7ba      	b.n	8008904 <_printf_i+0x150>
 800898e:	682b      	ldr	r3, [r5, #0]
 8008990:	1d1a      	adds	r2, r3, #4
 8008992:	602a      	str	r2, [r5, #0]
 8008994:	681d      	ldr	r5, [r3, #0]
 8008996:	6862      	ldr	r2, [r4, #4]
 8008998:	2100      	movs	r1, #0
 800899a:	4628      	mov	r0, r5
 800899c:	f7f7 fc20 	bl	80001e0 <memchr>
 80089a0:	b108      	cbz	r0, 80089a6 <_printf_i+0x1f2>
 80089a2:	1b40      	subs	r0, r0, r5
 80089a4:	6060      	str	r0, [r4, #4]
 80089a6:	6863      	ldr	r3, [r4, #4]
 80089a8:	6123      	str	r3, [r4, #16]
 80089aa:	2300      	movs	r3, #0
 80089ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089b0:	e7a8      	b.n	8008904 <_printf_i+0x150>
 80089b2:	6923      	ldr	r3, [r4, #16]
 80089b4:	462a      	mov	r2, r5
 80089b6:	4649      	mov	r1, r9
 80089b8:	4640      	mov	r0, r8
 80089ba:	47d0      	blx	sl
 80089bc:	3001      	adds	r0, #1
 80089be:	d0ab      	beq.n	8008918 <_printf_i+0x164>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	079b      	lsls	r3, r3, #30
 80089c4:	d413      	bmi.n	80089ee <_printf_i+0x23a>
 80089c6:	68e0      	ldr	r0, [r4, #12]
 80089c8:	9b03      	ldr	r3, [sp, #12]
 80089ca:	4298      	cmp	r0, r3
 80089cc:	bfb8      	it	lt
 80089ce:	4618      	movlt	r0, r3
 80089d0:	e7a4      	b.n	800891c <_printf_i+0x168>
 80089d2:	2301      	movs	r3, #1
 80089d4:	4632      	mov	r2, r6
 80089d6:	4649      	mov	r1, r9
 80089d8:	4640      	mov	r0, r8
 80089da:	47d0      	blx	sl
 80089dc:	3001      	adds	r0, #1
 80089de:	d09b      	beq.n	8008918 <_printf_i+0x164>
 80089e0:	3501      	adds	r5, #1
 80089e2:	68e3      	ldr	r3, [r4, #12]
 80089e4:	9903      	ldr	r1, [sp, #12]
 80089e6:	1a5b      	subs	r3, r3, r1
 80089e8:	42ab      	cmp	r3, r5
 80089ea:	dcf2      	bgt.n	80089d2 <_printf_i+0x21e>
 80089ec:	e7eb      	b.n	80089c6 <_printf_i+0x212>
 80089ee:	2500      	movs	r5, #0
 80089f0:	f104 0619 	add.w	r6, r4, #25
 80089f4:	e7f5      	b.n	80089e2 <_printf_i+0x22e>
 80089f6:	bf00      	nop
 80089f8:	08008c78 	.word	0x08008c78
 80089fc:	08008c89 	.word	0x08008c89

08008a00 <__retarget_lock_acquire_recursive>:
 8008a00:	4770      	bx	lr

08008a02 <__retarget_lock_release_recursive>:
 8008a02:	4770      	bx	lr

08008a04 <_realloc_r>:
 8008a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a08:	4680      	mov	r8, r0
 8008a0a:	4614      	mov	r4, r2
 8008a0c:	460e      	mov	r6, r1
 8008a0e:	b921      	cbnz	r1, 8008a1a <_realloc_r+0x16>
 8008a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a14:	4611      	mov	r1, r2
 8008a16:	f7ff bb83 	b.w	8008120 <_malloc_r>
 8008a1a:	b92a      	cbnz	r2, 8008a28 <_realloc_r+0x24>
 8008a1c:	f7ff fb14 	bl	8008048 <_free_r>
 8008a20:	4625      	mov	r5, r4
 8008a22:	4628      	mov	r0, r5
 8008a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a28:	f000 f81b 	bl	8008a62 <_malloc_usable_size_r>
 8008a2c:	4284      	cmp	r4, r0
 8008a2e:	4607      	mov	r7, r0
 8008a30:	d802      	bhi.n	8008a38 <_realloc_r+0x34>
 8008a32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a36:	d812      	bhi.n	8008a5e <_realloc_r+0x5a>
 8008a38:	4621      	mov	r1, r4
 8008a3a:	4640      	mov	r0, r8
 8008a3c:	f7ff fb70 	bl	8008120 <_malloc_r>
 8008a40:	4605      	mov	r5, r0
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d0ed      	beq.n	8008a22 <_realloc_r+0x1e>
 8008a46:	42bc      	cmp	r4, r7
 8008a48:	4622      	mov	r2, r4
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	bf28      	it	cs
 8008a4e:	463a      	movcs	r2, r7
 8008a50:	f7ff faca 	bl	8007fe8 <memcpy>
 8008a54:	4631      	mov	r1, r6
 8008a56:	4640      	mov	r0, r8
 8008a58:	f7ff faf6 	bl	8008048 <_free_r>
 8008a5c:	e7e1      	b.n	8008a22 <_realloc_r+0x1e>
 8008a5e:	4635      	mov	r5, r6
 8008a60:	e7df      	b.n	8008a22 <_realloc_r+0x1e>

08008a62 <_malloc_usable_size_r>:
 8008a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a66:	1f18      	subs	r0, r3, #4
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	bfbc      	itt	lt
 8008a6c:	580b      	ldrlt	r3, [r1, r0]
 8008a6e:	18c0      	addlt	r0, r0, r3
 8008a70:	4770      	bx	lr
	...

08008a74 <_init>:
 8008a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a76:	bf00      	nop
 8008a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7a:	bc08      	pop	{r3}
 8008a7c:	469e      	mov	lr, r3
 8008a7e:	4770      	bx	lr

08008a80 <_fini>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	bf00      	nop
 8008a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a86:	bc08      	pop	{r3}
 8008a88:	469e      	mov	lr, r3
 8008a8a:	4770      	bx	lr
