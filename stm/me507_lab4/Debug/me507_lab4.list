
me507_lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08008684  08008684  00018684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008894  08008894  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008894  08008894  00018894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800889c  0800889c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800889c  0800889c  0001889c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a4  080088a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080088a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000070  08008918  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08008918  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1af  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000308b  00000000  00000000  0003c24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0003f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00040510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4d0  00000000  00000000  00041670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016715  00000000  00000000  0005db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abaeb  00000000  00000000  00074255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fd40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006758  00000000  00000000  0011fd90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800866c 	.word	0x0800866c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800866c 	.word	0x0800866c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_Z16getADCsimplifiedv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int getADCsimplified(){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <_Z16getADCsimplifiedv+0x28>)
 800059a:	f001 fdc3 	bl	8002124 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 800059e:	2101      	movs	r1, #1
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <_Z16getADCsimplifiedv+0x28>)
 80005a2:	f001 fe73 	bl	800228c <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	adcres = HAL_ADC_GetValue(&hadc1);
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <_Z16getADCsimplifiedv+0x28>)
 80005a8:	f002 f80b 	bl	80025c2 <HAL_ADC_GetValue>
 80005ac:	4603      	mov	r3, r0
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <_Z16getADCsimplifiedv+0x2c>)
 80005b2:	801a      	strh	r2, [r3, #0]
	return adcres;
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <_Z16getADCsimplifiedv+0x2c>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000008c 	.word	0x2000008c
 80005c0:	200003b2 	.word	0x200003b2

080005c4 <_ZSt3maxItERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	881a      	ldrh	r2, [r3, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d201      	bcs.n	80005de <_ZSt3maxItERKT_S2_S2_+0x1a>
	return __b;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	e000      	b.n	80005e0 <_ZSt3maxItERKT_S2_S2_+0x1c>
      return __a;
 80005de:	687b      	ldr	r3, [r7, #4]
    }
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <_Z26colorSensor_DetermineColorB5cxx11v>:
	HAL_I2C_Mem_Write(&hi2c2, 0x88, 0x01, I2C_MEMADD_SIZE_8BIT, &configData1,1,HAL_MAX_DELAY );
	HAL_I2C_Mem_Write(&hi2c2, 0x88, 0x02, I2C_MEMADD_SIZE_8BIT, &configData2,1,HAL_MAX_DELAY );
	HAL_I2C_Mem_Write(&hi2c2, 0x88, 0x03, I2C_MEMADD_SIZE_8BIT, &configData3,1,HAL_MAX_DELAY );
}

std::string colorSensor_DetermineColor(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af04      	add	r7, sp, #16
 80005f2:	6078      	str	r0, [r7, #4]

	    HAL_I2C_Mem_Read(&hi2c2, 0x88, 0x09, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&colorData, 8, HAL_MAX_DELAY);
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2308      	movs	r3, #8
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	4b4a      	ldr	r3, [pc, #296]	; (8000728 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	2209      	movs	r2, #9
 8000606:	2188      	movs	r1, #136	; 0x88
 8000608:	4848      	ldr	r0, [pc, #288]	; (800072c <_Z26colorSensor_DetermineColorB5cxx11v+0x140>)
 800060a:	f002 fecf 	bl	80033ac <HAL_I2C_Mem_Read>
		//stores byte data into int values used to determine color
		greenValue = (colorData[1] << 8) | colorData[0];
 800060e:	4b46      	ldr	r3, [pc, #280]	; (8000728 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 8000610:	785b      	ldrb	r3, [r3, #1]
 8000612:	021b      	lsls	r3, r3, #8
 8000614:	b21a      	sxth	r2, r3
 8000616:	4b44      	ldr	r3, [pc, #272]	; (8000728 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	b21b      	sxth	r3, r3
 800061c:	4313      	orrs	r3, r2
 800061e:	b21b      	sxth	r3, r3
 8000620:	b29a      	uxth	r2, r3
 8000622:	4b43      	ldr	r3, [pc, #268]	; (8000730 <_Z26colorSensor_DetermineColorB5cxx11v+0x144>)
 8000624:	801a      	strh	r2, [r3, #0]
		redValue = (colorData[3] << 8) | colorData[2];
 8000626:	4b40      	ldr	r3, [pc, #256]	; (8000728 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 8000628:	78db      	ldrb	r3, [r3, #3]
 800062a:	021b      	lsls	r3, r3, #8
 800062c:	b21a      	sxth	r2, r3
 800062e:	4b3e      	ldr	r3, [pc, #248]	; (8000728 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 8000630:	789b      	ldrb	r3, [r3, #2]
 8000632:	b21b      	sxth	r3, r3
 8000634:	4313      	orrs	r3, r2
 8000636:	b21b      	sxth	r3, r3
 8000638:	b29a      	uxth	r2, r3
 800063a:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <_Z26colorSensor_DetermineColorB5cxx11v+0x148>)
 800063c:	801a      	strh	r2, [r3, #0]
		blueValue = (colorData[5] << 8) | colorData[4];
 800063e:	4b3a      	ldr	r3, [pc, #232]	; (8000728 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 8000640:	795b      	ldrb	r3, [r3, #5]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	b21a      	sxth	r2, r3
 8000646:	4b38      	ldr	r3, [pc, #224]	; (8000728 <_Z26colorSensor_DetermineColorB5cxx11v+0x13c>)
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	b21b      	sxth	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b21b      	sxth	r3, r3
 8000650:	b29a      	uxth	r2, r3
 8000652:	4b39      	ldr	r3, [pc, #228]	; (8000738 <_Z26colorSensor_DetermineColorB5cxx11v+0x14c>)
 8000654:	801a      	strh	r2, [r3, #0]
			return "No dominant color";
			}

		*/
		//This algorithm was written by chat GPT to find the max int value.
		int maxValue = std::max(std::max(greenValue, redValue), blueValue);
 8000656:	4937      	ldr	r1, [pc, #220]	; (8000734 <_Z26colorSensor_DetermineColorB5cxx11v+0x148>)
 8000658:	4835      	ldr	r0, [pc, #212]	; (8000730 <_Z26colorSensor_DetermineColorB5cxx11v+0x144>)
 800065a:	f7ff ffb3 	bl	80005c4 <_ZSt3maxItERKT_S2_S2_>
 800065e:	4603      	mov	r3, r0
 8000660:	4935      	ldr	r1, [pc, #212]	; (8000738 <_Z26colorSensor_DetermineColorB5cxx11v+0x14c>)
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ffae 	bl	80005c4 <_ZSt3maxItERKT_S2_S2_>
 8000668:	4603      	mov	r3, r0
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	61fb      	str	r3, [r7, #28]

		if (maxValue == blueValue)
 800066e:	4b32      	ldr	r3, [pc, #200]	; (8000738 <_Z26colorSensor_DetermineColorB5cxx11v+0x14c>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	4293      	cmp	r3, r2
 8000678:	d111      	bne.n	800069e <_Z26colorSensor_DetermineColorB5cxx11v+0xb2>
			return "Blue";
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4618      	mov	r0, r3
 8000680:	f007 f99c 	bl	80079bc <_ZNSaIcEC1Ev>
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	461a      	mov	r2, r3
 800068a:	492c      	ldr	r1, [pc, #176]	; (800073c <_Z26colorSensor_DetermineColorB5cxx11v+0x150>)
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f007 fa1b 	bl	8007ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	4618      	mov	r0, r3
 8000698:	f007 f991 	bl	80079be <_ZNSaIcED1Ev>
			return "Red";
		else
			return "No dominant color";


}
 800069c:	e040      	b.n	8000720 <_Z26colorSensor_DetermineColorB5cxx11v+0x134>
		else if (maxValue == greenValue)
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <_Z26colorSensor_DetermineColorB5cxx11v+0x144>)
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d111      	bne.n	80006ce <_Z26colorSensor_DetermineColorB5cxx11v+0xe2>
			return "Green";
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 f984 	bl	80079bc <_ZNSaIcEC1Ev>
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	461a      	mov	r2, r3
 80006ba:	4921      	ldr	r1, [pc, #132]	; (8000740 <_Z26colorSensor_DetermineColorB5cxx11v+0x154>)
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f007 fa03 	bl	8007ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	4618      	mov	r0, r3
 80006c8:	f007 f979 	bl	80079be <_ZNSaIcED1Ev>
}
 80006cc:	e028      	b.n	8000720 <_Z26colorSensor_DetermineColorB5cxx11v+0x134>
		else if (maxValue == redValue)
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <_Z26colorSensor_DetermineColorB5cxx11v+0x148>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d111      	bne.n	80006fe <_Z26colorSensor_DetermineColorB5cxx11v+0x112>
			return "Red";
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f007 f96c 	bl	80079bc <_ZNSaIcEC1Ev>
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	461a      	mov	r2, r3
 80006ea:	4916      	ldr	r1, [pc, #88]	; (8000744 <_Z26colorSensor_DetermineColorB5cxx11v+0x158>)
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f007 f9eb 	bl	8007ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4618      	mov	r0, r3
 80006f8:	f007 f961 	bl	80079be <_ZNSaIcED1Ev>
}
 80006fc:	e010      	b.n	8000720 <_Z26colorSensor_DetermineColorB5cxx11v+0x134>
			return "No dominant color";
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	4618      	mov	r0, r3
 8000704:	f007 f95a 	bl	80079bc <_ZNSaIcEC1Ev>
 8000708:	f107 0318 	add.w	r3, r7, #24
 800070c:	461a      	mov	r2, r3
 800070e:	490e      	ldr	r1, [pc, #56]	; (8000748 <_Z26colorSensor_DetermineColorB5cxx11v+0x15c>)
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f007 f9d9 	bl	8007ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	4618      	mov	r0, r3
 800071c:	f007 f94f 	bl	80079be <_ZNSaIcED1Ev>
}
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200003ac 	.word	0x200003ac
 800072c:	200000d4 	.word	0x200000d4
 8000730:	200003a8 	.word	0x200003a8
 8000734:	200003a6 	.word	0x200003a6
 8000738:	200003aa 	.word	0x200003aa
 800073c:	08008684 	.word	0x08008684
 8000740:	0800868c 	.word	0x0800868c
 8000744:	08008694 	.word	0x08008694
 8000748:	08008698 	.word	0x08008698

0800074c <_Z15enableAllMotorsv>:

void enableAllMotors(){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	  driver1.enable_driver();
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <_Z15enableAllMotorsv+0x34>)
 8000752:	f000 ff3e 	bl	80015d2 <_ZN12motor_driver13enable_driverEv>
	  driver2.enable_driver();
 8000756:	480b      	ldr	r0, [pc, #44]	; (8000784 <_Z15enableAllMotorsv+0x38>)
 8000758:	f000 ff3b 	bl	80015d2 <_ZN12motor_driver13enable_driverEv>
	  driver3.enable_driver();
 800075c:	480a      	ldr	r0, [pc, #40]	; (8000788 <_Z15enableAllMotorsv+0x3c>)
 800075e:	f000 ff38 	bl	80015d2 <_ZN12motor_driver13enable_driverEv>
	  driver4.enable_driver();
 8000762:	480a      	ldr	r0, [pc, #40]	; (800078c <_Z15enableAllMotorsv+0x40>)
 8000764:	f000 ff35 	bl	80015d2 <_ZN12motor_driver13enable_driverEv>
	  driver5.enable_driver();
 8000768:	4809      	ldr	r0, [pc, #36]	; (8000790 <_Z15enableAllMotorsv+0x44>)
 800076a:	f000 ff32 	bl	80015d2 <_ZN12motor_driver13enable_driverEv>
	  servo1.enable_driver();
 800076e:	4809      	ldr	r0, [pc, #36]	; (8000794 <_Z15enableAllMotorsv+0x48>)
 8000770:	f001 f829 	bl	80017c6 <_ZN12servo_driver13enable_driverEv>
	  servo2.enable_driver();
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <_Z15enableAllMotorsv+0x4c>)
 8000776:	f001 f826 	bl	80017c6 <_ZN12servo_driver13enable_driverEv>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200002dc 	.word	0x200002dc
 8000784:	200002ec 	.word	0x200002ec
 8000788:	200002fc 	.word	0x200002fc
 800078c:	2000030c 	.word	0x2000030c
 8000790:	2000031c 	.word	0x2000031c
 8000794:	2000032c 	.word	0x2000032c
 8000798:	20000334 	.word	0x20000334

0800079c <_Z16disableAllMotorsv>:

void disableAllMotors(){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	  driver1.disable_driver();
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <_Z16disableAllMotorsv+0x34>)
 80007a2:	f000 ff2e 	bl	8001602 <_ZN12motor_driver14disable_driverEv>
	  driver2.disable_driver();
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <_Z16disableAllMotorsv+0x38>)
 80007a8:	f000 ff2b 	bl	8001602 <_ZN12motor_driver14disable_driverEv>
	  driver3.disable_driver();
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <_Z16disableAllMotorsv+0x3c>)
 80007ae:	f000 ff28 	bl	8001602 <_ZN12motor_driver14disable_driverEv>
	  driver4.disable_driver();
 80007b2:	480a      	ldr	r0, [pc, #40]	; (80007dc <_Z16disableAllMotorsv+0x40>)
 80007b4:	f000 ff25 	bl	8001602 <_ZN12motor_driver14disable_driverEv>
	  driver5.disable_driver();
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <_Z16disableAllMotorsv+0x44>)
 80007ba:	f000 ff22 	bl	8001602 <_ZN12motor_driver14disable_driverEv>
	  servo1.disable_driver();
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <_Z16disableAllMotorsv+0x48>)
 80007c0:	f001 f811 	bl	80017e6 <_ZN12servo_driver14disable_driverEv>
	  servo2.disable_driver();
 80007c4:	4808      	ldr	r0, [pc, #32]	; (80007e8 <_Z16disableAllMotorsv+0x4c>)
 80007c6:	f001 f80e 	bl	80017e6 <_ZN12servo_driver14disable_driverEv>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200002dc 	.word	0x200002dc
 80007d4:	200002ec 	.word	0x200002ec
 80007d8:	200002fc 	.word	0x200002fc
 80007dc:	2000030c 	.word	0x2000030c
 80007e0:	2000031c 	.word	0x2000031c
 80007e4:	2000032c 	.word	0x2000032c
 80007e8:	20000334 	.word	0x20000334

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f001 fbbd 	bl	8001f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f8c7 	bl	8000988 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 fcc3 	bl	8001184 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 80007fe:	f000 fa5d 	bl	8000cbc <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8000802:	f000 f9c3 	bl	8000b8c <_ZL12MX_TIM1_Initv>
  MX_USART1_UART_Init();
 8000806:	f000 fc8f 	bl	8001128 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 800080a:	f000 f92f 	bl	8000a6c <_ZL12MX_ADC1_Initv>
  MX_I2C2_Init();
 800080e:	f000 f989 	bl	8000b24 <_ZL12MX_I2C2_Initv>
  MX_TIM3_Init();
 8000812:	f000 fae1 	bl	8000dd8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000816:	f000 fb77 	bl	8000f08 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 800081a:	f000 fc0d 	bl	8001038 <_ZL12MX_TIM5_Initv>


    while (1)
    {
    	//start
    	if (state == 0){
 800081e:	4b50      	ldr	r3, [pc, #320]	; (8000960 <main+0x174>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0fb      	beq.n	800081e <main+0x32>
    		//interrupt will change the state to 1 to begin the program.

    	}

    	//state 1: listen to UART 1 and pick up balls
    	else if (state ==1){
 8000826:	4b4e      	ldr	r3, [pc, #312]	; (8000960 <main+0x174>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d10e      	bne.n	800084c <main+0x60>


    		//if there is no light, meaning robot is not on the field
    		//checks the light sensor so that when the robot is off the field, it will go to state 2.
    		//adcres = 500;
    		adcres = getADCsimplified();
 800082e:	f7ff feb1 	bl	8000594 <_Z16getADCsimplifiedv>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	4b4b      	ldr	r3, [pc, #300]	; (8000964 <main+0x178>)
 8000838:	801a      	strh	r2, [r3, #0]
    		if (adcres <= 400){
 800083a:	4b4a      	ldr	r3, [pc, #296]	; (8000964 <main+0x178>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000842:	d8ec      	bhi.n	800081e <main+0x32>
    			state = 2;
 8000844:	4b46      	ldr	r3, [pc, #280]	; (8000960 <main+0x174>)
 8000846:	2202      	movs	r2, #2
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	e7e8      	b.n	800081e <main+0x32>
		}



    	//state 2: when the robot moves outside of the arena or into trouble, backtrack and then once backtrack is confirmed, go back to state 1
    	else if (state == 2){
 800084c:	4b44      	ldr	r3, [pc, #272]	; (8000960 <main+0x174>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b02      	cmp	r3, #2
 8000852:	d130      	bne.n	80008b6 <main+0xca>

    		//drives backwards until the light sensor tells us its back on track
    		driver1.set_direction(1);
 8000854:	2101      	movs	r1, #1
 8000856:	4844      	ldr	r0, [pc, #272]	; (8000968 <main+0x17c>)
 8000858:	f000 ff88 	bl	800176c <_ZN12motor_driver13set_directionEh>
    		driver2.set_direction(1);
 800085c:	2101      	movs	r1, #1
 800085e:	4843      	ldr	r0, [pc, #268]	; (800096c <main+0x180>)
 8000860:	f000 ff84 	bl	800176c <_ZN12motor_driver13set_directionEh>
    		driver1.set_duty_cycle(1700);
 8000864:	f240 61a4 	movw	r1, #1700	; 0x6a4
 8000868:	483f      	ldr	r0, [pc, #252]	; (8000968 <main+0x17c>)
 800086a:	f000 fee2 	bl	8001632 <_ZN12motor_driver14set_duty_cycleEt>
    		driver2.set_duty_cycle(1700);
 800086e:	f240 61a4 	movw	r1, #1700	; 0x6a4
 8000872:	483e      	ldr	r0, [pc, #248]	; (800096c <main+0x180>)
 8000874:	f000 fedd 	bl	8001632 <_ZN12motor_driver14set_duty_cycleEt>


    		//checks the light sensor so that when the robot is back on the field, it will return to state 1.
    		adcres = getADCsimplified();
 8000878:	f7ff fe8c 	bl	8000594 <_Z16getADCsimplifiedv>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b38      	ldr	r3, [pc, #224]	; (8000964 <main+0x178>)
 8000882:	801a      	strh	r2, [r3, #0]
    		//if there is light, meaning the robot is on the field
    		if (adcres >= 400){
 8000884:	4b37      	ldr	r3, [pc, #220]	; (8000964 <main+0x178>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800088c:	d3c7      	bcc.n	800081e <main+0x32>
    			state = 1;
 800088e:	4b34      	ldr	r3, [pc, #208]	; (8000960 <main+0x174>)
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
    			driver1.set_direction(0);
 8000894:	2100      	movs	r1, #0
 8000896:	4834      	ldr	r0, [pc, #208]	; (8000968 <main+0x17c>)
 8000898:	f000 ff68 	bl	800176c <_ZN12motor_driver13set_directionEh>
    			driver2.set_direction(0);
 800089c:	2100      	movs	r1, #0
 800089e:	4833      	ldr	r0, [pc, #204]	; (800096c <main+0x180>)
 80008a0:	f000 ff64 	bl	800176c <_ZN12motor_driver13set_directionEh>
    			driver1.set_duty_cycle(0);
 80008a4:	2100      	movs	r1, #0
 80008a6:	4830      	ldr	r0, [pc, #192]	; (8000968 <main+0x17c>)
 80008a8:	f000 fec3 	bl	8001632 <_ZN12motor_driver14set_duty_cycleEt>
    			driver2.set_duty_cycle(0);
 80008ac:	2100      	movs	r1, #0
 80008ae:	482f      	ldr	r0, [pc, #188]	; (800096c <main+0x180>)
 80008b0:	f000 febf 	bl	8001632 <_ZN12motor_driver14set_duty_cycleEt>
 80008b4:	e7b3      	b.n	800081e <main+0x32>
    		}

    	}

    	//state 3: when the robot is done picking up balls, it will move to stage 3, where it will deposit balls into the corral
    	else if (state == 3){
 80008b6:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <main+0x174>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d1af      	bne.n	800081e <main+0x32>
    		//driver3.set_duty_cycle(1200);
    		//driver4.set_duty_cycle(1200);
    		//driver5.set_duty_cycle(1200);

    		std::string color = colorSensor_DetermineColor();
 80008be:	463b      	mov	r3, r7
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fe93 	bl	80005ec <_Z26colorSensor_DetermineColorB5cxx11v>
    		if (color == "Blue"){
 80008c6:	463b      	mov	r3, r7
 80008c8:	4929      	ldr	r1, [pc, #164]	; (8000970 <main+0x184>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fde3 	bl	8001496 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d010      	beq.n	80008f8 <main+0x10c>
    			servo1.set_duty_cycle(20);
 80008d6:	2114      	movs	r1, #20
 80008d8:	4826      	ldr	r0, [pc, #152]	; (8000974 <main+0x188>)
 80008da:	f000 ff94 	bl	8001806 <_ZN12servo_driver14set_duty_cycleEt>
    			HAL_Delay(1000);
 80008de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e2:	f001 fbb7 	bl	8002054 <HAL_Delay>
				servo1.set_duty_cycle(10);
 80008e6:	210a      	movs	r1, #10
 80008e8:	4822      	ldr	r0, [pc, #136]	; (8000974 <main+0x188>)
 80008ea:	f000 ff8c 	bl	8001806 <_ZN12servo_driver14set_duty_cycleEt>
    			HAL_Delay(1000);
 80008ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f2:	f001 fbaf 	bl	8002054 <HAL_Delay>
 80008f6:	e02d      	b.n	8000954 <main+0x168>


    		}
    		else if (color == "Green"){
 80008f8:	463b      	mov	r3, r7
 80008fa:	491f      	ldr	r1, [pc, #124]	; (8000978 <main+0x18c>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fdca 	bl	8001496 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d125      	bne.n	8000954 <main+0x168>

    		}
    		else if (color == "Red"){
 8000908:	463b      	mov	r3, r7
 800090a:	491c      	ldr	r1, [pc, #112]	; (800097c <main+0x190>)
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fdc2 	bl	8001496 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d010      	beq.n	800093a <main+0x14e>
    			servo2.set_duty_cycle(20);
 8000918:	2114      	movs	r1, #20
 800091a:	4819      	ldr	r0, [pc, #100]	; (8000980 <main+0x194>)
 800091c:	f000 ff73 	bl	8001806 <_ZN12servo_driver14set_duty_cycleEt>
    			HAL_Delay(1000);
 8000920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000924:	f001 fb96 	bl	8002054 <HAL_Delay>
    			servo2.set_duty_cycle(10);
 8000928:	210a      	movs	r1, #10
 800092a:	4815      	ldr	r0, [pc, #84]	; (8000980 <main+0x194>)
 800092c:	f000 ff6b 	bl	8001806 <_ZN12servo_driver14set_duty_cycleEt>
    			HAL_Delay(1000);
 8000930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000934:	f001 fb8e 	bl	8002054 <HAL_Delay>
 8000938:	e00c      	b.n	8000954 <main+0x168>

    		}
    		else if (color == "No dominant color"){
 800093a:	463b      	mov	r3, r7
 800093c:	4911      	ldr	r1, [pc, #68]	; (8000984 <main+0x198>)
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fda9 	bl	8001496 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d004      	beq.n	8000954 <main+0x168>
    			state = 0;
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <main+0x174>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
    			disableAllMotors();
 8000950:	f7ff ff24 	bl	800079c <_Z16disableAllMotorsv>
    		std::string color = colorSensor_DetermineColor();
 8000954:	463b      	mov	r3, r7
 8000956:	4618      	mov	r0, r3
 8000958:	f007 f877 	bl	8007a4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
         */

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    }
 800095c:	e75f      	b.n	800081e <main+0x32>
 800095e:	bf00      	nop
 8000960:	200002d4 	.word	0x200002d4
 8000964:	200003b2 	.word	0x200003b2
 8000968:	200002dc 	.word	0x200002dc
 800096c:	200002ec 	.word	0x200002ec
 8000970:	08008684 	.word	0x08008684
 8000974:	2000032c 	.word	0x2000032c
 8000978:	0800868c 	.word	0x0800868c
 800097c:	08008694 	.word	0x08008694
 8000980:	20000334 	.word	0x20000334
 8000984:	08008698 	.word	0x08008698

08000988 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	; 0x50
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	2230      	movs	r2, #48	; 0x30
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f007 f94a 	bl	8007c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <_Z18SystemClock_Configv+0xdc>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a2b      	ldr	r2, [pc, #172]	; (8000a64 <_Z18SystemClock_Configv+0xdc>)
 80009b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <_Z18SystemClock_Configv+0xdc>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <_Z18SystemClock_Configv+0xe0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a25      	ldr	r2, [pc, #148]	; (8000a68 <_Z18SystemClock_Configv+0xe0>)
 80009d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <_Z18SystemClock_Configv+0xe0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ee:	2302      	movs	r3, #2
 80009f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80009f8:	230c      	movs	r3, #12
 80009fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009fc:	2360      	movs	r3, #96	; 0x60
 80009fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a04:	2304      	movs	r3, #4
 8000a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0320 	add.w	r3, r7, #32
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 fd3d 	bl	800548c <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	bf14      	ite	ne
 8000a18:	2301      	movne	r3, #1
 8000a1a:	2300      	moveq	r3, #0
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000a22:	f000 fd33 	bl	800148c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	230f      	movs	r3, #15
 8000a28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2103      	movs	r1, #3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f004 ff9a 	bl	800597c <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	bf14      	ite	ne
 8000a4e:	2301      	movne	r3, #1
 8000a50:	2300      	moveq	r3, #0
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000a58:	f000 fd18 	bl	800148c <Error_Handler>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3750      	adds	r7, #80	; 0x50
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40007000 	.word	0x40007000

08000a6c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000a80:	4a26      	ldr	r2, [pc, #152]	; (8000b1c <_ZL12MX_ADC1_Initv+0xb0>)
 8000a82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a84:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000a86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <_ZL12MX_ADC1_Initv+0xb4>)
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000acc:	4812      	ldr	r0, [pc, #72]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000ace:	f001 fae5 	bl	800209c <HAL_ADC_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf14      	ite	ne
 8000ad8:	2301      	movne	r3, #1
 8000ada:	2300      	moveq	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8000ae2:	f000 fcd3 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4619      	mov	r1, r3
 8000af6:	4808      	ldr	r0, [pc, #32]	; (8000b18 <_ZL12MX_ADC1_Initv+0xac>)
 8000af8:	f001 fd8e 	bl	8002618 <HAL_ADC_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf14      	ite	ne
 8000b02:	2301      	movne	r3, #1
 8000b04:	2300      	moveq	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000b0c:	f000 fcbe 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2000008c 	.word	0x2000008c
 8000b1c:	40012000 	.word	0x40012000
 8000b20:	0f000001 	.word	0x0f000001

08000b24 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_ZL12MX_I2C2_Initv+0x5c>)
 8000b2a:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <_ZL12MX_I2C2_Initv+0x60>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <_ZL12MX_I2C2_Initv+0x5c>)
 8000b30:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <_ZL12MX_I2C2_Initv+0x64>)
 8000b32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <_ZL12MX_I2C2_Initv+0x5c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_ZL12MX_I2C2_Initv+0x5c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <_ZL12MX_I2C2_Initv+0x5c>)
 8000b42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b46:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <_ZL12MX_I2C2_Initv+0x5c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <_ZL12MX_I2C2_Initv+0x5c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <_ZL12MX_I2C2_Initv+0x5c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <_ZL12MX_I2C2_Initv+0x5c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b60:	4807      	ldr	r0, [pc, #28]	; (8000b80 <_ZL12MX_I2C2_Initv+0x5c>)
 8000b62:	f002 fadf 	bl	8003124 <HAL_I2C_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf14      	ite	ne
 8000b6c:	2301      	movne	r3, #1
 8000b6e:	2300      	moveq	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8000b76:	f000 fc89 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000d4 	.word	0x200000d4
 8000b84:	40005800 	.word	0x40005800
 8000b88:	000186a0 	.word	0x000186a0

08000b8c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b092      	sub	sp, #72	; 0x48
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2220      	movs	r2, #32
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f007 f83a 	bl	8007c30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bbc:	4b3d      	ldr	r3, [pc, #244]	; (8000cb4 <_ZL12MX_TIM1_Initv+0x128>)
 8000bbe:	4a3e      	ldr	r2, [pc, #248]	; (8000cb8 <_ZL12MX_TIM1_Initv+0x12c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 8000bc2:	4b3c      	ldr	r3, [pc, #240]	; (8000cb4 <_ZL12MX_TIM1_Initv+0x128>)
 8000bc4:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <_ZL12MX_TIM1_Initv+0x128>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8000bd0:	4b38      	ldr	r3, [pc, #224]	; (8000cb4 <_ZL12MX_TIM1_Initv+0x128>)
 8000bd2:	22c8      	movs	r2, #200	; 0xc8
 8000bd4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <_ZL12MX_TIM1_Initv+0x128>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bdc:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <_ZL12MX_TIM1_Initv+0x128>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <_ZL12MX_TIM1_Initv+0x128>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000be8:	4832      	ldr	r0, [pc, #200]	; (8000cb4 <_ZL12MX_TIM1_Initv+0x128>)
 8000bea:	f005 f8f6 	bl	8005dda <HAL_TIM_PWM_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	bf14      	ite	ne
 8000bf4:	2301      	movne	r3, #1
 8000bf6:	2300      	moveq	r3, #0
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8000bfe:	f000 fc45 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4828      	ldr	r0, [pc, #160]	; (8000cb4 <_ZL12MX_TIM1_Initv+0x128>)
 8000c12:	f005 fe9b 	bl	800694c <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	bf14      	ite	ne
 8000c1c:	2301      	movne	r3, #1
 8000c1e:	2300      	moveq	r3, #0
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8000c26:	f000 fc31 	bl	800148c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c2a:	2360      	movs	r3, #96	; 0x60
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c36:	2300      	movs	r3, #0
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4819      	ldr	r0, [pc, #100]	; (8000cb4 <_ZL12MX_TIM1_Initv+0x128>)
 8000c50:	f005 fa26 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	bf14      	ite	ne
 8000c5a:	2301      	movne	r3, #1
 8000c5c:	2300      	moveq	r3, #0
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8000c64:	f000 fc12 	bl	800148c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <_ZL12MX_TIM1_Initv+0x128>)
 8000c8c:	f005 fecc 	bl	8006a28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bf14      	ite	ne
 8000c96:	2301      	movne	r3, #1
 8000c98:	2300      	moveq	r3, #0
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 8000ca0:	f000 fbf4 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ca4:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <_ZL12MX_TIM1_Initv+0x128>)
 8000ca6:	f000 ff35 	bl	8001b14 <HAL_TIM_MspPostInit>

}
 8000caa:	bf00      	nop
 8000cac:	3748      	adds	r7, #72	; 0x48
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000128 	.word	0x20000128
 8000cb8:	40010000 	.word	0x40010000

08000cbc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	; 0x38
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cec:	4b39      	ldr	r3, [pc, #228]	; (8000dd4 <_ZL12MX_TIM2_Initv+0x118>)
 8000cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8000cf4:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <_ZL12MX_TIM2_Initv+0x118>)
 8000cf6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b35      	ldr	r3, [pc, #212]	; (8000dd4 <_ZL12MX_TIM2_Initv+0x118>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000d02:	4b34      	ldr	r3, [pc, #208]	; (8000dd4 <_ZL12MX_TIM2_Initv+0x118>)
 8000d04:	22c8      	movs	r2, #200	; 0xc8
 8000d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b32      	ldr	r3, [pc, #200]	; (8000dd4 <_ZL12MX_TIM2_Initv+0x118>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <_ZL12MX_TIM2_Initv+0x118>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d14:	482f      	ldr	r0, [pc, #188]	; (8000dd4 <_ZL12MX_TIM2_Initv+0x118>)
 8000d16:	f005 f811 	bl	8005d3c <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	bf14      	ite	ne
 8000d20:	2301      	movne	r3, #1
 8000d22:	2300      	moveq	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000d2a:	f000 fbaf 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4826      	ldr	r0, [pc, #152]	; (8000dd4 <_ZL12MX_TIM2_Initv+0x118>)
 8000d3c:	f005 fa72 	bl	8006224 <HAL_TIM_ConfigClockSource>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bf14      	ite	ne
 8000d46:	2301      	movne	r3, #1
 8000d48:	2300      	moveq	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000d50:	f000 fb9c 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d54:	481f      	ldr	r0, [pc, #124]	; (8000dd4 <_ZL12MX_TIM2_Initv+0x118>)
 8000d56:	f005 f840 	bl	8005dda <HAL_TIM_PWM_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf14      	ite	ne
 8000d60:	2301      	movne	r3, #1
 8000d62:	2300      	moveq	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000d6a:	f000 fb8f 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <_ZL12MX_TIM2_Initv+0x118>)
 8000d7e:	f005 fde5 	bl	800694c <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	bf14      	ite	ne
 8000d88:	2301      	movne	r3, #1
 8000d8a:	2300      	moveq	r3, #0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000d92:	f000 fb7b 	bl	800148c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d96:	2360      	movs	r3, #96	; 0x60
 8000d98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2200      	movs	r2, #0
 8000daa:	4619      	mov	r1, r3
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <_ZL12MX_TIM2_Initv+0x118>)
 8000dae:	f005 f977 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	bf14      	ite	ne
 8000db8:	2301      	movne	r3, #1
 8000dba:	2300      	moveq	r3, #0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8000dc2:	f000 fb63 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dc6:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <_ZL12MX_TIM2_Initv+0x118>)
 8000dc8:	f000 fea4 	bl	8001b14 <HAL_TIM_MspPostInit>

}
 8000dcc:	bf00      	nop
 8000dce:	3738      	adds	r7, #56	; 0x38
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000170 	.word	0x20000170

08000dd8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dfa:	4b41      	ldr	r3, [pc, #260]	; (8000f00 <_ZL12MX_TIM3_Initv+0x128>)
 8000dfc:	4a41      	ldr	r2, [pc, #260]	; (8000f04 <_ZL12MX_TIM3_Initv+0x12c>)
 8000dfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e00:	4b3f      	ldr	r3, [pc, #252]	; (8000f00 <_ZL12MX_TIM3_Initv+0x128>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b3e      	ldr	r3, [pc, #248]	; (8000f00 <_ZL12MX_TIM3_Initv+0x128>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4799;
 8000e0c:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <_ZL12MX_TIM3_Initv+0x128>)
 8000e0e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000e12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <_ZL12MX_TIM3_Initv+0x128>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <_ZL12MX_TIM3_Initv+0x128>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e20:	4837      	ldr	r0, [pc, #220]	; (8000f00 <_ZL12MX_TIM3_Initv+0x128>)
 8000e22:	f004 ffda 	bl	8005dda <HAL_TIM_PWM_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bf14      	ite	ne
 8000e2c:	2301      	movne	r3, #1
 8000e2e:	2300      	moveq	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8000e36:	f000 fb29 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	4619      	mov	r1, r3
 8000e48:	482d      	ldr	r0, [pc, #180]	; (8000f00 <_ZL12MX_TIM3_Initv+0x128>)
 8000e4a:	f005 fd7f 	bl	800694c <HAL_TIMEx_MasterConfigSynchronization>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf14      	ite	ne
 8000e54:	2301      	movne	r3, #1
 8000e56:	2300      	moveq	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8000e5e:	f000 fb15 	bl	800148c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e62:	2360      	movs	r3, #96	; 0x60
 8000e64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	4619      	mov	r1, r3
 8000e78:	4821      	ldr	r0, [pc, #132]	; (8000f00 <_ZL12MX_TIM3_Initv+0x128>)
 8000e7a:	f005 f911 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf14      	ite	ne
 8000e84:	2301      	movne	r3, #1
 8000e86:	2300      	moveq	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8000e8e:	f000 fafd 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2204      	movs	r2, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4819      	ldr	r0, [pc, #100]	; (8000f00 <_ZL12MX_TIM3_Initv+0x128>)
 8000e9a:	f005 f901 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bf14      	ite	ne
 8000ea4:	2301      	movne	r3, #1
 8000ea6:	2300      	moveq	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8000eae:	f000 faed 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4811      	ldr	r0, [pc, #68]	; (8000f00 <_ZL12MX_TIM3_Initv+0x128>)
 8000eba:	f005 f8f1 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	bf14      	ite	ne
 8000ec4:	2301      	movne	r3, #1
 8000ec6:	2300      	moveq	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 8000ece:	f000 fadd 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	220c      	movs	r2, #12
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <_ZL12MX_TIM3_Initv+0x128>)
 8000eda:	f005 f8e1 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	bf14      	ite	ne
 8000ee4:	2301      	movne	r3, #1
 8000ee6:	2300      	moveq	r3, #0
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 8000eee:	f000 facd 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <_ZL12MX_TIM3_Initv+0x128>)
 8000ef4:	f000 fe0e 	bl	8001b14 <HAL_TIM_MspPostInit>

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200001b8 	.word	0x200001b8
 8000f04:	40000400 	.word	0x40000400

08000f08 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f2a:	4b41      	ldr	r3, [pc, #260]	; (8001030 <_ZL12MX_TIM4_Initv+0x128>)
 8000f2c:	4a41      	ldr	r2, [pc, #260]	; (8001034 <_ZL12MX_TIM4_Initv+0x12c>)
 8000f2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f30:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <_ZL12MX_TIM4_Initv+0x128>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b3e      	ldr	r3, [pc, #248]	; (8001030 <_ZL12MX_TIM4_Initv+0x128>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4799;
 8000f3c:	4b3c      	ldr	r3, [pc, #240]	; (8001030 <_ZL12MX_TIM4_Initv+0x128>)
 8000f3e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000f42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <_ZL12MX_TIM4_Initv+0x128>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b39      	ldr	r3, [pc, #228]	; (8001030 <_ZL12MX_TIM4_Initv+0x128>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f50:	4837      	ldr	r0, [pc, #220]	; (8001030 <_ZL12MX_TIM4_Initv+0x128>)
 8000f52:	f004 ff42 	bl	8005dda <HAL_TIM_PWM_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2301      	movne	r3, #1
 8000f5e:	2300      	moveq	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8000f66:	f000 fa91 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	4619      	mov	r1, r3
 8000f78:	482d      	ldr	r0, [pc, #180]	; (8001030 <_ZL12MX_TIM4_Initv+0x128>)
 8000f7a:	f005 fce7 	bl	800694c <HAL_TIMEx_MasterConfigSynchronization>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf14      	ite	ne
 8000f84:	2301      	movne	r3, #1
 8000f86:	2300      	moveq	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 8000f8e:	f000 fa7d 	bl	800148c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f92:	2360      	movs	r3, #96	; 0x60
 8000f94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4821      	ldr	r0, [pc, #132]	; (8001030 <_ZL12MX_TIM4_Initv+0x128>)
 8000faa:	f005 f879 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf14      	ite	ne
 8000fb4:	2301      	movne	r3, #1
 8000fb6:	2300      	moveq	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 8000fbe:	f000 fa65 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4819      	ldr	r0, [pc, #100]	; (8001030 <_ZL12MX_TIM4_Initv+0x128>)
 8000fca:	f005 f869 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf14      	ite	ne
 8000fd4:	2301      	movne	r3, #1
 8000fd6:	2300      	moveq	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 8000fde:	f000 fa55 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4811      	ldr	r0, [pc, #68]	; (8001030 <_ZL12MX_TIM4_Initv+0x128>)
 8000fea:	f005 f859 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bf14      	ite	ne
 8000ff4:	2301      	movne	r3, #1
 8000ff6:	2300      	moveq	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <_ZL12MX_TIM4_Initv+0xfa>
  {
    Error_Handler();
 8000ffe:	f000 fa45 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	220c      	movs	r2, #12
 8001006:	4619      	mov	r1, r3
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <_ZL12MX_TIM4_Initv+0x128>)
 800100a:	f005 f849 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	bf14      	ite	ne
 8001014:	2301      	movne	r3, #1
 8001016:	2300      	moveq	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <_ZL12MX_TIM4_Initv+0x11a>
  {
    Error_Handler();
 800101e:	f000 fa35 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001022:	4803      	ldr	r0, [pc, #12]	; (8001030 <_ZL12MX_TIM4_Initv+0x128>)
 8001024:	f000 fd76 	bl	8001b14 <HAL_TIM_MspPostInit>

}
 8001028:	bf00      	nop
 800102a:	3728      	adds	r7, #40	; 0x28
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000200 	.word	0x20000200
 8001034:	40000800 	.word	0x40000800

08001038 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103e:	f107 0320 	add.w	r3, r7, #32
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <_ZL12MX_TIM5_Initv+0xe8>)
 800105c:	4a31      	ldr	r2, [pc, #196]	; (8001124 <_ZL12MX_TIM5_Initv+0xec>)
 800105e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <_ZL12MX_TIM5_Initv+0xe8>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <_ZL12MX_TIM5_Initv+0xe8>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4799;
 800106c:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <_ZL12MX_TIM5_Initv+0xe8>)
 800106e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001072:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <_ZL12MX_TIM5_Initv+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <_ZL12MX_TIM5_Initv+0xe8>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001080:	4827      	ldr	r0, [pc, #156]	; (8001120 <_ZL12MX_TIM5_Initv+0xe8>)
 8001082:	f004 feaa 	bl	8005dda <HAL_TIM_PWM_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	bf14      	ite	ne
 800108c:	2301      	movne	r3, #1
 800108e:	2300      	moveq	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 8001096:	f000 f9f9 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	4619      	mov	r1, r3
 80010a8:	481d      	ldr	r0, [pc, #116]	; (8001120 <_ZL12MX_TIM5_Initv+0xe8>)
 80010aa:	f005 fc4f 	bl	800694c <HAL_TIMEx_MasterConfigSynchronization>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bf14      	ite	ne
 80010b4:	2301      	movne	r3, #1
 80010b6:	2300      	moveq	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 80010be:	f000 f9e5 	bl	800148c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	; 0x60
 80010c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2208      	movs	r2, #8
 80010d6:	4619      	mov	r1, r3
 80010d8:	4811      	ldr	r0, [pc, #68]	; (8001120 <_ZL12MX_TIM5_Initv+0xe8>)
 80010da:	f004 ffe1 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf14      	ite	ne
 80010e4:	2301      	movne	r3, #1
 80010e6:	2300      	moveq	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <_ZL12MX_TIM5_Initv+0xba>
  {
    Error_Handler();
 80010ee:	f000 f9cd 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	220c      	movs	r2, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <_ZL12MX_TIM5_Initv+0xe8>)
 80010fa:	f004 ffd1 	bl	80060a0 <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf14      	ite	ne
 8001104:	2301      	movne	r3, #1
 8001106:	2300      	moveq	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800110e:	f000 f9bd 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <_ZL12MX_TIM5_Initv+0xe8>)
 8001114:	f000 fcfe 	bl	8001b14 <HAL_TIM_MspPostInit>

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000248 	.word	0x20000248
 8001124:	40000c00 	.word	0x40000c00

08001128 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <_ZL19MX_USART1_UART_Initv+0x54>)
 800112e:	4a14      	ldr	r2, [pc, #80]	; (8001180 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001130:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <_ZL19MX_USART1_UART_Initv+0x54>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <_ZL19MX_USART1_UART_Initv+0x54>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <_ZL19MX_USART1_UART_Initv+0x54>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800115e:	4807      	ldr	r0, [pc, #28]	; (800117c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001160:	f005 fcb4 	bl	8006acc <HAL_UART_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf14      	ite	ne
 800116a:	2301      	movne	r3, #1
 800116c:	2300      	moveq	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001174:	f000 f98a 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000290 	.word	0x20000290
 8001180:	40011000 	.word	0x40011000

08001184 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <_ZL12MX_GPIO_Initv+0xc8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a2a      	ldr	r2, [pc, #168]	; (800124c <_ZL12MX_GPIO_Initv+0xc8>)
 80011a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <_ZL12MX_GPIO_Initv+0xc8>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <_ZL12MX_GPIO_Initv+0xc8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a23      	ldr	r2, [pc, #140]	; (800124c <_ZL12MX_GPIO_Initv+0xc8>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <_ZL12MX_GPIO_Initv+0xc8>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <_ZL12MX_GPIO_Initv+0xc8>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <_ZL12MX_GPIO_Initv+0xc8>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <_ZL12MX_GPIO_Initv+0xc8>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011ee:	2310      	movs	r3, #16
 80011f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	4619      	mov	r1, r3
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <_ZL12MX_GPIO_Initv+0xcc>)
 8001202:	f001 fdf3 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8001206:	f241 0304 	movw	r3, #4100	; 0x1004
 800120a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800120c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001212:	2301      	movs	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	4619      	mov	r1, r3
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <_ZL12MX_GPIO_Initv+0xd0>)
 800121e:	f001 fde5 	bl	8002dec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2008      	movs	r0, #8
 8001228:	f001 fd09 	bl	8002c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800122c:	2008      	movs	r0, #8
 800122e:	f001 fd22 	bl	8002c76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2028      	movs	r0, #40	; 0x28
 8001238:	f001 fd01 	bl	8002c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800123c:	2028      	movs	r0, #40	; 0x28
 800123e:	f001 fd1a 	bl	8002c76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400

08001258 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&data, 1);
 8001260:	2201      	movs	r2, #1
 8001262:	4959      	ldr	r1, [pc, #356]	; (80013c8 <HAL_UART_RxCpltCallback+0x170>)
 8001264:	4859      	ldr	r0, [pc, #356]	; (80013cc <HAL_UART_RxCpltCallback+0x174>)
 8001266:	f005 fc7e 	bl	8006b66 <HAL_UART_Receive_IT>
    if(huart == &huart1 && state ==1) {
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a57      	ldr	r2, [pc, #348]	; (80013cc <HAL_UART_RxCpltCallback+0x174>)
 800126e:	4293      	cmp	r3, r2
 8001270:	f040 80a6 	bne.w	80013c0 <HAL_UART_RxCpltCallback+0x168>
 8001274:	4b56      	ldr	r3, [pc, #344]	; (80013d0 <HAL_UART_RxCpltCallback+0x178>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	f040 80a1 	bne.w	80013c0 <HAL_UART_RxCpltCallback+0x168>
        //HAL_UART_Transmit(&huart2, (uint8_t*)&data, 1, 1000);

        if(data == '\r' && buff_idx >= 4) {
 800127e:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <HAL_UART_RxCpltCallback+0x170>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b0d      	cmp	r3, #13
 8001284:	f040 8087 	bne.w	8001396 <HAL_UART_RxCpltCallback+0x13e>
 8001288:	4b52      	ldr	r3, [pc, #328]	; (80013d4 <HAL_UART_RxCpltCallback+0x17c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b03      	cmp	r3, #3
 800128e:	f240 8082 	bls.w	8001396 <HAL_UART_RxCpltCallback+0x13e>
            //check for M
            if(msg_buff[buff_idx - 4] != 'M')
 8001292:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <HAL_UART_RxCpltCallback+0x17c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	3b04      	subs	r3, #4
 8001298:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <HAL_UART_RxCpltCallback+0x180>)
 800129a:	5cd3      	ldrb	r3, [r2, r3]
 800129c:	2b4d      	cmp	r3, #77	; 0x4d
 800129e:	f040 808c 	bne.w	80013ba <HAL_UART_RxCpltCallback+0x162>
                return;

            // check for n = 1 or 2
            if(!(msg_buff[buff_idx - 3] == '1' || msg_buff[buff_idx - 3] == '2'))
 80012a2:	4b4c      	ldr	r3, [pc, #304]	; (80013d4 <HAL_UART_RxCpltCallback+0x17c>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3b03      	subs	r3, #3
 80012a8:	4a4b      	ldr	r2, [pc, #300]	; (80013d8 <HAL_UART_RxCpltCallback+0x180>)
 80012aa:	5cd3      	ldrb	r3, [r2, r3]
 80012ac:	2b31      	cmp	r3, #49	; 0x31
 80012ae:	d006      	beq.n	80012be <HAL_UART_RxCpltCallback+0x66>
 80012b0:	4b48      	ldr	r3, [pc, #288]	; (80013d4 <HAL_UART_RxCpltCallback+0x17c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	4a48      	ldr	r2, [pc, #288]	; (80013d8 <HAL_UART_RxCpltCallback+0x180>)
 80012b8:	5cd3      	ldrb	r3, [r2, r3]
 80012ba:	2b32      	cmp	r3, #50	; 0x32
 80012bc:	d17f      	bne.n	80013be <HAL_UART_RxCpltCallback+0x166>
                return;

            // get driver number
            int driver_idx = msg_buff[buff_idx - 3] - '0';
 80012be:	4b45      	ldr	r3, [pc, #276]	; (80013d4 <HAL_UART_RxCpltCallback+0x17c>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	3b03      	subs	r3, #3
 80012c4:	4a44      	ldr	r2, [pc, #272]	; (80013d8 <HAL_UART_RxCpltCallback+0x180>)
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	3b30      	subs	r3, #48	; 0x30
 80012ca:	613b      	str	r3, [r7, #16]

            // get duty cycle
            msg_buff[buff_idx] = 0;
 80012cc:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <HAL_UART_RxCpltCallback+0x17c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <HAL_UART_RxCpltCallback+0x180>)
 80012d4:	2100      	movs	r1, #0
 80012d6:	5499      	strb	r1, [r3, r2]
            long dc_initial = strtol(msg_buff + buff_idx - 2, NULL, 16);
 80012d8:	4b3e      	ldr	r3, [pc, #248]	; (80013d4 <HAL_UART_RxCpltCallback+0x17c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	3b02      	subs	r3, #2
 80012de:	4a3e      	ldr	r2, [pc, #248]	; (80013d8 <HAL_UART_RxCpltCallback+0x180>)
 80012e0:	4413      	add	r3, r2
 80012e2:	2210      	movs	r2, #16
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f006 fe80 	bl	8007fec <strtol>
 80012ec:	60f8      	str	r0, [r7, #12]
            uint8_t direction;
            uint16_t dc;
            if(dc_initial > 0x7f) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b7f      	cmp	r3, #127	; 0x7f
 80012f2:	dd0f      	ble.n	8001314 <HAL_UART_RxCpltCallback+0xbc>
                direction = 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	75fb      	strb	r3, [r7, #23]
                dc_initial = 0x100 - dc_initial;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80012fe:	60fb      	str	r3, [r7, #12]
                dc = (uint16_t)dc_initial * htim5.Init.Period / 128;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <HAL_UART_RxCpltCallback+0x184>)
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	09db      	lsrs	r3, r3, #7
 8001310:	82bb      	strh	r3, [r7, #20]
 8001312:	e010      	b.n	8001336 <HAL_UART_RxCpltCallback+0xde>
            }
            else {
                direction = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	75fb      	strb	r3, [r7, #23]
                dc = (uint16_t)dc_initial * htim5.Init.Period / 127;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	b29b      	uxth	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <HAL_UART_RxCpltCallback+0x184>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	fb03 f202 	mul.w	r2, r3, r2
 8001326:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <HAL_UART_RxCpltCallback+0x188>)
 8001328:	fba3 1302 	umull	r1, r3, r3, r2
 800132c:	1ad2      	subs	r2, r2, r3
 800132e:	0852      	lsrs	r2, r2, #1
 8001330:	4413      	add	r3, r2
 8001332:	099b      	lsrs	r3, r3, #6
 8001334:	82bb      	strh	r3, [r7, #20]
            }

            // update motor driver
            if(driver_idx == 1) {
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d10a      	bne.n	8001352 <HAL_UART_RxCpltCallback+0xfa>
                driver1.set_direction(direction);
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	4619      	mov	r1, r3
 8001340:	4828      	ldr	r0, [pc, #160]	; (80013e4 <HAL_UART_RxCpltCallback+0x18c>)
 8001342:	f000 fa13 	bl	800176c <_ZN12motor_driver13set_directionEh>
                driver1.set_duty_cycle(dc);
 8001346:	8abb      	ldrh	r3, [r7, #20]
 8001348:	4619      	mov	r1, r3
 800134a:	4826      	ldr	r0, [pc, #152]	; (80013e4 <HAL_UART_RxCpltCallback+0x18c>)
 800134c:	f000 f971 	bl	8001632 <_ZN12motor_driver14set_duty_cycleEt>
 8001350:	e009      	b.n	8001366 <HAL_UART_RxCpltCallback+0x10e>
            }
            else {
                driver2.set_direction(direction);
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	4619      	mov	r1, r3
 8001356:	4824      	ldr	r0, [pc, #144]	; (80013e8 <HAL_UART_RxCpltCallback+0x190>)
 8001358:	f000 fa08 	bl	800176c <_ZN12motor_driver13set_directionEh>
                driver2.set_duty_cycle(dc);
 800135c:	8abb      	ldrh	r3, [r7, #20]
 800135e:	4619      	mov	r1, r3
 8001360:	4821      	ldr	r0, [pc, #132]	; (80013e8 <HAL_UART_RxCpltCallback+0x190>)
 8001362:	f000 f966 	bl	8001632 <_ZN12motor_driver14set_duty_cycleEt>
            }

            // reset buff_idx
            buff_idx = 0;
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_UART_RxCpltCallback+0x17c>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]

            // send response
            uint16_t size;
            if(direction == 0)
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d108      	bne.n	8001384 <HAL_UART_RxCpltCallback+0x12c>
                size = sprintf(msg_buff, "\nMotor %d set to forward at duty cycle %d\r\n", driver_idx, dc);
 8001372:	8abb      	ldrh	r3, [r7, #20]
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	491d      	ldr	r1, [pc, #116]	; (80013ec <HAL_UART_RxCpltCallback+0x194>)
 8001378:	4817      	ldr	r0, [pc, #92]	; (80013d8 <HAL_UART_RxCpltCallback+0x180>)
 800137a:	f006 fd95 	bl	8007ea8 <siprintf>
 800137e:	4603      	mov	r3, r0
 8001380:	817b      	strh	r3, [r7, #10]
            else
                size = sprintf(msg_buff, "\nMotor %d set to reverse at duty cycle %d\r\n", driver_idx, dc);
 8001382:	e01d      	b.n	80013c0 <HAL_UART_RxCpltCallback+0x168>
 8001384:	8abb      	ldrh	r3, [r7, #20]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4919      	ldr	r1, [pc, #100]	; (80013f0 <HAL_UART_RxCpltCallback+0x198>)
 800138a:	4813      	ldr	r0, [pc, #76]	; (80013d8 <HAL_UART_RxCpltCallback+0x180>)
 800138c:	f006 fd8c 	bl	8007ea8 <siprintf>
 8001390:	4603      	mov	r3, r0
 8001392:	817b      	strh	r3, [r7, #10]
 8001394:	e014      	b.n	80013c0 <HAL_UART_RxCpltCallback+0x168>
            //HAL_UART_Transmit(&huart2, (uint8_t*)msg_buff, size, 1000);
        }
        else if(buff_idx < 100 ) {
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_UART_RxCpltCallback+0x17c>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b63      	cmp	r3, #99	; 0x63
 800139c:	d810      	bhi.n	80013c0 <HAL_UART_RxCpltCallback+0x168>
            msg_buff[buff_idx] = data;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HAL_UART_RxCpltCallback+0x17c>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_UART_RxCpltCallback+0x170>)
 80013a6:	7819      	ldrb	r1, [r3, #0]
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_UART_RxCpltCallback+0x180>)
 80013aa:	5499      	strb	r1, [r3, r2]
            buff_idx++;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_UART_RxCpltCallback+0x17c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_UART_RxCpltCallback+0x17c>)
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e002      	b.n	80013c0 <HAL_UART_RxCpltCallback+0x168>
                return;
 80013ba:	bf00      	nop
 80013bc:	e000      	b.n	80013c0 <HAL_UART_RxCpltCallback+0x168>
                return;
 80013be:	bf00      	nop
        }
    }
}
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000033c 	.word	0x2000033c
 80013cc:	20000290 	.word	0x20000290
 80013d0:	200002d4 	.word	0x200002d4
 80013d4:	200003a4 	.word	0x200003a4
 80013d8:	20000340 	.word	0x20000340
 80013dc:	20000248 	.word	0x20000248
 80013e0:	02040811 	.word	0x02040811
 80013e4:	200002dc 	.word	0x200002dc
 80013e8:	200002ec 	.word	0x200002ec
 80013ec:	080086ac 	.word	0x080086ac
 80013f0:	080086d8 	.word	0x080086d8

080013f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	80fb      	strh	r3, [r7, #6]
	// uses the pause state of the state machine, the oldstate variable remebers the previous state of the state machine and will go back to it once finished
	if (GPIO_Pin == GPIO_PIN_2){
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	2b04      	cmp	r3, #4
 8001402:	d127      	bne.n	8001454 <HAL_GPIO_EXTI_Callback+0x60>
		if (state == 0){
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <HAL_GPIO_EXTI_Callback+0x88>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10a      	bne.n	8001422 <HAL_GPIO_EXTI_Callback+0x2e>
			state = 1;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_GPIO_EXTI_Callback+0x88>)
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]
			//i2c stuff
			//colorSensor_Init();
			//driver enable
			enableAllMotors();
 8001412:	f7ff f99b 	bl	800074c <_Z15enableAllMotorsv>
			HAL_UART_Receive_IT(&huart1, (uint8_t*)&data, 1);
 8001416:	2201      	movs	r2, #1
 8001418:	4919      	ldr	r1, [pc, #100]	; (8001480 <HAL_GPIO_EXTI_Callback+0x8c>)
 800141a:	481a      	ldr	r0, [pc, #104]	; (8001484 <HAL_GPIO_EXTI_Callback+0x90>)
 800141c:	f005 fba3 	bl	8006b66 <HAL_UART_Receive_IT>
			state = 0;
		}
	}


}
 8001420:	e027      	b.n	8001472 <HAL_GPIO_EXTI_Callback+0x7e>
		else if (state!= 4 && state != 0){
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_GPIO_EXTI_Callback+0x88>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b04      	cmp	r3, #4
 8001428:	d00d      	beq.n	8001446 <HAL_GPIO_EXTI_Callback+0x52>
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_GPIO_EXTI_Callback+0x88>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d009      	beq.n	8001446 <HAL_GPIO_EXTI_Callback+0x52>
			oldstate = state;
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_GPIO_EXTI_Callback+0x88>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a14      	ldr	r2, [pc, #80]	; (8001488 <HAL_GPIO_EXTI_Callback+0x94>)
 8001438:	6013      	str	r3, [r2, #0]
			state = 4;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_GPIO_EXTI_Callback+0x88>)
 800143c:	2204      	movs	r2, #4
 800143e:	601a      	str	r2, [r3, #0]
			disableAllMotors();
 8001440:	f7ff f9ac 	bl	800079c <_Z16disableAllMotorsv>
}
 8001444:	e015      	b.n	8001472 <HAL_GPIO_EXTI_Callback+0x7e>
			state = oldstate;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_GPIO_EXTI_Callback+0x94>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_GPIO_EXTI_Callback+0x88>)
 800144c:	6013      	str	r3, [r2, #0]
			enableAllMotors();
 800144e:	f7ff f97d 	bl	800074c <_Z15enableAllMotorsv>
}
 8001452:	e00e      	b.n	8001472 <HAL_GPIO_EXTI_Callback+0x7e>
	else if (GPIO_Pin == GPIO_PIN_12){
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800145a:	d10a      	bne.n	8001472 <HAL_GPIO_EXTI_Callback+0x7e>
		if (state ==1){
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <HAL_GPIO_EXTI_Callback+0x88>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d006      	beq.n	8001472 <HAL_GPIO_EXTI_Callback+0x7e>
		else if (state == 3){
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_GPIO_EXTI_Callback+0x88>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b03      	cmp	r3, #3
 800146a:	d102      	bne.n	8001472 <HAL_GPIO_EXTI_Callback+0x7e>
			state = 0;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GPIO_EXTI_Callback+0x88>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200002d4 	.word	0x200002d4
 8001480:	2000033c 	.word	0x2000033c
 8001484:	20000290 	.word	0x20000290
 8001488:	200002d8 	.word	0x200002d8

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001494:	e7fe      	b.n	8001494 <Error_Handler+0x8>

08001496 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @param __rhs  C string.
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
 80014a0:	6839      	ldr	r1, [r7, #0]
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f006 fad7 	bl	8007a56 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bf0c      	ite	eq
 80014ae:	2301      	moveq	r3, #1
 80014b0:	2300      	movne	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_Z41__static_initialization_and_destruction_0ii>:
    {
    }
  /* USER CODE END Error_Handler_Debug */
}
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d140      	bne.n	800154e <_Z41__static_initialization_and_destruction_0ii+0x92>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d13b      	bne.n	800154e <_Z41__static_initialization_and_destruction_0ii+0x92>
motor_driver driver1 = motor_driver(&htim5, TIM_CHANNEL_3, TIM_CHANNEL_4, 0, 0);
 80014d6:	2300      	movs	r3, #0
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	2300      	movs	r3, #0
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	230c      	movs	r3, #12
 80014e0:	2208      	movs	r2, #8
 80014e2:	491d      	ldr	r1, [pc, #116]	; (8001558 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80014e4:	481d      	ldr	r0, [pc, #116]	; (800155c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80014e6:	f000 f857 	bl	8001598 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmhh>
motor_driver driver2 = motor_driver(&htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, 0, 1);
 80014ea:	2301      	movs	r3, #1
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	2300      	movs	r3, #0
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2304      	movs	r3, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	491a      	ldr	r1, [pc, #104]	; (8001560 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80014f8:	481a      	ldr	r0, [pc, #104]	; (8001564 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80014fa:	f000 f84d 	bl	8001598 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmhh>
motor_driver driver3 = motor_driver(&htim3, TIM_CHANNEL_3, TIM_CHANNEL_4, 0, 0);
 80014fe:	2300      	movs	r3, #0
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	2300      	movs	r3, #0
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	230c      	movs	r3, #12
 8001508:	2208      	movs	r2, #8
 800150a:	4915      	ldr	r1, [pc, #84]	; (8001560 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800150c:	4816      	ldr	r0, [pc, #88]	; (8001568 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800150e:	f000 f843 	bl	8001598 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmhh>
motor_driver driver4 = motor_driver(&htim4, TIM_CHANNEL_1, TIM_CHANNEL_2, 0, 0);
 8001512:	2300      	movs	r3, #0
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	2300      	movs	r3, #0
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2304      	movs	r3, #4
 800151c:	2200      	movs	r2, #0
 800151e:	4913      	ldr	r1, [pc, #76]	; (800156c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001520:	4813      	ldr	r0, [pc, #76]	; (8001570 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001522:	f000 f839 	bl	8001598 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmhh>
motor_driver driver5 = motor_driver(&htim4, TIM_CHANNEL_3, TIM_CHANNEL_4, 0, 0);
 8001526:	2300      	movs	r3, #0
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	2300      	movs	r3, #0
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	230c      	movs	r3, #12
 8001530:	2208      	movs	r2, #8
 8001532:	490e      	ldr	r1, [pc, #56]	; (800156c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001534:	480f      	ldr	r0, [pc, #60]	; (8001574 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001536:	f000 f82f 	bl	8001598 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmhh>
servo_driver servo1 = servo_driver(&htim1, TIM_CHANNEL_1);
 800153a:	2200      	movs	r2, #0
 800153c:	490e      	ldr	r1, [pc, #56]	; (8001578 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800153e:	480f      	ldr	r0, [pc, #60]	; (800157c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001540:	f000 f92e 	bl	80017a0 <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>
servo_driver servo2 = servo_driver(&htim2, TIM_CHANNEL_1);
 8001544:	2200      	movs	r2, #0
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001548:	480e      	ldr	r0, [pc, #56]	; (8001584 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800154a:	f000 f929 	bl	80017a0 <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000248 	.word	0x20000248
 800155c:	200002dc 	.word	0x200002dc
 8001560:	200001b8 	.word	0x200001b8
 8001564:	200002ec 	.word	0x200002ec
 8001568:	200002fc 	.word	0x200002fc
 800156c:	20000200 	.word	0x20000200
 8001570:	2000030c 	.word	0x2000030c
 8001574:	2000031c 	.word	0x2000031c
 8001578:	20000128 	.word	0x20000128
 800157c:	2000032c 	.word	0x2000032c
 8001580:	20000170 	.word	0x20000170
 8001584:	20000334 	.word	0x20000334

08001588 <_GLOBAL__sub_I_hadc1>:
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
 800158c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff ff93 	bl	80014bc <_Z41__static_initialization_and_destruction_0ii>
 8001596:	bd80      	pop	{r7, pc}

08001598 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmhh>:
 *      Author: Ryan
 */

#include "motor_driver.h"

motor_driver::motor_driver(TIM_HandleTypeDef* _htim,
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	603b      	str	r3, [r7, #0]
    :htim(_htim),
     ch1(_ch1),
     ch2(_ch2),
     direction(_direction),
	 //polarity 1 is reverse. 0 is normal
	 polarity(_polarity)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	7e3a      	ldrb	r2, [r7, #24]
 80015bc:	731a      	strb	r2, [r3, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	7f3a      	ldrb	r2, [r7, #28]
 80015c2:	735a      	strb	r2, [r3, #13]
{

}
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_ZN12motor_driver13enable_driverEv>:

void motor_driver::enable_driver() {
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, ch1);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4619      	mov	r1, r3
 80015e4:	4610      	mov	r0, r2
 80015e6:	f004 fc47 	bl	8005e78 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, ch2);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4610      	mov	r0, r2
 80015f6:	f004 fc3f 	bl	8005e78 <HAL_TIM_PWM_Start>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_ZN12motor_driver14disable_driverEv>:

void motor_driver::disable_driver() {
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop(htim, ch1);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f004 fcdf 	bl	8005fd8 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(htim, ch2);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	4619      	mov	r1, r3
 8001624:	4610      	mov	r0, r2
 8001626:	f004 fcd7 	bl	8005fd8 <HAL_TIM_PWM_Stop>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <_ZN12motor_driver14set_duty_cycleEt>:

void motor_driver::set_duty_cycle(uint16_t dc) {
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	807b      	strh	r3, [r7, #2]
    // forward
    if(direction == 0) {
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7b1b      	ldrb	r3, [r3, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d146      	bne.n	80016d4 <_ZN12motor_driver14set_duty_cycleEt+0xa2>
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d105      	bne.n	800165a <_ZN12motor_driver14set_duty_cycleEt+0x28>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	887a      	ldrh	r2, [r7, #2]
 8001656:	635a      	str	r2, [r3, #52]	; 0x34
 8001658:	e018      	b.n	800168c <_ZN12motor_driver14set_duty_cycleEt+0x5a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b04      	cmp	r3, #4
 8001660:	d105      	bne.n	800166e <_ZN12motor_driver14set_duty_cycleEt+0x3c>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	887a      	ldrh	r2, [r7, #2]
 800166a:	639a      	str	r2, [r3, #56]	; 0x38
 800166c:	e00e      	b.n	800168c <_ZN12motor_driver14set_duty_cycleEt+0x5a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b08      	cmp	r3, #8
 8001674:	d105      	bne.n	8001682 <_ZN12motor_driver14set_duty_cycleEt+0x50>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	887a      	ldrh	r2, [r7, #2]
 800167e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001680:	e004      	b.n	800168c <_ZN12motor_driver14set_duty_cycleEt+0x5a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	887a      	ldrh	r2, [r7, #2]
 800168a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d105      	bne.n	80016a0 <_ZN12motor_driver14set_duty_cycleEt+0x6e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2200      	movs	r2, #0
 800169c:	635a      	str	r2, [r3, #52]	; 0x34
    // reverse
    else {
        __HAL_TIM_SET_COMPARE(htim, ch1, 0);
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
    }
}
 800169e:	e05f      	b.n	8001760 <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d105      	bne.n	80016b4 <_ZN12motor_driver14set_duty_cycleEt+0x82>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016b2:	e055      	b.n	8001760 <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d105      	bne.n	80016c8 <_ZN12motor_driver14set_duty_cycleEt+0x96>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80016c6:	e04b      	b.n	8001760 <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2200      	movs	r2, #0
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80016d2:	e045      	b.n	8001760 <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch1, 0);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d105      	bne.n	80016e8 <_ZN12motor_driver14set_duty_cycleEt+0xb6>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2200      	movs	r2, #0
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34
 80016e6:	e018      	b.n	800171a <_ZN12motor_driver14set_duty_cycleEt+0xe8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d105      	bne.n	80016fc <_ZN12motor_driver14set_duty_cycleEt+0xca>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	639a      	str	r2, [r3, #56]	; 0x38
 80016fa:	e00e      	b.n	800171a <_ZN12motor_driver14set_duty_cycleEt+0xe8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b08      	cmp	r3, #8
 8001702:	d105      	bne.n	8001710 <_ZN12motor_driver14set_duty_cycleEt+0xde>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	63da      	str	r2, [r3, #60]	; 0x3c
 800170e:	e004      	b.n	800171a <_ZN12motor_driver14set_duty_cycleEt+0xe8>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2200      	movs	r2, #0
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d105      	bne.n	800172e <_ZN12motor_driver14set_duty_cycleEt+0xfc>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	887a      	ldrh	r2, [r7, #2]
 800172a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800172c:	e018      	b.n	8001760 <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b04      	cmp	r3, #4
 8001734:	d105      	bne.n	8001742 <_ZN12motor_driver14set_duty_cycleEt+0x110>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	887a      	ldrh	r2, [r7, #2]
 800173e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001740:	e00e      	b.n	8001760 <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b08      	cmp	r3, #8
 8001748:	d105      	bne.n	8001756 <_ZN12motor_driver14set_duty_cycleEt+0x124>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	887a      	ldrh	r2, [r7, #2]
 8001752:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001754:	e004      	b.n	8001760 <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	887a      	ldrh	r2, [r7, #2]
 800175e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_ZN12motor_driver13set_directionEh>:

void motor_driver::set_direction(uint8_t direction ) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
    if (polarity == 1){
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7b5b      	ldrb	r3, [r3, #13]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d106      	bne.n	800178e <_ZN12motor_driver13set_directionEh+0x22>
    	this->direction = direction^1;
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	f083 0301 	eor.w	r3, r3, #1
 8001786:	b2da      	uxtb	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	731a      	strb	r2, [r3, #12]
    }
    else {
    	this->direction = direction;
    }

}
 800178c:	e002      	b.n	8001794 <_ZN12motor_driver13set_directionEh+0x28>
    	this->direction = direction;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	731a      	strb	r2, [r3, #12]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>:
 *      Author: Ryan
 */

#include "servo_driver.h"

servo_driver::servo_driver(TIM_HandleTypeDef* _htim,
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
                           uint32_t _ch1)
    :htim(_htim),
     ch1(_ch1)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	605a      	str	r2, [r3, #4]
{

}
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4618      	mov	r0, r3
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_ZN12servo_driver13enable_driverEv>:

void servo_driver::enable_driver() {
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, ch1);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4619      	mov	r1, r3
 80017d8:	4610      	mov	r0, r2
 80017da:	f004 fb4d 	bl	8005e78 <HAL_TIM_PWM_Start>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_ZN12servo_driver14disable_driverEv>:

void servo_driver::disable_driver() {
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop(htim, ch1);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4619      	mov	r1, r3
 80017f8:	4610      	mov	r0, r2
 80017fa:	f004 fbed 	bl	8005fd8 <HAL_TIM_PWM_Stop>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <_ZN12servo_driver14set_duty_cycleEt>:

void servo_driver::set_duty_cycle(uint16_t dc) {
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	807b      	strh	r3, [r7, #2]
    // forward
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d105      	bne.n	8001826 <_ZN12servo_driver14set_duty_cycleEt+0x20>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	887a      	ldrh	r2, [r7, #2]
 8001822:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001824:	e018      	b.n	8001858 <_ZN12servo_driver14set_duty_cycleEt+0x52>
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b04      	cmp	r3, #4
 800182c:	d105      	bne.n	800183a <_ZN12servo_driver14set_duty_cycleEt+0x34>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	887a      	ldrh	r2, [r7, #2]
 8001836:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001838:	e00e      	b.n	8001858 <_ZN12servo_driver14set_duty_cycleEt+0x52>
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b08      	cmp	r3, #8
 8001840:	d105      	bne.n	800184e <_ZN12servo_driver14set_duty_cycleEt+0x48>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	887a      	ldrh	r2, [r7, #2]
 800184a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800184c:	e004      	b.n	8001858 <_ZN12servo_driver14set_duty_cycleEt+0x52>
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	887a      	ldrh	r2, [r7, #2]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <HAL_MspInit+0x4c>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_MspInit+0x4c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_MspInit+0x4c>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_MspInit+0x4c>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a1b      	ldr	r2, [pc, #108]	; (8001940 <HAL_ADC_MspInit+0x8c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d12f      	bne.n	8001936 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_ADC_MspInit+0x90>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a19      	ldr	r2, [pc, #100]	; (8001944 <HAL_ADC_MspInit+0x90>)
 80018e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_ADC_MspInit+0x90>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <HAL_ADC_MspInit+0x90>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <HAL_ADC_MspInit+0x90>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_ADC_MspInit+0x90>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800190e:	2301      	movs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001912:	2303      	movs	r3, #3
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <HAL_ADC_MspInit+0x94>)
 8001922:	f001 fa63 	bl	8002dec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	2012      	movs	r0, #18
 800192c:	f001 f987 	bl	8002c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001930:	2012      	movs	r0, #18
 8001932:	f001 f9a0 	bl	8002c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40012000 	.word	0x40012000
 8001944:	40023800 	.word	0x40023800
 8001948:	40020000 	.word	0x40020000

0800194c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <HAL_I2C_MspInit+0xb4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d144      	bne.n	80019f8 <HAL_I2C_MspInit+0xac>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_I2C_MspInit+0xb8>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <HAL_I2C_MspInit+0xb8>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <HAL_I2C_MspInit+0xb8>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800198a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001990:	2312      	movs	r3, #18
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800199c:	2304      	movs	r3, #4
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	4818      	ldr	r0, [pc, #96]	; (8001a08 <HAL_I2C_MspInit+0xbc>)
 80019a8:	f001 fa20 	bl	8002dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019ac:	2308      	movs	r3, #8
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b0:	2312      	movs	r3, #18
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80019bc:	2309      	movs	r3, #9
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	4810      	ldr	r0, [pc, #64]	; (8001a08 <HAL_I2C_MspInit+0xbc>)
 80019c8:	f001 fa10 	bl	8002dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_I2C_MspInit+0xb8>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <HAL_I2C_MspInit+0xb8>)
 80019d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019da:	6413      	str	r3, [r2, #64]	; 0x40
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_I2C_MspInit+0xb8>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	2021      	movs	r0, #33	; 0x21
 80019ee:	f001 f926 	bl	8002c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80019f2:	2021      	movs	r0, #33	; 0x21
 80019f4:	f001 f93f 	bl	8002c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019f8:	bf00      	nop
 80019fa:	3728      	adds	r7, #40	; 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40005800 	.word	0x40005800
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020400 	.word	0x40020400

08001a0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a29      	ldr	r2, [pc, #164]	; (8001ac0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10e      	bne.n	8001a3c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a27      	ldr	r2, [pc, #156]	; (8001ac4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001a3a:	e03a      	b.n	8001ab2 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <HAL_TIM_PWM_MspInit+0xbc>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10e      	bne.n	8001a64 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
}
 8001a62:	e026      	b.n	8001ab2 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a18      	ldr	r2, [pc, #96]	; (8001acc <HAL_TIM_PWM_MspInit+0xc0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d10e      	bne.n	8001a8c <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
}
 8001a8a:	e012      	b.n	8001ab2 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM5)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <HAL_TIM_PWM_MspInit+0xc4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d10d      	bne.n	8001ab2 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
}
 8001ab2:	bf00      	nop
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40000400 	.word	0x40000400
 8001acc:	40000800 	.word	0x40000800
 8001ad0:	40000c00 	.word	0x40000c00

08001ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae4:	d10d      	bne.n	8001b02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_TIM_Base_MspInit+0x3c>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_TIM_Base_MspInit+0x3c>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_TIM_Base_MspInit+0x3c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800

08001b14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08e      	sub	sp, #56	; 0x38
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6a      	ldr	r2, [pc, #424]	; (8001cdc <HAL_TIM_MspPostInit+0x1c8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d11f      	bne.n	8001b76 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
 8001b3a:	4b69      	ldr	r3, [pc, #420]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a68      	ldr	r2, [pc, #416]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	623b      	str	r3, [r7, #32]
 8001b50:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	485d      	ldr	r0, [pc, #372]	; (8001ce4 <HAL_TIM_MspPostInit+0x1d0>)
 8001b70:	f001 f93c 	bl	8002dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001b74:	e0ad      	b.n	8001cd2 <HAL_TIM_MspPostInit+0x1be>
  else if(htim->Instance==TIM2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7e:	d11e      	bne.n	8001bbe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	4b56      	ldr	r3, [pc, #344]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	4a55      	ldr	r2, [pc, #340]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b90:	4b53      	ldr	r3, [pc, #332]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bac:	2301      	movs	r3, #1
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	484b      	ldr	r0, [pc, #300]	; (8001ce4 <HAL_TIM_MspPostInit+0x1d0>)
 8001bb8:	f001 f918 	bl	8002dec <HAL_GPIO_Init>
}
 8001bbc:	e089      	b.n	8001cd2 <HAL_TIM_MspPostInit+0x1be>
  else if(htim->Instance==TIM3)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a49      	ldr	r2, [pc, #292]	; (8001ce8 <HAL_TIM_MspPostInit+0x1d4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d13c      	bne.n	8001c42 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	4b44      	ldr	r3, [pc, #272]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	4a43      	ldr	r2, [pc, #268]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd8:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	4b3d      	ldr	r3, [pc, #244]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	4a3c      	ldr	r2, [pc, #240]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001bee:	f043 0302 	orr.w	r3, r3, #2
 8001bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf4:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c00:	23c0      	movs	r3, #192	; 0xc0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c10:	2302      	movs	r3, #2
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4832      	ldr	r0, [pc, #200]	; (8001ce4 <HAL_TIM_MspPostInit+0x1d0>)
 8001c1c:	f001 f8e6 	bl	8002dec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c20:	2303      	movs	r3, #3
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c30:	2302      	movs	r3, #2
 8001c32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c38:	4619      	mov	r1, r3
 8001c3a:	482c      	ldr	r0, [pc, #176]	; (8001cec <HAL_TIM_MspPostInit+0x1d8>)
 8001c3c:	f001 f8d6 	bl	8002dec <HAL_GPIO_Init>
}
 8001c40:	e047      	b.n	8001cd2 <HAL_TIM_MspPostInit+0x1be>
  else if(htim->Instance==TIM4)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a2a      	ldr	r2, [pc, #168]	; (8001cf0 <HAL_TIM_MspPostInit+0x1dc>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d11f      	bne.n	8001c8c <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5c:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c68:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c82:	4619      	mov	r1, r3
 8001c84:	4819      	ldr	r0, [pc, #100]	; (8001cec <HAL_TIM_MspPostInit+0x1d8>)
 8001c86:	f001 f8b1 	bl	8002dec <HAL_GPIO_Init>
}
 8001c8a:	e022      	b.n	8001cd2 <HAL_TIM_MspPostInit+0x1be>
  else if(htim->Instance==TIM5)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a18      	ldr	r2, [pc, #96]	; (8001cf4 <HAL_TIM_MspPostInit+0x1e0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d11d      	bne.n	8001cd2 <HAL_TIM_MspPostInit+0x1be>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_TIM_MspPostInit+0x1cc>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cb2:	230c      	movs	r3, #12
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <HAL_TIM_MspPostInit+0x1d0>)
 8001cce:	f001 f88d 	bl	8002dec <HAL_GPIO_Init>
}
 8001cd2:	bf00      	nop
 8001cd4:	3738      	adds	r7, #56	; 0x38
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40000800 	.word	0x40000800
 8001cf4:	40000c00 	.word	0x40000c00

08001cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_UART_MspInit+0x94>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d134      	bne.n	8001d84 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d24:	f043 0310 	orr.w	r3, r3, #16
 8001d28:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d64:	2307      	movs	r3, #7
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4809      	ldr	r0, [pc, #36]	; (8001d94 <HAL_UART_MspInit+0x9c>)
 8001d70:	f001 f83c 	bl	8002dec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	2025      	movs	r0, #37	; 0x25
 8001d7a:	f000 ff60 	bl	8002c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d7e:	2025      	movs	r0, #37	; 0x25
 8001d80:	f000 ff79 	bl	8002c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020000 	.word	0x40020000

08001d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <NMI_Handler+0x4>

08001d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <HardFault_Handler+0x4>

08001da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <MemManage_Handler+0x4>

08001daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <BusFault_Handler+0x4>

08001db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <UsageFault_Handler+0x4>

08001db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de4:	f000 f916 	bl	8002014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}

08001dec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001df0:	2004      	movs	r0, #4
 8001df2:	f001 f97f 	bl	80030f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <ADC_IRQHandler+0x10>)
 8001e02:	f000 face 	bl	80023a2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000008c 	.word	0x2000008c

08001e10 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <I2C2_EV_IRQHandler+0x10>)
 8001e16:	f001 fcef 	bl	80037f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200000d4 	.word	0x200000d4

08001e24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <USART1_IRQHandler+0x10>)
 8001e2a:	f004 fecd 	bl	8006bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000290 	.word	0x20000290

08001e38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001e3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e40:	f001 f958 	bl	80030f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return 1;
 8001e4c:	2301      	movs	r3, #1
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_kill>:

int _kill(int pid, int sig)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e62:	f005 fe73 	bl	8007b4c <__errno>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2216      	movs	r2, #22
 8001e6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_exit>:

void _exit (int status)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ffe7 	bl	8001e58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e8a:	e7fe      	b.n	8001e8a <_exit+0x12>

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f005 fe46 	bl	8007b4c <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20020000 	.word	0x20020000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	200003b4 	.word	0x200003b4
 8001ef4:	200003d0 	.word	0x200003d0

08001ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <SystemInit+0x20>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <SystemInit+0x20>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f54 <LoopFillZerobss+0x12>


/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f22:	490e      	ldr	r1, [pc, #56]	; (8001f5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f38:	4c0b      	ldr	r4, [pc, #44]	; (8001f68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f46:	f7ff ffd7 	bl	8001ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f4a:	f005 fe05 	bl	8007b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4e:	f7fe fc4d 	bl	80007ec <main>
  bx  lr    
 8001f52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f60:	080088a8 	.word	0x080088a8
  ldr r2, =_sbss
 8001f64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f68:	200003d0 	.word	0x200003d0

08001f6c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <DMA1_Stream0_IRQHandler>
	...

08001f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_Init+0x40>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <HAL_Init+0x40>)
 8001f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_Init+0x40>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <HAL_Init+0x40>)
 8001f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_Init+0x40>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_Init+0x40>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f000 fe45 	bl	8002c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9e:	200f      	movs	r0, #15
 8001fa0:	f000 f808 	bl	8001fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa4:	f7ff fc5e 	bl	8001864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023c00 	.word	0x40023c00

08001fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_InitTick+0x54>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_InitTick+0x58>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fe5d 	bl	8002c92 <HAL_SYSTICK_Config>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00e      	b.n	8002000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d80a      	bhi.n	8001ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f000 fe25 	bl	8002c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff4:	4a06      	ldr	r2, [pc, #24]	; (8002010 <HAL_InitTick+0x5c>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e000      	b.n	8002000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000000 	.word	0x20000000
 800200c:	20000008 	.word	0x20000008
 8002010:	20000004 	.word	0x20000004

08002014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_IncTick+0x20>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_IncTick+0x24>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4413      	add	r3, r2
 8002024:	4a04      	ldr	r2, [pc, #16]	; (8002038 <HAL_IncTick+0x24>)
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000008 	.word	0x20000008
 8002038:	200003b8 	.word	0x200003b8

0800203c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return uwTick;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_GetTick+0x14>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	200003b8 	.word	0x200003b8

08002054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff ffee 	bl	800203c <HAL_GetTick>
 8002060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d005      	beq.n	800207a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <HAL_Delay+0x44>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800207a:	bf00      	nop
 800207c:	f7ff ffde 	bl	800203c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	429a      	cmp	r2, r3
 800208a:	d8f7      	bhi.n	800207c <HAL_Delay+0x28>
  {
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000008 	.word	0x20000008

0800209c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e033      	b.n	800211a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fbfa 	bl	80018b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d118      	bne.n	800210c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020e2:	f023 0302 	bic.w	r3, r3, #2
 80020e6:	f043 0202 	orr.w	r2, r3, #2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fbc4 	bl	800287c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
 800210a:	e001      	b.n	8002110 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_ADC_Start+0x1a>
 800213a:	2302      	movs	r3, #2
 800213c:	e097      	b.n	800226e <HAL_ADC_Start+0x14a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d018      	beq.n	8002186 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002164:	4b45      	ldr	r3, [pc, #276]	; (800227c <HAL_ADC_Start+0x158>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a45      	ldr	r2, [pc, #276]	; (8002280 <HAL_ADC_Start+0x15c>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0c9a      	lsrs	r2, r3, #18
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002178:	e002      	b.n	8002180 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	3b01      	subs	r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f9      	bne.n	800217a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b01      	cmp	r3, #1
 8002192:	d15f      	bne.n	8002254 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d2:	d106      	bne.n	80021e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	f023 0206 	bic.w	r2, r3, #6
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	645a      	str	r2, [r3, #68]	; 0x44
 80021e0:	e002      	b.n	80021e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_ADC_Start+0x160>)
 80021f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10f      	bne.n	800222a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d129      	bne.n	800226c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	e020      	b.n	800226c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a16      	ldr	r2, [pc, #88]	; (8002288 <HAL_ADC_Start+0x164>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d11b      	bne.n	800226c <HAL_ADC_Start+0x148>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d114      	bne.n	800226c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	e00b      	b.n	800226c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f043 0210 	orr.w	r2, r3, #16
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000000 	.word	0x20000000
 8002280:	431bde83 	.word	0x431bde83
 8002284:	40012300 	.word	0x40012300
 8002288:	40012000 	.word	0x40012000

0800228c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a8:	d113      	bne.n	80022d2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b8:	d10b      	bne.n	80022d2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f043 0220 	orr.w	r2, r3, #32
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e063      	b.n	800239a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80022d2:	f7ff feb3 	bl	800203c <HAL_GetTick>
 80022d6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022d8:	e021      	b.n	800231e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d01d      	beq.n	800231e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_ADC_PollForConversion+0x6c>
 80022e8:	f7ff fea8 	bl	800203c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d212      	bcs.n	800231e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b02      	cmp	r3, #2
 8002304:	d00b      	beq.n	800231e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f043 0204 	orr.w	r2, r3, #4
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e03d      	b.n	800239a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b02      	cmp	r3, #2
 800232a:	d1d6      	bne.n	80022da <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0212 	mvn.w	r2, #18
 8002334:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d123      	bne.n	8002398 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002354:	2b00      	cmp	r3, #0
 8002356:	d11f      	bne.n	8002398 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002370:	2b00      	cmp	r3, #0
 8002372:	d111      	bne.n	8002398 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d049      	beq.n	800246c <HAL_ADC_IRQHandler+0xca>
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d046      	beq.n	800246c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d105      	bne.n	80023f6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d12b      	bne.n	800245c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002408:	2b00      	cmp	r3, #0
 800240a:	d127      	bne.n	800245c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002424:	2b00      	cmp	r3, #0
 8002426:	d119      	bne.n	800245c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0220 	bic.w	r2, r2, #32
 8002436:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f8bd 	bl	80025dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f06f 0212 	mvn.w	r2, #18
 800246a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d057      	beq.n	8002532 <HAL_ADC_IRQHandler+0x190>
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d054      	beq.n	8002532 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f003 0310 	and.w	r3, r3, #16
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d139      	bne.n	8002522 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d006      	beq.n	80024ca <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d12b      	bne.n	8002522 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d124      	bne.n	8002522 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d11d      	bne.n	8002522 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d119      	bne.n	8002522 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024fc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f043 0201 	orr.w	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 faa6 	bl	8002a74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 020c 	mvn.w	r2, #12
 8002530:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002540:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d017      	beq.n	8002578 <HAL_ADC_IRQHandler+0x1d6>
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d014      	beq.n	8002578 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d10d      	bne.n	8002578 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f841 	bl	80025f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f06f 0201 	mvn.w	r2, #1
 8002576:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002586:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d015      	beq.n	80025ba <HAL_ADC_IRQHandler+0x218>
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d012      	beq.n	80025ba <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f043 0202 	orr.w	r2, r3, #2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0220 	mvn.w	r2, #32
 80025a8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f82a 	bl	8002604 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0220 	mvn.w	r2, #32
 80025b8:	601a      	str	r2, [r3, #0]
  }
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1c>
 8002630:	2302      	movs	r3, #2
 8002632:	e113      	b.n	800285c <HAL_ADC_ConfigChannel+0x244>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b09      	cmp	r3, #9
 8002642:	d925      	bls.n	8002690 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68d9      	ldr	r1, [r3, #12]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	3b1e      	subs	r3, #30
 800265a:	2207      	movs	r2, #7
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43da      	mvns	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	400a      	ands	r2, r1
 8002668:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68d9      	ldr	r1, [r3, #12]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	4618      	mov	r0, r3
 800267c:	4603      	mov	r3, r0
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4403      	add	r3, r0
 8002682:	3b1e      	subs	r3, #30
 8002684:	409a      	lsls	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	e022      	b.n	80026d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6919      	ldr	r1, [r3, #16]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	4613      	mov	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4413      	add	r3, r2
 80026a4:	2207      	movs	r2, #7
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	400a      	ands	r2, r1
 80026b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6919      	ldr	r1, [r3, #16]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4403      	add	r3, r0
 80026cc:	409a      	lsls	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d824      	bhi.n	8002728 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	3b05      	subs	r3, #5
 80026f0:	221f      	movs	r2, #31
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43da      	mvns	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	400a      	ands	r2, r1
 80026fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	4618      	mov	r0, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	3b05      	subs	r3, #5
 800271a:	fa00 f203 	lsl.w	r2, r0, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	635a      	str	r2, [r3, #52]	; 0x34
 8002726:	e04c      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b0c      	cmp	r3, #12
 800272e:	d824      	bhi.n	800277a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	3b23      	subs	r3, #35	; 0x23
 8002742:	221f      	movs	r2, #31
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43da      	mvns	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	400a      	ands	r2, r1
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	b29b      	uxth	r3, r3
 800275e:	4618      	mov	r0, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	3b23      	subs	r3, #35	; 0x23
 800276c:	fa00 f203 	lsl.w	r2, r0, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
 8002778:	e023      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	3b41      	subs	r3, #65	; 0x41
 800278c:	221f      	movs	r2, #31
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	400a      	ands	r2, r1
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	3b41      	subs	r3, #65	; 0x41
 80027b6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027c2:	4b29      	ldr	r3, [pc, #164]	; (8002868 <HAL_ADC_ConfigChannel+0x250>)
 80027c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a28      	ldr	r2, [pc, #160]	; (800286c <HAL_ADC_ConfigChannel+0x254>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d10f      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x1d8>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b12      	cmp	r3, #18
 80027d6:	d10b      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1d      	ldr	r2, [pc, #116]	; (800286c <HAL_ADC_ConfigChannel+0x254>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d12b      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x23a>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <HAL_ADC_ConfigChannel+0x258>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d003      	beq.n	800280c <HAL_ADC_ConfigChannel+0x1f4>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b11      	cmp	r3, #17
 800280a:	d122      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_ADC_ConfigChannel+0x258>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d111      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <HAL_ADC_ConfigChannel+0x25c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a11      	ldr	r2, [pc, #68]	; (8002878 <HAL_ADC_ConfigChannel+0x260>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	0c9a      	lsrs	r2, r3, #18
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002844:	e002      	b.n	800284c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3b01      	subs	r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f9      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	40012300 	.word	0x40012300
 800286c:	40012000 	.word	0x40012000
 8002870:	10000012 	.word	0x10000012
 8002874:	20000000 	.word	0x20000000
 8002878:	431bde83 	.word	0x431bde83

0800287c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002884:	4b79      	ldr	r3, [pc, #484]	; (8002a6c <ADC_Init+0x1f0>)
 8002886:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	431a      	orrs	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	021a      	lsls	r2, r3, #8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6899      	ldr	r1, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <ADC_Init+0x1f4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d022      	beq.n	800295a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002922:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6899      	ldr	r1, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6899      	ldr	r1, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	e00f      	b.n	800297a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002978:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0202 	bic.w	r2, r2, #2
 8002988:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	7e1b      	ldrb	r3, [r3, #24]
 8002994:	005a      	lsls	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01b      	beq.n	80029e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	3b01      	subs	r3, #1
 80029d4:	035a      	lsls	r2, r3, #13
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	e007      	b.n	80029f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	051a      	lsls	r2, r3, #20
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6899      	ldr	r1, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a32:	025a      	lsls	r2, r3, #9
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6899      	ldr	r1, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	029a      	lsls	r2, r3, #10
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	609a      	str	r2, [r3, #8]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40012300 	.word	0x40012300
 8002a70:	0f000001 	.word	0x0f000001

08002a74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aba:	4a04      	ldr	r2, [pc, #16]	; (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	60d3      	str	r3, [r2, #12]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	f003 0307 	and.w	r3, r3, #7
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db0b      	blt.n	8002b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	4907      	ldr	r1, [pc, #28]	; (8002b24 <__NVIC_EnableIRQ+0x38>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000e100 	.word	0xe000e100

08002b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db0a      	blt.n	8002b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	490c      	ldr	r1, [pc, #48]	; (8002b74 <__NVIC_SetPriority+0x4c>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b50:	e00a      	b.n	8002b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4908      	ldr	r1, [pc, #32]	; (8002b78 <__NVIC_SetPriority+0x50>)
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	3b04      	subs	r3, #4
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	440b      	add	r3, r1
 8002b66:	761a      	strb	r2, [r3, #24]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000e100 	.word	0xe000e100
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f1c3 0307 	rsb	r3, r3, #7
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	bf28      	it	cs
 8002b9a:	2304      	movcs	r3, #4
 8002b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d902      	bls.n	8002bac <NVIC_EncodePriority+0x30>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3b03      	subs	r3, #3
 8002baa:	e000      	b.n	8002bae <NVIC_EncodePriority+0x32>
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	43d9      	mvns	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	4313      	orrs	r3, r2
         );
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf4:	d301      	bcc.n	8002bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00f      	b.n	8002c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <SysTick_Config+0x40>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c02:	210f      	movs	r1, #15
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f7ff ff8e 	bl	8002b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <SysTick_Config+0x40>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <SysTick_Config+0x40>)
 8002c14:	2207      	movs	r2, #7
 8002c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000e010 	.word	0xe000e010

08002c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ff29 	bl	8002a88 <__NVIC_SetPriorityGrouping>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c50:	f7ff ff3e 	bl	8002ad0 <__NVIC_GetPriorityGrouping>
 8002c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7ff ff8e 	bl	8002b7c <NVIC_EncodePriority>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff5d 	bl	8002b28 <__NVIC_SetPriority>
}
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff31 	bl	8002aec <__NVIC_EnableIRQ>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ffa2 	bl	8002be4 <SysTick_Config>
 8002ca0:	4603      	mov	r3, r0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cb8:	f7ff f9c0 	bl	800203c <HAL_GetTick>
 8002cbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d008      	beq.n	8002cdc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2280      	movs	r2, #128	; 0x80
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e052      	b.n	8002d82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0216 	bic.w	r2, r2, #22
 8002cea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cfa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <HAL_DMA_Abort+0x62>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0208 	bic.w	r2, r2, #8
 8002d1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d2c:	e013      	b.n	8002d56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d2e:	f7ff f985 	bl	800203c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	d90c      	bls.n	8002d56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2203      	movs	r2, #3
 8002d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e015      	b.n	8002d82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1e4      	bne.n	8002d2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	223f      	movs	r2, #63	; 0x3f
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d004      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e00c      	b.n	8002dc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2205      	movs	r2, #5
 8002dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ddc:	b2db      	uxtb	r3, r3
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	e159      	b.n	80030bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e08:	2201      	movs	r2, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	f040 8148 	bne.w	80030b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d005      	beq.n	8002e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d130      	bne.n	8002ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	2203      	movs	r2, #3
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e74:	2201      	movs	r2, #1
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 0201 	and.w	r2, r3, #1
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d017      	beq.n	8002edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d123      	bne.n	8002f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	08da      	lsrs	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3208      	adds	r2, #8
 8002ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	220f      	movs	r2, #15
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	08da      	lsrs	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3208      	adds	r2, #8
 8002f2a:	69b9      	ldr	r1, [r7, #24]
 8002f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 0203 	and.w	r2, r3, #3
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80a2 	beq.w	80030b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	4b57      	ldr	r3, [pc, #348]	; (80030d4 <HAL_GPIO_Init+0x2e8>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	4a56      	ldr	r2, [pc, #344]	; (80030d4 <HAL_GPIO_Init+0x2e8>)
 8002f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f80:	6453      	str	r3, [r2, #68]	; 0x44
 8002f82:	4b54      	ldr	r3, [pc, #336]	; (80030d4 <HAL_GPIO_Init+0x2e8>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f8e:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_GPIO_Init+0x2ec>)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	089b      	lsrs	r3, r3, #2
 8002f94:	3302      	adds	r3, #2
 8002f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a49      	ldr	r2, [pc, #292]	; (80030dc <HAL_GPIO_Init+0x2f0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d019      	beq.n	8002fee <HAL_GPIO_Init+0x202>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a48      	ldr	r2, [pc, #288]	; (80030e0 <HAL_GPIO_Init+0x2f4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <HAL_GPIO_Init+0x1fe>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a47      	ldr	r2, [pc, #284]	; (80030e4 <HAL_GPIO_Init+0x2f8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00d      	beq.n	8002fe6 <HAL_GPIO_Init+0x1fa>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a46      	ldr	r2, [pc, #280]	; (80030e8 <HAL_GPIO_Init+0x2fc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d007      	beq.n	8002fe2 <HAL_GPIO_Init+0x1f6>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a45      	ldr	r2, [pc, #276]	; (80030ec <HAL_GPIO_Init+0x300>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_GPIO_Init+0x1f2>
 8002fda:	2304      	movs	r3, #4
 8002fdc:	e008      	b.n	8002ff0 <HAL_GPIO_Init+0x204>
 8002fde:	2307      	movs	r3, #7
 8002fe0:	e006      	b.n	8002ff0 <HAL_GPIO_Init+0x204>
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e004      	b.n	8002ff0 <HAL_GPIO_Init+0x204>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e002      	b.n	8002ff0 <HAL_GPIO_Init+0x204>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_GPIO_Init+0x204>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	f002 0203 	and.w	r2, r2, #3
 8002ff6:	0092      	lsls	r2, r2, #2
 8002ff8:	4093      	lsls	r3, r2
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003000:	4935      	ldr	r1, [pc, #212]	; (80030d8 <HAL_GPIO_Init+0x2ec>)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	089b      	lsrs	r3, r3, #2
 8003006:	3302      	adds	r3, #2
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800300e:	4b38      	ldr	r3, [pc, #224]	; (80030f0 <HAL_GPIO_Init+0x304>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003032:	4a2f      	ldr	r2, [pc, #188]	; (80030f0 <HAL_GPIO_Init+0x304>)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003038:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_GPIO_Init+0x304>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800305c:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <HAL_GPIO_Init+0x304>)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003062:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <HAL_GPIO_Init+0x304>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003086:	4a1a      	ldr	r2, [pc, #104]	; (80030f0 <HAL_GPIO_Init+0x304>)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800308c:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <HAL_GPIO_Init+0x304>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030b0:	4a0f      	ldr	r2, [pc, #60]	; (80030f0 <HAL_GPIO_Init+0x304>)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3301      	adds	r3, #1
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	2b0f      	cmp	r3, #15
 80030c0:	f67f aea2 	bls.w	8002e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40013800 	.word	0x40013800
 80030dc:	40020000 	.word	0x40020000
 80030e0:	40020400 	.word	0x40020400
 80030e4:	40020800 	.word	0x40020800
 80030e8:	40020c00 	.word	0x40020c00
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40013c00 	.word	0x40013c00

080030f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030fe:	4b08      	ldr	r3, [pc, #32]	; (8003120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800310a:	4a05      	ldr	r2, [pc, #20]	; (8003120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe f96e 	bl	80013f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40013c00 	.word	0x40013c00

08003124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e12b      	b.n	800338e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fe fbfe 	bl	800194c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2224      	movs	r2, #36	; 0x24
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0201 	bic.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003176:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003186:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003188:	f002 fdb0 	bl	8005cec <HAL_RCC_GetPCLK1Freq>
 800318c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4a81      	ldr	r2, [pc, #516]	; (8003398 <HAL_I2C_Init+0x274>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d807      	bhi.n	80031a8 <HAL_I2C_Init+0x84>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4a80      	ldr	r2, [pc, #512]	; (800339c <HAL_I2C_Init+0x278>)
 800319c:	4293      	cmp	r3, r2
 800319e:	bf94      	ite	ls
 80031a0:	2301      	movls	r3, #1
 80031a2:	2300      	movhi	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e006      	b.n	80031b6 <HAL_I2C_Init+0x92>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a7d      	ldr	r2, [pc, #500]	; (80033a0 <HAL_I2C_Init+0x27c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	bf94      	ite	ls
 80031b0:	2301      	movls	r3, #1
 80031b2:	2300      	movhi	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0e7      	b.n	800338e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4a78      	ldr	r2, [pc, #480]	; (80033a4 <HAL_I2C_Init+0x280>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0c9b      	lsrs	r3, r3, #18
 80031c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4a6a      	ldr	r2, [pc, #424]	; (8003398 <HAL_I2C_Init+0x274>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d802      	bhi.n	80031f8 <HAL_I2C_Init+0xd4>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3301      	adds	r3, #1
 80031f6:	e009      	b.n	800320c <HAL_I2C_Init+0xe8>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
 8003202:	4a69      	ldr	r2, [pc, #420]	; (80033a8 <HAL_I2C_Init+0x284>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	3301      	adds	r3, #1
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	430b      	orrs	r3, r1
 8003212:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800321e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	495c      	ldr	r1, [pc, #368]	; (8003398 <HAL_I2C_Init+0x274>)
 8003228:	428b      	cmp	r3, r1
 800322a:	d819      	bhi.n	8003260 <HAL_I2C_Init+0x13c>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1e59      	subs	r1, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	fbb1 f3f3 	udiv	r3, r1, r3
 800323a:	1c59      	adds	r1, r3, #1
 800323c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003240:	400b      	ands	r3, r1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_I2C_Init+0x138>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1e59      	subs	r1, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fbb1 f3f3 	udiv	r3, r1, r3
 8003254:	3301      	adds	r3, #1
 8003256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325a:	e051      	b.n	8003300 <HAL_I2C_Init+0x1dc>
 800325c:	2304      	movs	r3, #4
 800325e:	e04f      	b.n	8003300 <HAL_I2C_Init+0x1dc>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d111      	bne.n	800328c <HAL_I2C_Init+0x168>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1e58      	subs	r0, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6859      	ldr	r1, [r3, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	440b      	add	r3, r1
 8003276:	fbb0 f3f3 	udiv	r3, r0, r3
 800327a:	3301      	adds	r3, #1
 800327c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e012      	b.n	80032b2 <HAL_I2C_Init+0x18e>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	0099      	lsls	r1, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf0c      	ite	eq
 80032ac:	2301      	moveq	r3, #1
 80032ae:	2300      	movne	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_I2C_Init+0x196>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e022      	b.n	8003300 <HAL_I2C_Init+0x1dc>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10e      	bne.n	80032e0 <HAL_I2C_Init+0x1bc>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1e58      	subs	r0, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6859      	ldr	r1, [r3, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	440b      	add	r3, r1
 80032d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032de:	e00f      	b.n	8003300 <HAL_I2C_Init+0x1dc>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1e58      	subs	r0, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6859      	ldr	r1, [r3, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	0099      	lsls	r1, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f6:	3301      	adds	r3, #1
 80032f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	6809      	ldr	r1, [r1, #0]
 8003304:	4313      	orrs	r3, r2
 8003306:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800332e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6911      	ldr	r1, [r2, #16]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68d2      	ldr	r2, [r2, #12]
 800333a:	4311      	orrs	r1, r2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	430b      	orrs	r3, r1
 8003342:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	000186a0 	.word	0x000186a0
 800339c:	001e847f 	.word	0x001e847f
 80033a0:	003d08ff 	.word	0x003d08ff
 80033a4:	431bde83 	.word	0x431bde83
 80033a8:	10624dd3 	.word	0x10624dd3

080033ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08c      	sub	sp, #48	; 0x30
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	461a      	mov	r2, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	817b      	strh	r3, [r7, #10]
 80033be:	460b      	mov	r3, r1
 80033c0:	813b      	strh	r3, [r7, #8]
 80033c2:	4613      	mov	r3, r2
 80033c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033c6:	f7fe fe39 	bl	800203c <HAL_GetTick>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	f040 8208 	bne.w	80037ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	2319      	movs	r3, #25
 80033e0:	2201      	movs	r2, #1
 80033e2:	497b      	ldr	r1, [pc, #492]	; (80035d0 <HAL_I2C_Mem_Read+0x224>)
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f001 fe67 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80033f0:	2302      	movs	r3, #2
 80033f2:	e1fb      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_I2C_Mem_Read+0x56>
 80033fe:	2302      	movs	r3, #2
 8003400:	e1f4      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b01      	cmp	r3, #1
 8003416:	d007      	beq.n	8003428 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003436:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2222      	movs	r2, #34	; 0x22
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2240      	movs	r2, #64	; 0x40
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4a5b      	ldr	r2, [pc, #364]	; (80035d4 <HAL_I2C_Mem_Read+0x228>)
 8003468:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800346a:	88f8      	ldrh	r0, [r7, #6]
 800346c:	893a      	ldrh	r2, [r7, #8]
 800346e:	8979      	ldrh	r1, [r7, #10]
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	4603      	mov	r3, r0
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f001 fc8c 	bl	8004d98 <I2C_RequestMemoryRead>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e1b0      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	2b00      	cmp	r3, #0
 8003490:	d113      	bne.n	80034ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003492:	2300      	movs	r3, #0
 8003494:	623b      	str	r3, [r7, #32]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	623b      	str	r3, [r7, #32]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	623b      	str	r3, [r7, #32]
 80034a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e184      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d11b      	bne.n	80034fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e164      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d11b      	bne.n	800353a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003510:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003520:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	e144      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003550:	e138      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	2b03      	cmp	r3, #3
 8003558:	f200 80f1 	bhi.w	800373e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	2b01      	cmp	r3, #1
 8003562:	d123      	bne.n	80035ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003566:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f001 feef 	bl	800534c <I2C_WaitOnRXNEFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e139      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035aa:	e10b      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d14e      	bne.n	8003652 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ba:	2200      	movs	r2, #0
 80035bc:	4906      	ldr	r1, [pc, #24]	; (80035d8 <HAL_I2C_Mem_Read+0x22c>)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f001 fd7a 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e10e      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
 80035ce:	bf00      	nop
 80035d0:	00100002 	.word	0x00100002
 80035d4:	ffff0000 	.word	0xffff0000
 80035d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003650:	e0b8      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	2200      	movs	r2, #0
 800365a:	4966      	ldr	r1, [pc, #408]	; (80037f4 <HAL_I2C_Mem_Read+0x448>)
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f001 fd2b 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0bf      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b4:	2200      	movs	r2, #0
 80036b6:	494f      	ldr	r1, [pc, #316]	; (80037f4 <HAL_I2C_Mem_Read+0x448>)
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f001 fcfd 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e091      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800373c:	e042      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800373e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003740:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f001 fe02 	bl	800534c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e04c      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b04      	cmp	r3, #4
 8003790:	d118      	bne.n	80037c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f47f aec2 	bne.w	8003552 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3728      	adds	r7, #40	; 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	00010004 	.word	0x00010004

080037f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003818:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003820:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b10      	cmp	r3, #16
 8003826:	d003      	beq.n	8003830 <HAL_I2C_EV_IRQHandler+0x38>
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b40      	cmp	r3, #64	; 0x40
 800382c:	f040 80c1 	bne.w	80039b2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <HAL_I2C_EV_IRQHandler+0x6e>
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003850:	d003      	beq.n	800385a <HAL_I2C_EV_IRQHandler+0x62>
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003858:	d101      	bne.n	800385e <HAL_I2C_EV_IRQHandler+0x66>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_I2C_EV_IRQHandler+0x68>
 800385e:	2300      	movs	r3, #0
 8003860:	2b01      	cmp	r3, #1
 8003862:	f000 8132 	beq.w	8003aca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00c      	beq.n	800388a <HAL_I2C_EV_IRQHandler+0x92>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	0a5b      	lsrs	r3, r3, #9
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d006      	beq.n	800388a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f001 fdea 	bl	8005456 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fcdc 	bl	8004240 <I2C_Master_SB>
 8003888:	e092      	b.n	80039b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	08db      	lsrs	r3, r3, #3
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_I2C_EV_IRQHandler+0xb2>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	0a5b      	lsrs	r3, r3, #9
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fd52 	bl	800434c <I2C_Master_ADD10>
 80038a8:	e082      	b.n	80039b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_I2C_EV_IRQHandler+0xd2>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	0a5b      	lsrs	r3, r3, #9
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fd6c 	bl	80043a0 <I2C_Master_ADDR>
 80038c8:	e072      	b.n	80039b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d03b      	beq.n	800394e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e4:	f000 80f3 	beq.w	8003ace <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	09db      	lsrs	r3, r3, #7
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00f      	beq.n	8003914 <HAL_I2C_EV_IRQHandler+0x11c>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	0a9b      	lsrs	r3, r3, #10
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d009      	beq.n	8003914 <HAL_I2C_EV_IRQHandler+0x11c>
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d103      	bne.n	8003914 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f94c 	bl	8003baa <I2C_MasterTransmit_TXE>
 8003912:	e04d      	b.n	80039b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80d6 	beq.w	8003ace <HAL_I2C_EV_IRQHandler+0x2d6>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	0a5b      	lsrs	r3, r3, #9
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80cf 	beq.w	8003ace <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003930:	7bbb      	ldrb	r3, [r7, #14]
 8003932:	2b21      	cmp	r3, #33	; 0x21
 8003934:	d103      	bne.n	800393e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f9d3 	bl	8003ce2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800393c:	e0c7      	b.n	8003ace <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	f040 80c4 	bne.w	8003ace <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fa41 	bl	8003dce <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800394c:	e0bf      	b.n	8003ace <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800395c:	f000 80b7 	beq.w	8003ace <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	099b      	lsrs	r3, r3, #6
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00f      	beq.n	800398c <HAL_I2C_EV_IRQHandler+0x194>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	0a9b      	lsrs	r3, r3, #10
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d009      	beq.n	800398c <HAL_I2C_EV_IRQHandler+0x194>
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fab6 	bl	8003ef6 <I2C_MasterReceive_RXNE>
 800398a:	e011      	b.n	80039b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 809a 	beq.w	8003ace <HAL_I2C_EV_IRQHandler+0x2d6>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	0a5b      	lsrs	r3, r3, #9
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8093 	beq.w	8003ace <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fb5f 	bl	800406c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ae:	e08e      	b.n	8003ace <HAL_I2C_EV_IRQHandler+0x2d6>
 80039b0:	e08d      	b.n	8003ace <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d004      	beq.n	80039c4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	e007      	b.n	80039d4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	085b      	lsrs	r3, r3, #1
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d012      	beq.n	8003a06 <HAL_I2C_EV_IRQHandler+0x20e>
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	0a5b      	lsrs	r3, r3, #9
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00c      	beq.n	8003a06 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80039fc:	69b9      	ldr	r1, [r7, #24]
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 ff1d 	bl	800483e <I2C_Slave_ADDR>
 8003a04:	e066      	b.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <HAL_I2C_EV_IRQHandler+0x22e>
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	0a5b      	lsrs	r3, r3, #9
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 ff58 	bl	80048d4 <I2C_Slave_STOPF>
 8003a24:	e056      	b.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a26:	7bbb      	ldrb	r3, [r7, #14]
 8003a28:	2b21      	cmp	r3, #33	; 0x21
 8003a2a:	d002      	beq.n	8003a32 <HAL_I2C_EV_IRQHandler+0x23a>
 8003a2c:	7bbb      	ldrb	r3, [r7, #14]
 8003a2e:	2b29      	cmp	r3, #41	; 0x29
 8003a30:	d125      	bne.n	8003a7e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	09db      	lsrs	r3, r3, #7
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00f      	beq.n	8003a5e <HAL_I2C_EV_IRQHandler+0x266>
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	0a9b      	lsrs	r3, r3, #10
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_I2C_EV_IRQHandler+0x266>
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fe33 	bl	80046c2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a5c:	e039      	b.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	089b      	lsrs	r3, r3, #2
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d033      	beq.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x2da>
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	0a5b      	lsrs	r3, r3, #9
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02d      	beq.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fe60 	bl	800473c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a7c:	e029      	b.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	099b      	lsrs	r3, r3, #6
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00f      	beq.n	8003aaa <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	0a9b      	lsrs	r3, r3, #10
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	089b      	lsrs	r3, r3, #2
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fe6b 	bl	800477e <I2C_SlaveReceive_RXNE>
 8003aa8:	e014      	b.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00e      	beq.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	0a5b      	lsrs	r3, r3, #9
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d008      	beq.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fe99 	bl	80047fa <I2C_SlaveReceive_BTF>
 8003ac8:	e004      	b.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003aca:	bf00      	nop
 8003acc:	e002      	b.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ad2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	70fb      	strb	r3, [r7, #3]
 8003b36:	4613      	mov	r3, r2
 8003b38:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bc0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d150      	bne.n	8003c72 <I2C_MasterTransmit_TXE+0xc8>
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b21      	cmp	r3, #33	; 0x21
 8003bd4:	d14d      	bne.n	8003c72 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d01d      	beq.n	8003c18 <I2C_MasterTransmit_TXE+0x6e>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d01a      	beq.n	8003c18 <I2C_MasterTransmit_TXE+0x6e>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003be8:	d016      	beq.n	8003c18 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bf8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2211      	movs	r2, #17
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ff62 	bl	8003ada <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c16:	e060      	b.n	8003cda <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c26:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c36:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d107      	bne.n	8003c62 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff ff7d 	bl	8003b5a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c60:	e03b      	b.n	8003cda <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff ff35 	bl	8003ada <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c70:	e033      	b.n	8003cda <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	2b21      	cmp	r3, #33	; 0x21
 8003c76:	d005      	beq.n	8003c84 <I2C_MasterTransmit_TXE+0xda>
 8003c78:	7bbb      	ldrb	r3, [r7, #14]
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d12d      	bne.n	8003cda <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	2b22      	cmp	r3, #34	; 0x22
 8003c82:	d12a      	bne.n	8003cda <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d108      	bne.n	8003ca0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003c9e:	e01c      	b.n	8003cda <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d103      	bne.n	8003cb4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f88e 	bl	8003dce <I2C_MemoryTransmit_TXE_BTF>
}
 8003cb2:	e012      	b.n	8003cda <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	781a      	ldrb	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cd8:	e7ff      	b.n	8003cda <I2C_MasterTransmit_TXE+0x130>
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b21      	cmp	r3, #33	; 0x21
 8003cfa:	d164      	bne.n	8003dc6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d012      	beq.n	8003d2c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	781a      	ldrb	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003d2a:	e04c      	b.n	8003dc6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d01d      	beq.n	8003d6e <I2C_MasterTransmit_BTF+0x8c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d01a      	beq.n	8003d6e <I2C_MasterTransmit_BTF+0x8c>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d3e:	d016      	beq.n	8003d6e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d4e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2211      	movs	r2, #17
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff feb7 	bl	8003ada <HAL_I2C_MasterTxCpltCallback>
}
 8003d6c:	e02b      	b.n	8003dc6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d7c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d107      	bne.n	8003db8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff fed2 	bl	8003b5a <HAL_I2C_MemTxCpltCallback>
}
 8003db6:	e006      	b.n	8003dc6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fe8a 	bl	8003ada <HAL_I2C_MasterTxCpltCallback>
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ddc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d11d      	bne.n	8003e22 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10b      	bne.n	8003e06 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfe:	1c9a      	adds	r2, r3, #2
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003e04:	e073      	b.n	8003eee <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	121b      	asrs	r3, r3, #8
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e20:	e065      	b.n	8003eee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d10b      	bne.n	8003e42 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e40:	e055      	b.n	8003eee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d151      	bne.n	8003eee <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	2b22      	cmp	r3, #34	; 0x22
 8003e4e:	d10d      	bne.n	8003e6c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e5e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e6a:	e040      	b.n	8003eee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d015      	beq.n	8003ea2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	2b21      	cmp	r3, #33	; 0x21
 8003e7a:	d112      	bne.n	8003ea2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	781a      	ldrb	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ea0:	e025      	b.n	8003eee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d120      	bne.n	8003eee <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	2b21      	cmp	r3, #33	; 0x21
 8003eb0:	d11d      	bne.n	8003eee <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ec0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fe36 	bl	8003b5a <HAL_I2C_MemTxCpltCallback>
}
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b22      	cmp	r3, #34	; 0x22
 8003f08:	f040 80ac 	bne.w	8004064 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d921      	bls.n	8003f5e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	f040 808c 	bne.w	8004064 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003f5c:	e082      	b.n	8004064 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d075      	beq.n	8004052 <I2C_MasterReceive_RXNE+0x15c>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d002      	beq.n	8003f72 <I2C_MasterReceive_RXNE+0x7c>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d16f      	bne.n	8004052 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f001 f9b8 	bl	80052e8 <I2C_WaitOnSTOPRequestThroughIT>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d142      	bne.n	8004004 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d10a      	bne.n	8003fee <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff fdc1 	bl	8003b6e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003fec:	e03a      	b.n	8004064 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2212      	movs	r2, #18
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff fd76 	bl	8003aee <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004002:	e02f      	b.n	8004064 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004012:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff fd99 	bl	8003b82 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004050:	e008      	b.n	8004064 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004060:	605a      	str	r2, [r3, #4]
}
 8004062:	e7ff      	b.n	8004064 <I2C_MasterReceive_RXNE+0x16e>
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b04      	cmp	r3, #4
 8004082:	d11b      	bne.n	80040bc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004092:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80040ba:	e0bd      	b.n	8004238 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d129      	bne.n	800411a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d00a      	beq.n	80040f2 <I2C_MasterReceive_BTF+0x86>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d007      	beq.n	80040f2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004118:	e08e      	b.n	8004238 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d176      	bne.n	8004212 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d002      	beq.n	8004130 <I2C_MasterReceive_BTF+0xc4>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b10      	cmp	r3, #16
 800412e:	d108      	bne.n	8004142 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e019      	b.n	8004176 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b04      	cmp	r3, #4
 8004146:	d002      	beq.n	800414e <I2C_MasterReceive_BTF+0xe2>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d108      	bne.n	8004160 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e00a      	b.n	8004176 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b10      	cmp	r3, #16
 8004164:	d007      	beq.n	8004176 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004174:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041d0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b40      	cmp	r3, #64	; 0x40
 80041e4:	d10a      	bne.n	80041fc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fcba 	bl	8003b6e <HAL_I2C_MemRxCpltCallback>
}
 80041fa:	e01d      	b.n	8004238 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2212      	movs	r2, #18
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff fc6f 	bl	8003aee <HAL_I2C_MasterRxCpltCallback>
}
 8004210:	e012      	b.n	8004238 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	d117      	bne.n	8004284 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004260:	b2db      	uxtb	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800426c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800426e:	e067      	b.n	8004340 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	b2da      	uxtb	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	611a      	str	r2, [r3, #16]
}
 8004282:	e05d      	b.n	8004340 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800428c:	d133      	bne.n	80042f6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b21      	cmp	r3, #33	; 0x21
 8004298:	d109      	bne.n	80042ae <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042aa:	611a      	str	r2, [r3, #16]
 80042ac:	e008      	b.n	80042c0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <I2C_Master_SB+0x92>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d108      	bne.n	80042e4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d032      	beq.n	8004340 <I2C_Master_SB+0x100>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d02d      	beq.n	8004340 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042f2:	605a      	str	r2, [r3, #4]
}
 80042f4:	e024      	b.n	8004340 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10e      	bne.n	800431c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	b29b      	uxth	r3, r3
 8004304:	11db      	asrs	r3, r3, #7
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f003 0306 	and.w	r3, r3, #6
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f063 030f 	orn	r3, r3, #15
 8004312:	b2da      	uxtb	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	611a      	str	r2, [r3, #16]
}
 800431a:	e011      	b.n	8004340 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004320:	2b01      	cmp	r3, #1
 8004322:	d10d      	bne.n	8004340 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	b29b      	uxth	r3, r3
 800432a:	11db      	asrs	r3, r3, #7
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f003 0306 	and.w	r3, r3, #6
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f063 030e 	orn	r3, r3, #14
 8004338:	b2da      	uxtb	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	611a      	str	r2, [r3, #16]
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004358:	b2da      	uxtb	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <I2C_Master_ADD10+0x26>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d108      	bne.n	8004384 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00c      	beq.n	8004394 <I2C_Master_ADD10+0x48>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004392:	605a      	str	r2, [r3, #4]
  }
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b091      	sub	sp, #68	; 0x44
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b22      	cmp	r3, #34	; 0x22
 80043c8:	f040 8169 	bne.w	800469e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <I2C_Master_ADDR+0x54>
 80043d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80043d8:	2b40      	cmp	r3, #64	; 0x40
 80043da:	d10b      	bne.n	80043f4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043dc:	2300      	movs	r3, #0
 80043de:	633b      	str	r3, [r7, #48]	; 0x30
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	633b      	str	r3, [r7, #48]	; 0x30
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	e160      	b.n	80046b6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d11d      	bne.n	8004438 <I2C_Master_ADDR+0x98>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004404:	d118      	bne.n	8004438 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004406:	2300      	movs	r3, #0
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800442a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	651a      	str	r2, [r3, #80]	; 0x50
 8004436:	e13e      	b.n	80046b6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d113      	bne.n	800446a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004442:	2300      	movs	r3, #0
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e115      	b.n	8004696 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	f040 808a 	bne.w	800458a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004478:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800447c:	d137      	bne.n	80044ee <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449c:	d113      	bne.n	80044c6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ac:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ae:	2300      	movs	r3, #0
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	e0e7      	b.n	8004696 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c6:	2300      	movs	r3, #0
 80044c8:	623b      	str	r3, [r7, #32]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	623b      	str	r3, [r7, #32]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	e0d3      	b.n	8004696 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d02e      	beq.n	8004552 <I2C_Master_ADDR+0x1b2>
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d02b      	beq.n	8004552 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80044fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fc:	2b12      	cmp	r3, #18
 80044fe:	d102      	bne.n	8004506 <I2C_Master_ADDR+0x166>
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	2b01      	cmp	r3, #1
 8004504:	d125      	bne.n	8004552 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	2b04      	cmp	r3, #4
 800450a:	d00e      	beq.n	800452a <I2C_Master_ADDR+0x18a>
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	2b02      	cmp	r3, #2
 8004510:	d00b      	beq.n	800452a <I2C_Master_ADDR+0x18a>
 8004512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004514:	2b10      	cmp	r3, #16
 8004516:	d008      	beq.n	800452a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e007      	b.n	800453a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004538:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	61fb      	str	r3, [r7, #28]
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	e0a1      	b.n	8004696 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004560:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e085      	b.n	8004696 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d14d      	bne.n	8004630 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004596:	2b04      	cmp	r3, #4
 8004598:	d016      	beq.n	80045c8 <I2C_Master_ADDR+0x228>
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	2b02      	cmp	r3, #2
 800459e:	d013      	beq.n	80045c8 <I2C_Master_ADDR+0x228>
 80045a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d010      	beq.n	80045c8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	e007      	b.n	80045d8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045d6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045e6:	d117      	bne.n	8004618 <I2C_Master_ADDR+0x278>
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045ee:	d00b      	beq.n	8004608 <I2C_Master_ADDR+0x268>
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d008      	beq.n	8004608 <I2C_Master_ADDR+0x268>
 80045f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d005      	beq.n	8004608 <I2C_Master_ADDR+0x268>
 80045fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d002      	beq.n	8004608 <I2C_Master_ADDR+0x268>
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	2b20      	cmp	r3, #32
 8004606:	d107      	bne.n	8004618 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004616:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	e032      	b.n	8004696 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800463e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464e:	d117      	bne.n	8004680 <I2C_Master_ADDR+0x2e0>
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004656:	d00b      	beq.n	8004670 <I2C_Master_ADDR+0x2d0>
 8004658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465a:	2b01      	cmp	r3, #1
 800465c:	d008      	beq.n	8004670 <I2C_Master_ADDR+0x2d0>
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004660:	2b08      	cmp	r3, #8
 8004662:	d005      	beq.n	8004670 <I2C_Master_ADDR+0x2d0>
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	2b10      	cmp	r3, #16
 8004668:	d002      	beq.n	8004670 <I2C_Master_ADDR+0x2d0>
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	2b20      	cmp	r3, #32
 800466e:	d107      	bne.n	8004680 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800467e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800469c:	e00b      	b.n	80046b6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
}
 80046b4:	e7ff      	b.n	80046b6 <I2C_Master_ADDR+0x316>
 80046b6:	bf00      	nop
 80046b8:	3744      	adds	r7, #68	; 0x44
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d02b      	beq.n	8004734 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	781a      	ldrb	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d114      	bne.n	8004734 <I2C_SlaveTransmit_TXE+0x72>
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	2b29      	cmp	r3, #41	; 0x29
 800470e:	d111      	bne.n	8004734 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2221      	movs	r2, #33	; 0x21
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2228      	movs	r2, #40	; 0x28
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff f9e7 	bl	8003b02 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d011      	beq.n	8004772 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	781a      	ldrb	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d02c      	beq.n	80047f2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d114      	bne.n	80047f2 <I2C_SlaveReceive_RXNE+0x74>
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b2a      	cmp	r3, #42	; 0x2a
 80047cc:	d111      	bne.n	80047f2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2222      	movs	r2, #34	; 0x22
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2228      	movs	r2, #40	; 0x28
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff f992 	bl	8003b16 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d012      	beq.n	8004832 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004848:	2300      	movs	r3, #0
 800484a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004858:	2b28      	cmp	r3, #40	; 0x28
 800485a:	d127      	bne.n	80048ac <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	089b      	lsrs	r3, r3, #2
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004878:	2301      	movs	r3, #1
 800487a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	09db      	lsrs	r3, r3, #7
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	81bb      	strh	r3, [r7, #12]
 800488e:	e002      	b.n	8004896 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800489e:	89ba      	ldrh	r2, [r7, #12]
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	4619      	mov	r1, r3
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff f940 	bl	8003b2a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80048aa:	e00e      	b.n	80048ca <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ac:	2300      	movs	r3, #0
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80048ca:	bf00      	nop
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048f2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80048f4:	2300      	movs	r3, #0
 80048f6:	60bb      	str	r3, [r7, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	60bb      	str	r3, [r7, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004920:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004930:	d172      	bne.n	8004a18 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	2b22      	cmp	r3, #34	; 0x22
 8004936:	d002      	beq.n	800493e <I2C_Slave_STOPF+0x6a>
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	2b2a      	cmp	r3, #42	; 0x2a
 800493c:	d135      	bne.n	80049aa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	b29a      	uxth	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f043 0204 	orr.w	r2, r3, #4
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004970:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fa29 	bl	8002dce <HAL_DMA_GetState>
 800497c:	4603      	mov	r3, r0
 800497e:	2b01      	cmp	r3, #1
 8004980:	d049      	beq.n	8004a16 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	4a69      	ldr	r2, [pc, #420]	; (8004b2c <I2C_Slave_STOPF+0x258>)
 8004988:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	4618      	mov	r0, r3
 8004990:	f7fe f9fb 	bl	8002d8a <HAL_DMA_Abort_IT>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d03d      	beq.n	8004a16 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049a4:	4610      	mov	r0, r2
 80049a6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049a8:	e035      	b.n	8004a16 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f043 0204 	orr.w	r2, r3, #4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe f9f3 	bl	8002dce <HAL_DMA_GetState>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d014      	beq.n	8004a18 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f2:	4a4e      	ldr	r2, [pc, #312]	; (8004b2c <I2C_Slave_STOPF+0x258>)
 80049f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe f9c5 	bl	8002d8a <HAL_DMA_Abort_IT>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d008      	beq.n	8004a18 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a10:	4610      	mov	r0, r2
 8004a12:	4798      	blx	r3
 8004a14:	e000      	b.n	8004a18 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a16:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d03e      	beq.n	8004aa0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d112      	bne.n	8004a56 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d112      	bne.n	8004a8a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	f043 0204 	orr.w	r2, r3, #4
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f843 	bl	8004b34 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004aae:	e039      	b.n	8004b24 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ab4:	d109      	bne.n	8004aca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2228      	movs	r2, #40	; 0x28
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff f826 	bl	8003b16 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b28      	cmp	r3, #40	; 0x28
 8004ad4:	d111      	bne.n	8004afa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	; (8004b30 <I2C_Slave_STOPF+0x25c>)
 8004ada:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff f827 	bl	8003b46 <HAL_I2C_ListenCpltCallback>
}
 8004af8:	e014      	b.n	8004b24 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	2b22      	cmp	r3, #34	; 0x22
 8004b00:	d002      	beq.n	8004b08 <I2C_Slave_STOPF+0x234>
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	2b22      	cmp	r3, #34	; 0x22
 8004b06:	d10d      	bne.n	8004b24 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fe fff9 	bl	8003b16 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	08004f69 	.word	0x08004f69
 8004b30:	ffff0000 	.word	0xffff0000

08004b34 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b4c:	7bbb      	ldrb	r3, [r7, #14]
 8004b4e:	2b10      	cmp	r3, #16
 8004b50:	d002      	beq.n	8004b58 <I2C_ITError+0x24>
 8004b52:	7bbb      	ldrb	r3, [r7, #14]
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d10a      	bne.n	8004b6e <I2C_ITError+0x3a>
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b22      	cmp	r3, #34	; 0x22
 8004b5c:	d107      	bne.n	8004b6e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b74:	2b28      	cmp	r3, #40	; 0x28
 8004b76:	d107      	bne.n	8004b88 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2228      	movs	r2, #40	; 0x28
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b86:	e015      	b.n	8004bb4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b96:	d00a      	beq.n	8004bae <I2C_ITError+0x7a>
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	2b60      	cmp	r3, #96	; 0x60
 8004b9c:	d007      	beq.n	8004bae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc2:	d162      	bne.n	8004c8a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bd2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d020      	beq.n	8004c24 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be6:	4a6a      	ldr	r2, [pc, #424]	; (8004d90 <I2C_ITError+0x25c>)
 8004be8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe f8cb 	bl	8002d8a <HAL_DMA_Abort_IT>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8089 	beq.w	8004d0e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4798      	blx	r3
 8004c22:	e074      	b.n	8004d0e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	4a59      	ldr	r2, [pc, #356]	; (8004d90 <I2C_ITError+0x25c>)
 8004c2a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fe f8aa 	bl	8002d8a <HAL_DMA_Abort_IT>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d068      	beq.n	8004d0e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d10b      	bne.n	8004c62 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c84:	4610      	mov	r0, r2
 8004c86:	4798      	blx	r3
 8004c88:	e041      	b.n	8004d0e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b60      	cmp	r3, #96	; 0x60
 8004c94:	d125      	bne.n	8004ce2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	d10b      	bne.n	8004cca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fe ff5b 	bl	8003b96 <HAL_I2C_AbortCpltCallback>
 8004ce0:	e015      	b.n	8004d0e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	d10b      	bne.n	8004d08 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fe ff3a 	bl	8003b82 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10e      	bne.n	8004d3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d109      	bne.n	8004d3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d007      	beq.n	8004d4c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d4a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d52:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d113      	bne.n	8004d88 <I2C_ITError+0x254>
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b28      	cmp	r3, #40	; 0x28
 8004d64:	d110      	bne.n	8004d88 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a0a      	ldr	r2, [pc, #40]	; (8004d94 <I2C_ITError+0x260>)
 8004d6a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fe fedf 	bl	8003b46 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d88:	bf00      	nop
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	08004f69 	.word	0x08004f69
 8004d94:	ffff0000 	.word	0xffff0000

08004d98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	4608      	mov	r0, r1
 8004da2:	4611      	mov	r1, r2
 8004da4:	461a      	mov	r2, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	817b      	strh	r3, [r7, #10]
 8004daa:	460b      	mov	r3, r1
 8004dac:	813b      	strh	r3, [r7, #8]
 8004dae:	4613      	mov	r3, r2
 8004db0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f96a 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00d      	beq.n	8004e06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df8:	d103      	bne.n	8004e02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e0aa      	b.n	8004f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e06:	897b      	ldrh	r3, [r7, #10]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	4952      	ldr	r1, [pc, #328]	; (8004f64 <I2C_RequestMemoryRead+0x1cc>)
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f9a2 	bl	8005166 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e097      	b.n	8004f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e44:	6a39      	ldr	r1, [r7, #32]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fa0c 	bl	8005264 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00d      	beq.n	8004e6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d107      	bne.n	8004e6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e076      	b.n	8004f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d105      	bne.n	8004e80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e74:	893b      	ldrh	r3, [r7, #8]
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	611a      	str	r2, [r3, #16]
 8004e7e:	e021      	b.n	8004ec4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e80:	893b      	ldrh	r3, [r7, #8]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e90:	6a39      	ldr	r1, [r7, #32]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f9e6 	bl	8005264 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d107      	bne.n	8004eb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e050      	b.n	8004f5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eba:	893b      	ldrh	r3, [r7, #8]
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec6:	6a39      	ldr	r1, [r7, #32]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f9cb 	bl	8005264 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00d      	beq.n	8004ef0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d107      	bne.n	8004eec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e035      	b.n	8004f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004efe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f8d3 	bl	80050b8 <I2C_WaitOnFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00d      	beq.n	8004f34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f26:	d103      	bne.n	8004f30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e013      	b.n	8004f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f34:	897b      	ldrh	r3, [r7, #10]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	6a3a      	ldr	r2, [r7, #32]
 8004f48:	4906      	ldr	r1, [pc, #24]	; (8004f64 <I2C_RequestMemoryRead+0x1cc>)
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f90b 	bl	8005166 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	00010002 	.word	0x00010002

08004f68 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f80:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f82:	4b4b      	ldr	r3, [pc, #300]	; (80050b0 <I2C_DMAAbort+0x148>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	08db      	lsrs	r3, r3, #3
 8004f88:	4a4a      	ldr	r2, [pc, #296]	; (80050b4 <I2C_DMAAbort+0x14c>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	0a1a      	lsrs	r2, r3, #8
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	00da      	lsls	r2, r3, #3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f043 0220 	orr.w	r2, r3, #32
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004fae:	e00a      	b.n	8004fc6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc4:	d0ea      	beq.n	8004f9c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005008:	2200      	movs	r2, #0
 800500a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	2200      	movs	r2, #0
 800501a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b60      	cmp	r3, #96	; 0x60
 8005036:	d10e      	bne.n	8005056 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800504e:	6978      	ldr	r0, [r7, #20]
 8005050:	f7fe fda1 	bl	8003b96 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005054:	e027      	b.n	80050a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005056:	7cfb      	ldrb	r3, [r7, #19]
 8005058:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800505c:	2b28      	cmp	r3, #40	; 0x28
 800505e:	d117      	bne.n	8005090 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800507e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2228      	movs	r2, #40	; 0x28
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800508e:	e007      	b.n	80050a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80050a0:	6978      	ldr	r0, [r7, #20]
 80050a2:	f7fe fd6e 	bl	8003b82 <HAL_I2C_ErrorCallback>
}
 80050a6:	bf00      	nop
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000000 	.word	0x20000000
 80050b4:	14f8b589 	.word	0x14f8b589

080050b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	4613      	mov	r3, r2
 80050c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050c8:	e025      	b.n	8005116 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d021      	beq.n	8005116 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d2:	f7fc ffb3 	bl	800203c <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d302      	bcc.n	80050e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d116      	bne.n	8005116 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f043 0220 	orr.w	r2, r3, #32
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e023      	b.n	800515e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	0c1b      	lsrs	r3, r3, #16
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d10d      	bne.n	800513c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	43da      	mvns	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4013      	ands	r3, r2
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	e00c      	b.n	8005156 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	43da      	mvns	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4013      	ands	r3, r2
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	bf0c      	ite	eq
 800514e:	2301      	moveq	r3, #1
 8005150:	2300      	movne	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	79fb      	ldrb	r3, [r7, #7]
 8005158:	429a      	cmp	r2, r3
 800515a:	d0b6      	beq.n	80050ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
 8005172:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005174:	e051      	b.n	800521a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005184:	d123      	bne.n	80051ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005194:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800519e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f043 0204 	orr.w	r2, r3, #4
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e046      	b.n	800525c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d021      	beq.n	800521a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7fc ff31 	bl	800203c <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d116      	bne.n	800521a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e020      	b.n	800525c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	0c1b      	lsrs	r3, r3, #16
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d10c      	bne.n	800523e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	43da      	mvns	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4013      	ands	r3, r2
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	bf14      	ite	ne
 8005236:	2301      	movne	r3, #1
 8005238:	2300      	moveq	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e00b      	b.n	8005256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	43da      	mvns	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4013      	ands	r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d18d      	bne.n	8005176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005270:	e02d      	b.n	80052ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f8c0 	bl	80053f8 <I2C_IsAcknowledgeFailed>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e02d      	b.n	80052de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d021      	beq.n	80052ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528a:	f7fc fed7 	bl	800203c <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	429a      	cmp	r2, r3
 8005298:	d302      	bcc.n	80052a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d116      	bne.n	80052ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e007      	b.n	80052de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d8:	2b80      	cmp	r3, #128	; 0x80
 80052da:	d1ca      	bne.n	8005272 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80052f4:	4b13      	ldr	r3, [pc, #76]	; (8005344 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	08db      	lsrs	r3, r3, #3
 80052fa:	4a13      	ldr	r2, [pc, #76]	; (8005348 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80052fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005300:	0a1a      	lsrs	r2, r3, #8
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3b01      	subs	r3, #1
 800530e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d107      	bne.n	8005326 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f043 0220 	orr.w	r2, r3, #32
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e008      	b.n	8005338 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005334:	d0e9      	beq.n	800530a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	20000000 	.word	0x20000000
 8005348:	14f8b589 	.word	0x14f8b589

0800534c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005358:	e042      	b.n	80053e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	2b10      	cmp	r3, #16
 8005366:	d119      	bne.n	800539c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0210 	mvn.w	r2, #16
 8005370:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e029      	b.n	80053f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539c:	f7fc fe4e 	bl	800203c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d302      	bcc.n	80053b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d116      	bne.n	80053e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	f043 0220 	orr.w	r2, r3, #32
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e007      	b.n	80053f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d1b5      	bne.n	800535a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540e:	d11b      	bne.n	8005448 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005418:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	f043 0204 	orr.w	r2, r3, #4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005466:	d103      	bne.n	8005470 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800546e:	e007      	b.n	8005480 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005478:	d102      	bne.n	8005480 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2208      	movs	r2, #8
 800547e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e267      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d075      	beq.n	8005596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054aa:	4b88      	ldr	r3, [pc, #544]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d00c      	beq.n	80054d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b6:	4b85      	ldr	r3, [pc, #532]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d112      	bne.n	80054e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054c2:	4b82      	ldr	r3, [pc, #520]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ce:	d10b      	bne.n	80054e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d0:	4b7e      	ldr	r3, [pc, #504]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d05b      	beq.n	8005594 <HAL_RCC_OscConfig+0x108>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d157      	bne.n	8005594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e242      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f0:	d106      	bne.n	8005500 <HAL_RCC_OscConfig+0x74>
 80054f2:	4b76      	ldr	r3, [pc, #472]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a75      	ldr	r2, [pc, #468]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e01d      	b.n	800553c <HAL_RCC_OscConfig+0xb0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x98>
 800550a:	4b70      	ldr	r3, [pc, #448]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a6f      	ldr	r2, [pc, #444]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	4b6d      	ldr	r3, [pc, #436]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a6c      	ldr	r2, [pc, #432]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800551c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0xb0>
 8005524:	4b69      	ldr	r3, [pc, #420]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a68      	ldr	r2, [pc, #416]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800552a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b66      	ldr	r3, [pc, #408]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a65      	ldr	r2, [pc, #404]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800553a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d013      	beq.n	800556c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005544:	f7fc fd7a 	bl	800203c <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800554c:	f7fc fd76 	bl	800203c <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	; 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e207      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555e:	4b5b      	ldr	r3, [pc, #364]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0xc0>
 800556a:	e014      	b.n	8005596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556c:	f7fc fd66 	bl	800203c <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005574:	f7fc fd62 	bl	800203c <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	; 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e1f3      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005586:	4b51      	ldr	r3, [pc, #324]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0xe8>
 8005592:	e000      	b.n	8005596 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d063      	beq.n	800566a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055a2:	4b4a      	ldr	r3, [pc, #296]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00b      	beq.n	80055c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ae:	4b47      	ldr	r3, [pc, #284]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d11c      	bne.n	80055f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ba:	4b44      	ldr	r3, [pc, #272]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d116      	bne.n	80055f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c6:	4b41      	ldr	r3, [pc, #260]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_RCC_OscConfig+0x152>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e1c7      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055de:	4b3b      	ldr	r3, [pc, #236]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4937      	ldr	r1, [pc, #220]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f2:	e03a      	b.n	800566a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d020      	beq.n	800563e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055fc:	4b34      	ldr	r3, [pc, #208]	; (80056d0 <HAL_RCC_OscConfig+0x244>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fc fd1b 	bl	800203c <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800560a:	f7fc fd17 	bl	800203c <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e1a8      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561c:	4b2b      	ldr	r3, [pc, #172]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005628:	4b28      	ldr	r3, [pc, #160]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4925      	ldr	r1, [pc, #148]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]
 800563c:	e015      	b.n	800566a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800563e:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <HAL_RCC_OscConfig+0x244>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fc fcfa 	bl	800203c <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800564c:	f7fc fcf6 	bl	800203c <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e187      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800565e:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d036      	beq.n	80056e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <HAL_RCC_OscConfig+0x248>)
 8005680:	2201      	movs	r2, #1
 8005682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005684:	f7fc fcda 	bl	800203c <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800568c:	f7fc fcd6 	bl	800203c <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e167      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800569e:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80056a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x200>
 80056aa:	e01b      	b.n	80056e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <HAL_RCC_OscConfig+0x248>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b2:	f7fc fcc3 	bl	800203c <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b8:	e00e      	b.n	80056d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ba:	f7fc fcbf 	bl	800203c <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d907      	bls.n	80056d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e150      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
 80056cc:	40023800 	.word	0x40023800
 80056d0:	42470000 	.word	0x42470000
 80056d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d8:	4b88      	ldr	r3, [pc, #544]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80056da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ea      	bne.n	80056ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8097 	beq.w	8005820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f6:	4b81      	ldr	r3, [pc, #516]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	4b7d      	ldr	r3, [pc, #500]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	4a7c      	ldr	r2, [pc, #496]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005710:	6413      	str	r3, [r2, #64]	; 0x40
 8005712:	4b7a      	ldr	r3, [pc, #488]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571e:	2301      	movs	r3, #1
 8005720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005722:	4b77      	ldr	r3, [pc, #476]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d118      	bne.n	8005760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572e:	4b74      	ldr	r3, [pc, #464]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a73      	ldr	r2, [pc, #460]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573a:	f7fc fc7f 	bl	800203c <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005742:	f7fc fc7b 	bl	800203c <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e10c      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005754:	4b6a      	ldr	r3, [pc, #424]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d106      	bne.n	8005776 <HAL_RCC_OscConfig+0x2ea>
 8005768:	4b64      	ldr	r3, [pc, #400]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	4a63      	ldr	r2, [pc, #396]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	6713      	str	r3, [r2, #112]	; 0x70
 8005774:	e01c      	b.n	80057b0 <HAL_RCC_OscConfig+0x324>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b05      	cmp	r3, #5
 800577c:	d10c      	bne.n	8005798 <HAL_RCC_OscConfig+0x30c>
 800577e:	4b5f      	ldr	r3, [pc, #380]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	4a5e      	ldr	r2, [pc, #376]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005784:	f043 0304 	orr.w	r3, r3, #4
 8005788:	6713      	str	r3, [r2, #112]	; 0x70
 800578a:	4b5c      	ldr	r3, [pc, #368]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	4a5b      	ldr	r2, [pc, #364]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	6713      	str	r3, [r2, #112]	; 0x70
 8005796:	e00b      	b.n	80057b0 <HAL_RCC_OscConfig+0x324>
 8005798:	4b58      	ldr	r3, [pc, #352]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	4a57      	ldr	r2, [pc, #348]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	6713      	str	r3, [r2, #112]	; 0x70
 80057a4:	4b55      	ldr	r3, [pc, #340]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	4a54      	ldr	r2, [pc, #336]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80057aa:	f023 0304 	bic.w	r3, r3, #4
 80057ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d015      	beq.n	80057e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b8:	f7fc fc40 	bl	800203c <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	e00a      	b.n	80057d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fc fc3c 	bl	800203c <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e0cb      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d6:	4b49      	ldr	r3, [pc, #292]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0ee      	beq.n	80057c0 <HAL_RCC_OscConfig+0x334>
 80057e2:	e014      	b.n	800580e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e4:	f7fc fc2a 	bl	800203c <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ec:	f7fc fc26 	bl	800203c <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e0b5      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005802:	4b3e      	ldr	r3, [pc, #248]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ee      	bne.n	80057ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d105      	bne.n	8005820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005814:	4b39      	ldr	r3, [pc, #228]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	4a38      	ldr	r2, [pc, #224]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800581a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800581e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80a1 	beq.w	800596c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800582a:	4b34      	ldr	r3, [pc, #208]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b08      	cmp	r3, #8
 8005834:	d05c      	beq.n	80058f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d141      	bne.n	80058c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583e:	4b31      	ldr	r3, [pc, #196]	; (8005904 <HAL_RCC_OscConfig+0x478>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fc fbfa 	bl	800203c <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800584c:	f7fc fbf6 	bl	800203c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e087      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585e:	4b27      	ldr	r3, [pc, #156]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	3b01      	subs	r3, #1
 8005884:	041b      	lsls	r3, r3, #16
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	061b      	lsls	r3, r3, #24
 800588e:	491b      	ldr	r1, [pc, #108]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005894:	4b1b      	ldr	r3, [pc, #108]	; (8005904 <HAL_RCC_OscConfig+0x478>)
 8005896:	2201      	movs	r2, #1
 8005898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589a:	f7fc fbcf 	bl	800203c <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a2:	f7fc fbcb 	bl	800203c <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e05c      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b4:	4b11      	ldr	r3, [pc, #68]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x416>
 80058c0:	e054      	b.n	800596c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c2:	4b10      	ldr	r3, [pc, #64]	; (8005904 <HAL_RCC_OscConfig+0x478>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fc fbb8 	bl	800203c <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fc fbb4 	bl	800203c <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e045      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x444>
 80058ee:	e03d      	b.n	800596c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e038      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
 80058fc:	40023800 	.word	0x40023800
 8005900:	40007000 	.word	0x40007000
 8005904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005908:	4b1b      	ldr	r3, [pc, #108]	; (8005978 <HAL_RCC_OscConfig+0x4ec>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d028      	beq.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d121      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d11a      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005938:	4013      	ands	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800593e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005940:	4293      	cmp	r3, r2
 8005942:	d111      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	3b01      	subs	r3, #1
 8005952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d107      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005964:	429a      	cmp	r2, r3
 8005966:	d001      	beq.n	800596c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800

0800597c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0cc      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005990:	4b68      	ldr	r3, [pc, #416]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d90c      	bls.n	80059b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b65      	ldr	r3, [pc, #404]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b63      	ldr	r3, [pc, #396]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0b8      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d020      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059d0:	4b59      	ldr	r3, [pc, #356]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4a58      	ldr	r2, [pc, #352]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059e8:	4b53      	ldr	r3, [pc, #332]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	4a52      	ldr	r2, [pc, #328]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f4:	4b50      	ldr	r3, [pc, #320]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	494d      	ldr	r1, [pc, #308]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d044      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d107      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1a:	4b47      	ldr	r3, [pc, #284]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d119      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e07f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d003      	beq.n	8005a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d107      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3a:	4b3f      	ldr	r3, [pc, #252]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e06f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4a:	4b3b      	ldr	r3, [pc, #236]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e067      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a5a:	4b37      	ldr	r3, [pc, #220]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f023 0203 	bic.w	r2, r3, #3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	4934      	ldr	r1, [pc, #208]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a6c:	f7fc fae6 	bl	800203c <HAL_GetTick>
 8005a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a72:	e00a      	b.n	8005a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a74:	f7fc fae2 	bl	800203c <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e04f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8a:	4b2b      	ldr	r3, [pc, #172]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 020c 	and.w	r2, r3, #12
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d1eb      	bne.n	8005a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b25      	ldr	r3, [pc, #148]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d20c      	bcs.n	8005ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b22      	ldr	r3, [pc, #136]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab2:	4b20      	ldr	r3, [pc, #128]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e032      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ad0:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	4916      	ldr	r1, [pc, #88]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d009      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aee:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	490e      	ldr	r1, [pc, #56]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b02:	f000 f821 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 8005b06:	4602      	mov	r2, r0
 8005b08:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	490a      	ldr	r1, [pc, #40]	; (8005b3c <HAL_RCC_ClockConfig+0x1c0>)
 8005b14:	5ccb      	ldrb	r3, [r1, r3]
 8005b16:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1a:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b1e:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <HAL_RCC_ClockConfig+0x1c8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fc fa46 	bl	8001fb4 <HAL_InitTick>

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40023c00 	.word	0x40023c00
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	08008704 	.word	0x08008704
 8005b40:	20000000 	.word	0x20000000
 8005b44:	20000004 	.word	0x20000004

08005b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b4c:	b090      	sub	sp, #64	; 0x40
 8005b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	637b      	str	r3, [r7, #52]	; 0x34
 8005b54:	2300      	movs	r3, #0
 8005b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b58:	2300      	movs	r3, #0
 8005b5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b60:	4b59      	ldr	r3, [pc, #356]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 030c 	and.w	r3, r3, #12
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d00d      	beq.n	8005b88 <HAL_RCC_GetSysClockFreq+0x40>
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	f200 80a1 	bhi.w	8005cb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_RCC_GetSysClockFreq+0x34>
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d003      	beq.n	8005b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b7a:	e09b      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b7c:	4b53      	ldr	r3, [pc, #332]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8005b7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005b80:	e09b      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b82:	4b53      	ldr	r3, [pc, #332]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b86:	e098      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b88:	4b4f      	ldr	r3, [pc, #316]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b92:	4b4d      	ldr	r3, [pc, #308]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d028      	beq.n	8005bf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b9e:	4b4a      	ldr	r3, [pc, #296]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	099b      	lsrs	r3, r3, #6
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	627a      	str	r2, [r7, #36]	; 0x24
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4b47      	ldr	r3, [pc, #284]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005bb4:	fb03 f201 	mul.w	r2, r3, r1
 8005bb8:	2300      	movs	r3, #0
 8005bba:	fb00 f303 	mul.w	r3, r0, r3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	4a43      	ldr	r2, [pc, #268]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005bc2:	fba0 1202 	umull	r1, r2, r0, r2
 8005bc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bc8:	460a      	mov	r2, r1
 8005bca:	62ba      	str	r2, [r7, #40]	; 0x28
 8005bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bce:	4413      	add	r3, r2
 8005bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	61fa      	str	r2, [r7, #28]
 8005bda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005be2:	f7fa fb55 	bl	8000290 <__aeabi_uldivmod>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	4613      	mov	r3, r2
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bee:	e053      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bf0:	4b35      	ldr	r3, [pc, #212]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	099b      	lsrs	r3, r3, #6
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	617a      	str	r2, [r7, #20]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c02:	f04f 0b00 	mov.w	fp, #0
 8005c06:	4652      	mov	r2, sl
 8005c08:	465b      	mov	r3, fp
 8005c0a:	f04f 0000 	mov.w	r0, #0
 8005c0e:	f04f 0100 	mov.w	r1, #0
 8005c12:	0159      	lsls	r1, r3, #5
 8005c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c18:	0150      	lsls	r0, r2, #5
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	ebb2 080a 	subs.w	r8, r2, sl
 8005c22:	eb63 090b 	sbc.w	r9, r3, fp
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005c3a:	ebb2 0408 	subs.w	r4, r2, r8
 8005c3e:	eb63 0509 	sbc.w	r5, r3, r9
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	00eb      	lsls	r3, r5, #3
 8005c4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c50:	00e2      	lsls	r2, r4, #3
 8005c52:	4614      	mov	r4, r2
 8005c54:	461d      	mov	r5, r3
 8005c56:	eb14 030a 	adds.w	r3, r4, sl
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	eb45 030b 	adc.w	r3, r5, fp
 8005c60:	607b      	str	r3, [r7, #4]
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c6e:	4629      	mov	r1, r5
 8005c70:	028b      	lsls	r3, r1, #10
 8005c72:	4621      	mov	r1, r4
 8005c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c78:	4621      	mov	r1, r4
 8005c7a:	028a      	lsls	r2, r1, #10
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c82:	2200      	movs	r2, #0
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	60fa      	str	r2, [r7, #12]
 8005c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c8c:	f7fa fb00 	bl	8000290 <__aeabi_uldivmod>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4613      	mov	r3, r2
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	0c1b      	lsrs	r3, r3, #16
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005ca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005cb2:	e002      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cb4:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8005cb6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3740      	adds	r7, #64	; 0x40
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	00f42400 	.word	0x00f42400
 8005cd0:	017d7840 	.word	0x017d7840

08005cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cd8:	4b03      	ldr	r3, [pc, #12]	; (8005ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cda:	681b      	ldr	r3, [r3, #0]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	20000000 	.word	0x20000000

08005cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cf0:	f7ff fff0 	bl	8005cd4 <HAL_RCC_GetHCLKFreq>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	0a9b      	lsrs	r3, r3, #10
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	4903      	ldr	r1, [pc, #12]	; (8005d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d02:	5ccb      	ldrb	r3, [r1, r3]
 8005d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	08008714 	.word	0x08008714

08005d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d18:	f7ff ffdc 	bl	8005cd4 <HAL_RCC_GetHCLKFreq>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	0b5b      	lsrs	r3, r3, #13
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	4903      	ldr	r1, [pc, #12]	; (8005d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d2a:	5ccb      	ldrb	r3, [r1, r3]
 8005d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40023800 	.word	0x40023800
 8005d38:	08008714 	.word	0x08008714

08005d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e041      	b.n	8005dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fb feb6 	bl	8001ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f000 fb1a 	bl	80063b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e041      	b.n	8005e70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d106      	bne.n	8005e06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fb fe03 	bl	8001a0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3304      	adds	r3, #4
 8005e16:	4619      	mov	r1, r3
 8005e18:	4610      	mov	r0, r2
 8005e1a:	f000 facb 	bl	80063b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d109      	bne.n	8005e9c <HAL_TIM_PWM_Start+0x24>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	bf14      	ite	ne
 8005e94:	2301      	movne	r3, #1
 8005e96:	2300      	moveq	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	e022      	b.n	8005ee2 <HAL_TIM_PWM_Start+0x6a>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d109      	bne.n	8005eb6 <HAL_TIM_PWM_Start+0x3e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	bf14      	ite	ne
 8005eae:	2301      	movne	r3, #1
 8005eb0:	2300      	moveq	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	e015      	b.n	8005ee2 <HAL_TIM_PWM_Start+0x6a>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d109      	bne.n	8005ed0 <HAL_TIM_PWM_Start+0x58>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	bf14      	ite	ne
 8005ec8:	2301      	movne	r3, #1
 8005eca:	2300      	moveq	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	e008      	b.n	8005ee2 <HAL_TIM_PWM_Start+0x6a>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	bf14      	ite	ne
 8005edc:	2301      	movne	r3, #1
 8005ede:	2300      	moveq	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e068      	b.n	8005fbc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0x82>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ef8:	e013      	b.n	8005f22 <HAL_TIM_PWM_Start+0xaa>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start+0x92>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f08:	e00b      	b.n	8005f22 <HAL_TIM_PWM_Start+0xaa>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d104      	bne.n	8005f1a <HAL_TIM_PWM_Start+0xa2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f18:	e003      	b.n	8005f22 <HAL_TIM_PWM_Start+0xaa>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2201      	movs	r2, #1
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fce8 	bl	8006900 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a23      	ldr	r2, [pc, #140]	; (8005fc4 <HAL_TIM_PWM_Start+0x14c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d107      	bne.n	8005f4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a1d      	ldr	r2, [pc, #116]	; (8005fc4 <HAL_TIM_PWM_Start+0x14c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d018      	beq.n	8005f86 <HAL_TIM_PWM_Start+0x10e>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5c:	d013      	beq.n	8005f86 <HAL_TIM_PWM_Start+0x10e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a19      	ldr	r2, [pc, #100]	; (8005fc8 <HAL_TIM_PWM_Start+0x150>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00e      	beq.n	8005f86 <HAL_TIM_PWM_Start+0x10e>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <HAL_TIM_PWM_Start+0x154>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d009      	beq.n	8005f86 <HAL_TIM_PWM_Start+0x10e>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a16      	ldr	r2, [pc, #88]	; (8005fd0 <HAL_TIM_PWM_Start+0x158>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d004      	beq.n	8005f86 <HAL_TIM_PWM_Start+0x10e>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a14      	ldr	r2, [pc, #80]	; (8005fd4 <HAL_TIM_PWM_Start+0x15c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d111      	bne.n	8005faa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b06      	cmp	r3, #6
 8005f96:	d010      	beq.n	8005fba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0201 	orr.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa8:	e007      	b.n	8005fba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0201 	orr.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40010000 	.word	0x40010000
 8005fc8:	40000400 	.word	0x40000400
 8005fcc:	40000800 	.word	0x40000800
 8005fd0:	40000c00 	.word	0x40000c00
 8005fd4:	40014000 	.word	0x40014000

08005fd8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fc88 	bl	8006900 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a29      	ldr	r2, [pc, #164]	; (800609c <HAL_TIM_PWM_Stop+0xc4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d117      	bne.n	800602a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6a1a      	ldr	r2, [r3, #32]
 8006000:	f241 1311 	movw	r3, #4369	; 0x1111
 8006004:	4013      	ands	r3, r2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10f      	bne.n	800602a <HAL_TIM_PWM_Stop+0x52>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6a1a      	ldr	r2, [r3, #32]
 8006010:	f240 4344 	movw	r3, #1092	; 0x444
 8006014:	4013      	ands	r3, r2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d107      	bne.n	800602a <HAL_TIM_PWM_Stop+0x52>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006028:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6a1a      	ldr	r2, [r3, #32]
 8006030:	f241 1311 	movw	r3, #4369	; 0x1111
 8006034:	4013      	ands	r3, r2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10f      	bne.n	800605a <HAL_TIM_PWM_Stop+0x82>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6a1a      	ldr	r2, [r3, #32]
 8006040:	f240 4344 	movw	r3, #1092	; 0x444
 8006044:	4013      	ands	r3, r2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d107      	bne.n	800605a <HAL_TIM_PWM_Stop+0x82>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0201 	bic.w	r2, r2, #1
 8006058:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d104      	bne.n	800606a <HAL_TIM_PWM_Stop+0x92>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006068:	e013      	b.n	8006092 <HAL_TIM_PWM_Stop+0xba>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b04      	cmp	r3, #4
 800606e:	d104      	bne.n	800607a <HAL_TIM_PWM_Stop+0xa2>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006078:	e00b      	b.n	8006092 <HAL_TIM_PWM_Stop+0xba>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b08      	cmp	r3, #8
 800607e:	d104      	bne.n	800608a <HAL_TIM_PWM_Stop+0xb2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006088:	e003      	b.n	8006092 <HAL_TIM_PWM_Stop+0xba>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40010000 	.word	0x40010000

080060a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e0ae      	b.n	800621c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b0c      	cmp	r3, #12
 80060ca:	f200 809f 	bhi.w	800620c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060ce:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	08006109 	.word	0x08006109
 80060d8:	0800620d 	.word	0x0800620d
 80060dc:	0800620d 	.word	0x0800620d
 80060e0:	0800620d 	.word	0x0800620d
 80060e4:	08006149 	.word	0x08006149
 80060e8:	0800620d 	.word	0x0800620d
 80060ec:	0800620d 	.word	0x0800620d
 80060f0:	0800620d 	.word	0x0800620d
 80060f4:	0800618b 	.word	0x0800618b
 80060f8:	0800620d 	.word	0x0800620d
 80060fc:	0800620d 	.word	0x0800620d
 8006100:	0800620d 	.word	0x0800620d
 8006104:	080061cb 	.word	0x080061cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	4618      	mov	r0, r3
 8006110:	f000 f9d0 	bl	80064b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0208 	orr.w	r2, r2, #8
 8006122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0204 	bic.w	r2, r2, #4
 8006132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6999      	ldr	r1, [r3, #24]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	691a      	ldr	r2, [r3, #16]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	619a      	str	r2, [r3, #24]
      break;
 8006146:	e064      	b.n	8006212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fa16 	bl	8006580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6999      	ldr	r1, [r3, #24]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	021a      	lsls	r2, r3, #8
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	619a      	str	r2, [r3, #24]
      break;
 8006188:	e043      	b.n	8006212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fa61 	bl	8006658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 0208 	orr.w	r2, r2, #8
 80061a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69da      	ldr	r2, [r3, #28]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0204 	bic.w	r2, r2, #4
 80061b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69d9      	ldr	r1, [r3, #28]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	691a      	ldr	r2, [r3, #16]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	61da      	str	r2, [r3, #28]
      break;
 80061c8:	e023      	b.n	8006212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68b9      	ldr	r1, [r7, #8]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 faab 	bl	800672c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69da      	ldr	r2, [r3, #28]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69da      	ldr	r2, [r3, #28]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69d9      	ldr	r1, [r3, #28]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	021a      	lsls	r2, r3, #8
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	61da      	str	r2, [r3, #28]
      break;
 800620a:	e002      	b.n	8006212 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	75fb      	strb	r3, [r7, #23]
      break;
 8006210:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800621a:	7dfb      	ldrb	r3, [r7, #23]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_TIM_ConfigClockSource+0x1c>
 800623c:	2302      	movs	r3, #2
 800623e:	e0b4      	b.n	80063aa <HAL_TIM_ConfigClockSource+0x186>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800625e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006278:	d03e      	beq.n	80062f8 <HAL_TIM_ConfigClockSource+0xd4>
 800627a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800627e:	f200 8087 	bhi.w	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 8006282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006286:	f000 8086 	beq.w	8006396 <HAL_TIM_ConfigClockSource+0x172>
 800628a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628e:	d87f      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 8006290:	2b70      	cmp	r3, #112	; 0x70
 8006292:	d01a      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0xa6>
 8006294:	2b70      	cmp	r3, #112	; 0x70
 8006296:	d87b      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 8006298:	2b60      	cmp	r3, #96	; 0x60
 800629a:	d050      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x11a>
 800629c:	2b60      	cmp	r3, #96	; 0x60
 800629e:	d877      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 80062a0:	2b50      	cmp	r3, #80	; 0x50
 80062a2:	d03c      	beq.n	800631e <HAL_TIM_ConfigClockSource+0xfa>
 80062a4:	2b50      	cmp	r3, #80	; 0x50
 80062a6:	d873      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 80062a8:	2b40      	cmp	r3, #64	; 0x40
 80062aa:	d058      	beq.n	800635e <HAL_TIM_ConfigClockSource+0x13a>
 80062ac:	2b40      	cmp	r3, #64	; 0x40
 80062ae:	d86f      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 80062b0:	2b30      	cmp	r3, #48	; 0x30
 80062b2:	d064      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x15a>
 80062b4:	2b30      	cmp	r3, #48	; 0x30
 80062b6:	d86b      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d060      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x15a>
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d867      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d05c      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x15a>
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d05a      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x15a>
 80062c8:	e062      	b.n	8006390 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6899      	ldr	r1, [r3, #8]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f000 faf1 	bl	80068c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	609a      	str	r2, [r3, #8]
      break;
 80062f6:	e04f      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	6899      	ldr	r1, [r3, #8]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f000 fada 	bl	80068c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800631a:	609a      	str	r2, [r3, #8]
      break;
 800631c:	e03c      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	6859      	ldr	r1, [r3, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	461a      	mov	r2, r3
 800632c:	f000 fa4e 	bl	80067cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2150      	movs	r1, #80	; 0x50
 8006336:	4618      	mov	r0, r3
 8006338:	f000 faa7 	bl	800688a <TIM_ITRx_SetConfig>
      break;
 800633c:	e02c      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	6859      	ldr	r1, [r3, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	461a      	mov	r2, r3
 800634c:	f000 fa6d 	bl	800682a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2160      	movs	r1, #96	; 0x60
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fa97 	bl	800688a <TIM_ITRx_SetConfig>
      break;
 800635c:	e01c      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6859      	ldr	r1, [r3, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	461a      	mov	r2, r3
 800636c:	f000 fa2e 	bl	80067cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2140      	movs	r1, #64	; 0x40
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fa87 	bl	800688a <TIM_ITRx_SetConfig>
      break;
 800637c:	e00c      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4619      	mov	r1, r3
 8006388:	4610      	mov	r0, r2
 800638a:	f000 fa7e 	bl	800688a <TIM_ITRx_SetConfig>
      break;
 800638e:	e003      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
      break;
 8006394:	e000      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a34      	ldr	r2, [pc, #208]	; (8006498 <TIM_Base_SetConfig+0xe4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00f      	beq.n	80063ec <TIM_Base_SetConfig+0x38>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d2:	d00b      	beq.n	80063ec <TIM_Base_SetConfig+0x38>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a31      	ldr	r2, [pc, #196]	; (800649c <TIM_Base_SetConfig+0xe8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d007      	beq.n	80063ec <TIM_Base_SetConfig+0x38>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a30      	ldr	r2, [pc, #192]	; (80064a0 <TIM_Base_SetConfig+0xec>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_Base_SetConfig+0x38>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a2f      	ldr	r2, [pc, #188]	; (80064a4 <TIM_Base_SetConfig+0xf0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d108      	bne.n	80063fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a25      	ldr	r2, [pc, #148]	; (8006498 <TIM_Base_SetConfig+0xe4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d01b      	beq.n	800643e <TIM_Base_SetConfig+0x8a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640c:	d017      	beq.n	800643e <TIM_Base_SetConfig+0x8a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a22      	ldr	r2, [pc, #136]	; (800649c <TIM_Base_SetConfig+0xe8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d013      	beq.n	800643e <TIM_Base_SetConfig+0x8a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a21      	ldr	r2, [pc, #132]	; (80064a0 <TIM_Base_SetConfig+0xec>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00f      	beq.n	800643e <TIM_Base_SetConfig+0x8a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a20      	ldr	r2, [pc, #128]	; (80064a4 <TIM_Base_SetConfig+0xf0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00b      	beq.n	800643e <TIM_Base_SetConfig+0x8a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a1f      	ldr	r2, [pc, #124]	; (80064a8 <TIM_Base_SetConfig+0xf4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d007      	beq.n	800643e <TIM_Base_SetConfig+0x8a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a1e      	ldr	r2, [pc, #120]	; (80064ac <TIM_Base_SetConfig+0xf8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d003      	beq.n	800643e <TIM_Base_SetConfig+0x8a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a1d      	ldr	r2, [pc, #116]	; (80064b0 <TIM_Base_SetConfig+0xfc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d108      	bne.n	8006450 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a08      	ldr	r2, [pc, #32]	; (8006498 <TIM_Base_SetConfig+0xe4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d103      	bne.n	8006484 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	615a      	str	r2, [r3, #20]
}
 800648a:	bf00      	nop
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40010000 	.word	0x40010000
 800649c:	40000400 	.word	0x40000400
 80064a0:	40000800 	.word	0x40000800
 80064a4:	40000c00 	.word	0x40000c00
 80064a8:	40014000 	.word	0x40014000
 80064ac:	40014400 	.word	0x40014400
 80064b0:	40014800 	.word	0x40014800

080064b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	f023 0201 	bic.w	r2, r3, #1
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0303 	bic.w	r3, r3, #3
 80064ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f023 0302 	bic.w	r3, r3, #2
 80064fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a1c      	ldr	r2, [pc, #112]	; (800657c <TIM_OC1_SetConfig+0xc8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d10c      	bne.n	800652a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f023 0308 	bic.w	r3, r3, #8
 8006516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f023 0304 	bic.w	r3, r3, #4
 8006528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a13      	ldr	r2, [pc, #76]	; (800657c <TIM_OC1_SetConfig+0xc8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d111      	bne.n	8006556 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	621a      	str	r2, [r3, #32]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	40010000 	.word	0x40010000

08006580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	f023 0210 	bic.w	r2, r3, #16
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0320 	bic.w	r3, r3, #32
 80065ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a1e      	ldr	r2, [pc, #120]	; (8006654 <TIM_OC2_SetConfig+0xd4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d10d      	bne.n	80065fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a15      	ldr	r2, [pc, #84]	; (8006654 <TIM_OC2_SetConfig+0xd4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d113      	bne.n	800662c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800660a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	621a      	str	r2, [r3, #32]
}
 8006646:	bf00      	nop
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40010000 	.word	0x40010000

08006658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0303 	bic.w	r3, r3, #3
 800668e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a1d      	ldr	r2, [pc, #116]	; (8006728 <TIM_OC3_SetConfig+0xd0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d10d      	bne.n	80066d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a14      	ldr	r2, [pc, #80]	; (8006728 <TIM_OC3_SetConfig+0xd0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d113      	bne.n	8006702 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	621a      	str	r2, [r3, #32]
}
 800671c:	bf00      	nop
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	40010000 	.word	0x40010000

0800672c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	021b      	lsls	r3, r3, #8
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	4313      	orrs	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	031b      	lsls	r3, r3, #12
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4313      	orrs	r3, r2
 8006782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a10      	ldr	r2, [pc, #64]	; (80067c8 <TIM_OC4_SetConfig+0x9c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d109      	bne.n	80067a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	019b      	lsls	r3, r3, #6
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	621a      	str	r2, [r3, #32]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40010000 	.word	0x40010000

080067cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f023 0201 	bic.w	r2, r3, #1
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f023 030a 	bic.w	r3, r3, #10
 8006808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4313      	orrs	r3, r2
 8006810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	621a      	str	r2, [r3, #32]
}
 800681e:	bf00      	nop
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800682a:	b480      	push	{r7}
 800682c:	b087      	sub	sp, #28
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f023 0210 	bic.w	r2, r3, #16
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	031b      	lsls	r3, r3, #12
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	621a      	str	r2, [r3, #32]
}
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800688a:	b480      	push	{r7}
 800688c:	b085      	sub	sp, #20
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	f043 0307 	orr.w	r3, r3, #7
 80068ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	609a      	str	r2, [r3, #8]
}
 80068b4:	bf00      	nop
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	021a      	lsls	r2, r3, #8
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	609a      	str	r2, [r3, #8]
}
 80068f4:	bf00      	nop
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f003 031f 	and.w	r3, r3, #31
 8006912:	2201      	movs	r2, #1
 8006914:	fa02 f303 	lsl.w	r3, r2, r3
 8006918:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a1a      	ldr	r2, [r3, #32]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	43db      	mvns	r3, r3
 8006922:	401a      	ands	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a1a      	ldr	r2, [r3, #32]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 031f 	and.w	r3, r3, #31
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	fa01 f303 	lsl.w	r3, r1, r3
 8006938:	431a      	orrs	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
	...

0800694c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800695c:	2b01      	cmp	r3, #1
 800695e:	d101      	bne.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006960:	2302      	movs	r3, #2
 8006962:	e050      	b.n	8006a06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1c      	ldr	r2, [pc, #112]	; (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d018      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b0:	d013      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00e      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a16      	ldr	r2, [pc, #88]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d009      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a15      	ldr	r2, [pc, #84]	; (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d004      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d10c      	bne.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	40010000 	.word	0x40010000
 8006a18:	40000400 	.word	0x40000400
 8006a1c:	40000800 	.word	0x40000800
 8006a20:	40000c00 	.word	0x40000c00
 8006a24:	40014000 	.word	0x40014000

08006a28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e03d      	b.n	8006ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e03f      	b.n	8006b5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d106      	bne.n	8006af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fb f900 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2224      	movs	r2, #36	; 0x24
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fcdf 	bl	80074d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695a      	ldr	r2, [r3, #20]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	4613      	mov	r3, r2
 8006b72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b20      	cmp	r3, #32
 8006b7e:	d11d      	bne.n	8006bbc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_UART_Receive_IT+0x26>
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e016      	b.n	8006bbe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d101      	bne.n	8006b9e <HAL_UART_Receive_IT+0x38>
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	e00f      	b.n	8006bbe <HAL_UART_Receive_IT+0x58>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bac:	88fb      	ldrh	r3, [r7, #6]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 fab6 	bl	8007124 <UART_Start_Receive_IT>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	e000      	b.n	8006bbe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b0ba      	sub	sp, #232	; 0xe8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10f      	bne.n	8006c2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d009      	beq.n	8006c2e <HAL_UART_IRQHandler+0x66>
 8006c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fb99 	bl	800735e <UART_Receive_IT>
      return;
 8006c2c:	e256      	b.n	80070dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 80de 	beq.w	8006df4 <HAL_UART_IRQHandler+0x22c>
 8006c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d106      	bne.n	8006c52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 80d1 	beq.w	8006df4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <HAL_UART_IRQHandler+0xae>
 8006c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	f043 0201 	orr.w	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7a:	f003 0304 	and.w	r3, r3, #4
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <HAL_UART_IRQHandler+0xd2>
 8006c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d005      	beq.n	8006c9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	f043 0202 	orr.w	r2, r3, #2
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00b      	beq.n	8006cbe <HAL_UART_IRQHandler+0xf6>
 8006ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	f043 0204 	orr.w	r2, r3, #4
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d011      	beq.n	8006cee <HAL_UART_IRQHandler+0x126>
 8006cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d105      	bne.n	8006ce2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	f043 0208 	orr.w	r2, r3, #8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 81ed 	beq.w	80070d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <HAL_UART_IRQHandler+0x14e>
 8006d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d08:	f003 0320 	and.w	r3, r3, #32
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fb24 	bl	800735e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d20:	2b40      	cmp	r3, #64	; 0x40
 8006d22:	bf0c      	ite	eq
 8006d24:	2301      	moveq	r3, #1
 8006d26:	2300      	movne	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d103      	bne.n	8006d42 <HAL_UART_IRQHandler+0x17a>
 8006d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d04f      	beq.n	8006de2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fa2c 	bl	80071a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d52:	2b40      	cmp	r3, #64	; 0x40
 8006d54:	d141      	bne.n	8006dda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3314      	adds	r3, #20
 8006d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3314      	adds	r3, #20
 8006d7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1d9      	bne.n	8006d56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d013      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dae:	4a7d      	ldr	r2, [pc, #500]	; (8006fa4 <HAL_UART_IRQHandler+0x3dc>)
 8006db0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fb ffe7 	bl	8002d8a <HAL_DMA_Abort_IT>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d016      	beq.n	8006df0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006dcc:	4610      	mov	r0, r2
 8006dce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd0:	e00e      	b.n	8006df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f990 	bl	80070f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd8:	e00a      	b.n	8006df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f98c 	bl	80070f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de0:	e006      	b.n	8006df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f988 	bl	80070f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006dee:	e170      	b.n	80070d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df0:	bf00      	nop
    return;
 8006df2:	e16e      	b.n	80070d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	f040 814a 	bne.w	8007092 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8143 	beq.w	8007092 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 813c 	beq.w	8007092 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60bb      	str	r3, [r7, #8]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	60bb      	str	r3, [r7, #8]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	60bb      	str	r3, [r7, #8]
 8006e2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	f040 80b4 	bne.w	8006fa8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 8140 	beq.w	80070d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	f080 8139 	bcs.w	80070d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e76:	f000 8088 	beq.w	8006f8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	330c      	adds	r3, #12
 8006e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1d9      	bne.n	8006e7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3314      	adds	r3, #20
 8006ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ed8:	f023 0301 	bic.w	r3, r3, #1
 8006edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3314      	adds	r3, #20
 8006ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006eee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e1      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3314      	adds	r3, #20
 8006f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3314      	adds	r3, #20
 8006f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e3      	bne.n	8006f02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	330c      	adds	r3, #12
 8006f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f5a:	f023 0310 	bic.w	r3, r3, #16
 8006f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	330c      	adds	r3, #12
 8006f68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e3      	bne.n	8006f48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7fb fe90 	bl	8002caa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f8b6 	bl	800710c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fa0:	e099      	b.n	80070d6 <HAL_UART_IRQHandler+0x50e>
 8006fa2:	bf00      	nop
 8006fa4:	08007267 	.word	0x08007267
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 808b 	beq.w	80070da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 8086 	beq.w	80070da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	330c      	adds	r3, #12
 8006fee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ff2:	647a      	str	r2, [r7, #68]	; 0x44
 8006ff4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e3      	bne.n	8006fce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3314      	adds	r3, #20
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	623b      	str	r3, [r7, #32]
   return(result);
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3314      	adds	r3, #20
 8007026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800702a:	633a      	str	r2, [r7, #48]	; 0x30
 800702c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e3      	bne.n	8007006 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	e853 3f00 	ldrex	r3, [r3]
 800705a:	60fb      	str	r3, [r7, #12]
   return(result);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0310 	bic.w	r3, r3, #16
 8007062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	330c      	adds	r3, #12
 800706c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007070:	61fa      	str	r2, [r7, #28]
 8007072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	69b9      	ldr	r1, [r7, #24]
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	617b      	str	r3, [r7, #20]
   return(result);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e3      	bne.n	800704c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f83e 	bl	800710c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007090:	e023      	b.n	80070da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709a:	2b00      	cmp	r3, #0
 800709c:	d009      	beq.n	80070b2 <HAL_UART_IRQHandler+0x4ea>
 800709e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f8ef 	bl	800728e <UART_Transmit_IT>
    return;
 80070b0:	e014      	b.n	80070dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80070b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00e      	beq.n	80070dc <HAL_UART_IRQHandler+0x514>
 80070be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d008      	beq.n	80070dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f92f 	bl	800732e <UART_EndTransmit_IT>
    return;
 80070d0:	e004      	b.n	80070dc <HAL_UART_IRQHandler+0x514>
    return;
 80070d2:	bf00      	nop
 80070d4:	e002      	b.n	80070dc <HAL_UART_IRQHandler+0x514>
      return;
 80070d6:	bf00      	nop
 80070d8:	e000      	b.n	80070dc <HAL_UART_IRQHandler+0x514>
      return;
 80070da:	bf00      	nop
  }
}
 80070dc:	37e8      	adds	r7, #232	; 0xe8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop

080070e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	4613      	mov	r3, r2
 8007130:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	88fa      	ldrh	r2, [r7, #6]
 800713c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	88fa      	ldrh	r2, [r7, #6]
 8007142:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2222      	movs	r2, #34	; 0x22
 800714e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007170:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	695a      	ldr	r2, [r3, #20]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f042 0201 	orr.w	r2, r2, #1
 8007180:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0220 	orr.w	r2, r2, #32
 8007190:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b095      	sub	sp, #84	; 0x54
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	330c      	adds	r3, #12
 80071ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	330c      	adds	r3, #12
 80071c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071c8:	643a      	str	r2, [r7, #64]	; 0x40
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e5      	bne.n	80071a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3314      	adds	r3, #20
 80071e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3314      	adds	r3, #20
 80071fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e5      	bne.n	80071dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	2b01      	cmp	r3, #1
 8007216:	d119      	bne.n	800724c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	330c      	adds	r3, #12
 800721e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	e853 3f00 	ldrex	r3, [r3]
 8007226:	60bb      	str	r3, [r7, #8]
   return(result);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f023 0310 	bic.w	r3, r3, #16
 800722e:	647b      	str	r3, [r7, #68]	; 0x44
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	330c      	adds	r3, #12
 8007236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007238:	61ba      	str	r2, [r7, #24]
 800723a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723c:	6979      	ldr	r1, [r7, #20]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	e841 2300 	strex	r3, r2, [r1]
 8007244:	613b      	str	r3, [r7, #16]
   return(result);
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1e5      	bne.n	8007218 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2220      	movs	r2, #32
 8007250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	631a      	str	r2, [r3, #48]	; 0x30
}
 800725a:	bf00      	nop
 800725c:	3754      	adds	r7, #84	; 0x54
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b084      	sub	sp, #16
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f7ff ff39 	bl	80070f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800728e:	b480      	push	{r7}
 8007290:	b085      	sub	sp, #20
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b21      	cmp	r3, #33	; 0x21
 80072a0:	d13e      	bne.n	8007320 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072aa:	d114      	bne.n	80072d6 <UART_Transmit_IT+0x48>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d110      	bne.n	80072d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	1c9a      	adds	r2, r3, #2
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	621a      	str	r2, [r3, #32]
 80072d4:	e008      	b.n	80072e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	1c59      	adds	r1, r3, #1
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6211      	str	r1, [r2, #32]
 80072e0:	781a      	ldrb	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	4619      	mov	r1, r3
 80072f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10f      	bne.n	800731c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800730a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800731a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	e000      	b.n	8007322 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007320:	2302      	movs	r3, #2
  }
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2220      	movs	r2, #32
 800734a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7ff fec8 	bl	80070e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b08c      	sub	sp, #48	; 0x30
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b22      	cmp	r3, #34	; 0x22
 8007370:	f040 80ab 	bne.w	80074ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800737c:	d117      	bne.n	80073ae <UART_Receive_IT+0x50>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d113      	bne.n	80073ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739c:	b29a      	uxth	r2, r3
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a6:	1c9a      	adds	r2, r3, #2
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	629a      	str	r2, [r3, #40]	; 0x28
 80073ac:	e026      	b.n	80073fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c0:	d007      	beq.n	80073d2 <UART_Receive_IT+0x74>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10a      	bne.n	80073e0 <UART_Receive_IT+0x82>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d106      	bne.n	80073e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	e008      	b.n	80073f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f6:	1c5a      	adds	r2, r3, #1
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007400:	b29b      	uxth	r3, r3
 8007402:	3b01      	subs	r3, #1
 8007404:	b29b      	uxth	r3, r3
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	4619      	mov	r1, r3
 800740a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800740c:	2b00      	cmp	r3, #0
 800740e:	d15a      	bne.n	80074c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0220 	bic.w	r2, r2, #32
 800741e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68da      	ldr	r2, [r3, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800742e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	695a      	ldr	r2, [r3, #20]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0201 	bic.w	r2, r2, #1
 800743e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2220      	movs	r2, #32
 8007444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744c:	2b01      	cmp	r3, #1
 800744e:	d135      	bne.n	80074bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	330c      	adds	r3, #12
 800745c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	613b      	str	r3, [r7, #16]
   return(result);
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f023 0310 	bic.w	r3, r3, #16
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	330c      	adds	r3, #12
 8007474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007476:	623a      	str	r2, [r7, #32]
 8007478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	69f9      	ldr	r1, [r7, #28]
 800747c:	6a3a      	ldr	r2, [r7, #32]
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	61bb      	str	r3, [r7, #24]
   return(result);
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e5      	bne.n	8007456 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0310 	and.w	r3, r3, #16
 8007494:	2b10      	cmp	r3, #16
 8007496:	d10a      	bne.n	80074ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff fe29 	bl	800710c <HAL_UARTEx_RxEventCallback>
 80074ba:	e002      	b.n	80074c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7f9 fecb 	bl	8001258 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e002      	b.n	80074cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	e000      	b.n	80074cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80074ca:	2302      	movs	r3, #2
  }
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3730      	adds	r7, #48	; 0x30
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074d8:	b0c0      	sub	sp, #256	; 0x100
 80074da:	af00      	add	r7, sp, #0
 80074dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f0:	68d9      	ldr	r1, [r3, #12]
 80074f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	ea40 0301 	orr.w	r3, r0, r1
 80074fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	431a      	orrs	r2, r3
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	431a      	orrs	r2, r3
 8007514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800752c:	f021 010c 	bic.w	r1, r1, #12
 8007530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800753a:	430b      	orrs	r3, r1
 800753c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800753e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800754a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754e:	6999      	ldr	r1, [r3, #24]
 8007550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	ea40 0301 	orr.w	r3, r0, r1
 800755a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	4b8f      	ldr	r3, [pc, #572]	; (80077a0 <UART_SetConfig+0x2cc>)
 8007564:	429a      	cmp	r2, r3
 8007566:	d005      	beq.n	8007574 <UART_SetConfig+0xa0>
 8007568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	4b8d      	ldr	r3, [pc, #564]	; (80077a4 <UART_SetConfig+0x2d0>)
 8007570:	429a      	cmp	r2, r3
 8007572:	d104      	bne.n	800757e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007574:	f7fe fbce 	bl	8005d14 <HAL_RCC_GetPCLK2Freq>
 8007578:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800757c:	e003      	b.n	8007586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800757e:	f7fe fbb5 	bl	8005cec <HAL_RCC_GetPCLK1Freq>
 8007582:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007590:	f040 810c 	bne.w	80077ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007598:	2200      	movs	r2, #0
 800759a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800759e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80075a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80075a6:	4622      	mov	r2, r4
 80075a8:	462b      	mov	r3, r5
 80075aa:	1891      	adds	r1, r2, r2
 80075ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80075ae:	415b      	adcs	r3, r3
 80075b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075b6:	4621      	mov	r1, r4
 80075b8:	eb12 0801 	adds.w	r8, r2, r1
 80075bc:	4629      	mov	r1, r5
 80075be:	eb43 0901 	adc.w	r9, r3, r1
 80075c2:	f04f 0200 	mov.w	r2, #0
 80075c6:	f04f 0300 	mov.w	r3, #0
 80075ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075d6:	4690      	mov	r8, r2
 80075d8:	4699      	mov	r9, r3
 80075da:	4623      	mov	r3, r4
 80075dc:	eb18 0303 	adds.w	r3, r8, r3
 80075e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075e4:	462b      	mov	r3, r5
 80075e6:	eb49 0303 	adc.w	r3, r9, r3
 80075ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80075fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007602:	460b      	mov	r3, r1
 8007604:	18db      	adds	r3, r3, r3
 8007606:	653b      	str	r3, [r7, #80]	; 0x50
 8007608:	4613      	mov	r3, r2
 800760a:	eb42 0303 	adc.w	r3, r2, r3
 800760e:	657b      	str	r3, [r7, #84]	; 0x54
 8007610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007618:	f7f8 fe3a 	bl	8000290 <__aeabi_uldivmod>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4b61      	ldr	r3, [pc, #388]	; (80077a8 <UART_SetConfig+0x2d4>)
 8007622:	fba3 2302 	umull	r2, r3, r3, r2
 8007626:	095b      	lsrs	r3, r3, #5
 8007628:	011c      	lsls	r4, r3, #4
 800762a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800762e:	2200      	movs	r2, #0
 8007630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007634:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800763c:	4642      	mov	r2, r8
 800763e:	464b      	mov	r3, r9
 8007640:	1891      	adds	r1, r2, r2
 8007642:	64b9      	str	r1, [r7, #72]	; 0x48
 8007644:	415b      	adcs	r3, r3
 8007646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800764c:	4641      	mov	r1, r8
 800764e:	eb12 0a01 	adds.w	sl, r2, r1
 8007652:	4649      	mov	r1, r9
 8007654:	eb43 0b01 	adc.w	fp, r3, r1
 8007658:	f04f 0200 	mov.w	r2, #0
 800765c:	f04f 0300 	mov.w	r3, #0
 8007660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800766c:	4692      	mov	sl, r2
 800766e:	469b      	mov	fp, r3
 8007670:	4643      	mov	r3, r8
 8007672:	eb1a 0303 	adds.w	r3, sl, r3
 8007676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800767a:	464b      	mov	r3, r9
 800767c:	eb4b 0303 	adc.w	r3, fp, r3
 8007680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007690:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007698:	460b      	mov	r3, r1
 800769a:	18db      	adds	r3, r3, r3
 800769c:	643b      	str	r3, [r7, #64]	; 0x40
 800769e:	4613      	mov	r3, r2
 80076a0:	eb42 0303 	adc.w	r3, r2, r3
 80076a4:	647b      	str	r3, [r7, #68]	; 0x44
 80076a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076ae:	f7f8 fdef 	bl	8000290 <__aeabi_uldivmod>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4611      	mov	r1, r2
 80076b8:	4b3b      	ldr	r3, [pc, #236]	; (80077a8 <UART_SetConfig+0x2d4>)
 80076ba:	fba3 2301 	umull	r2, r3, r3, r1
 80076be:	095b      	lsrs	r3, r3, #5
 80076c0:	2264      	movs	r2, #100	; 0x64
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	1acb      	subs	r3, r1, r3
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076ce:	4b36      	ldr	r3, [pc, #216]	; (80077a8 <UART_SetConfig+0x2d4>)
 80076d0:	fba3 2302 	umull	r2, r3, r3, r2
 80076d4:	095b      	lsrs	r3, r3, #5
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076dc:	441c      	add	r4, r3
 80076de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076e2:	2200      	movs	r2, #0
 80076e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076f0:	4642      	mov	r2, r8
 80076f2:	464b      	mov	r3, r9
 80076f4:	1891      	adds	r1, r2, r2
 80076f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80076f8:	415b      	adcs	r3, r3
 80076fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007700:	4641      	mov	r1, r8
 8007702:	1851      	adds	r1, r2, r1
 8007704:	6339      	str	r1, [r7, #48]	; 0x30
 8007706:	4649      	mov	r1, r9
 8007708:	414b      	adcs	r3, r1
 800770a:	637b      	str	r3, [r7, #52]	; 0x34
 800770c:	f04f 0200 	mov.w	r2, #0
 8007710:	f04f 0300 	mov.w	r3, #0
 8007714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007718:	4659      	mov	r1, fp
 800771a:	00cb      	lsls	r3, r1, #3
 800771c:	4651      	mov	r1, sl
 800771e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007722:	4651      	mov	r1, sl
 8007724:	00ca      	lsls	r2, r1, #3
 8007726:	4610      	mov	r0, r2
 8007728:	4619      	mov	r1, r3
 800772a:	4603      	mov	r3, r0
 800772c:	4642      	mov	r2, r8
 800772e:	189b      	adds	r3, r3, r2
 8007730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007734:	464b      	mov	r3, r9
 8007736:	460a      	mov	r2, r1
 8007738:	eb42 0303 	adc.w	r3, r2, r3
 800773c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800774c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007754:	460b      	mov	r3, r1
 8007756:	18db      	adds	r3, r3, r3
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28
 800775a:	4613      	mov	r3, r2
 800775c:	eb42 0303 	adc.w	r3, r2, r3
 8007760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800776a:	f7f8 fd91 	bl	8000290 <__aeabi_uldivmod>
 800776e:	4602      	mov	r2, r0
 8007770:	460b      	mov	r3, r1
 8007772:	4b0d      	ldr	r3, [pc, #52]	; (80077a8 <UART_SetConfig+0x2d4>)
 8007774:	fba3 1302 	umull	r1, r3, r3, r2
 8007778:	095b      	lsrs	r3, r3, #5
 800777a:	2164      	movs	r1, #100	; 0x64
 800777c:	fb01 f303 	mul.w	r3, r1, r3
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	3332      	adds	r3, #50	; 0x32
 8007786:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <UART_SetConfig+0x2d4>)
 8007788:	fba2 2303 	umull	r2, r3, r2, r3
 800778c:	095b      	lsrs	r3, r3, #5
 800778e:	f003 0207 	and.w	r2, r3, #7
 8007792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4422      	add	r2, r4
 800779a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800779c:	e105      	b.n	80079aa <UART_SetConfig+0x4d6>
 800779e:	bf00      	nop
 80077a0:	40011000 	.word	0x40011000
 80077a4:	40011400 	.word	0x40011400
 80077a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077b0:	2200      	movs	r2, #0
 80077b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077be:	4642      	mov	r2, r8
 80077c0:	464b      	mov	r3, r9
 80077c2:	1891      	adds	r1, r2, r2
 80077c4:	6239      	str	r1, [r7, #32]
 80077c6:	415b      	adcs	r3, r3
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
 80077ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077ce:	4641      	mov	r1, r8
 80077d0:	1854      	adds	r4, r2, r1
 80077d2:	4649      	mov	r1, r9
 80077d4:	eb43 0501 	adc.w	r5, r3, r1
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	00eb      	lsls	r3, r5, #3
 80077e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077e6:	00e2      	lsls	r2, r4, #3
 80077e8:	4614      	mov	r4, r2
 80077ea:	461d      	mov	r5, r3
 80077ec:	4643      	mov	r3, r8
 80077ee:	18e3      	adds	r3, r4, r3
 80077f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077f4:	464b      	mov	r3, r9
 80077f6:	eb45 0303 	adc.w	r3, r5, r3
 80077fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800780a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800780e:	f04f 0200 	mov.w	r2, #0
 8007812:	f04f 0300 	mov.w	r3, #0
 8007816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800781a:	4629      	mov	r1, r5
 800781c:	008b      	lsls	r3, r1, #2
 800781e:	4621      	mov	r1, r4
 8007820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007824:	4621      	mov	r1, r4
 8007826:	008a      	lsls	r2, r1, #2
 8007828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800782c:	f7f8 fd30 	bl	8000290 <__aeabi_uldivmod>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	4b60      	ldr	r3, [pc, #384]	; (80079b8 <UART_SetConfig+0x4e4>)
 8007836:	fba3 2302 	umull	r2, r3, r3, r2
 800783a:	095b      	lsrs	r3, r3, #5
 800783c:	011c      	lsls	r4, r3, #4
 800783e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007842:	2200      	movs	r2, #0
 8007844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007848:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800784c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007850:	4642      	mov	r2, r8
 8007852:	464b      	mov	r3, r9
 8007854:	1891      	adds	r1, r2, r2
 8007856:	61b9      	str	r1, [r7, #24]
 8007858:	415b      	adcs	r3, r3
 800785a:	61fb      	str	r3, [r7, #28]
 800785c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007860:	4641      	mov	r1, r8
 8007862:	1851      	adds	r1, r2, r1
 8007864:	6139      	str	r1, [r7, #16]
 8007866:	4649      	mov	r1, r9
 8007868:	414b      	adcs	r3, r1
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	f04f 0300 	mov.w	r3, #0
 8007874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007878:	4659      	mov	r1, fp
 800787a:	00cb      	lsls	r3, r1, #3
 800787c:	4651      	mov	r1, sl
 800787e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007882:	4651      	mov	r1, sl
 8007884:	00ca      	lsls	r2, r1, #3
 8007886:	4610      	mov	r0, r2
 8007888:	4619      	mov	r1, r3
 800788a:	4603      	mov	r3, r0
 800788c:	4642      	mov	r2, r8
 800788e:	189b      	adds	r3, r3, r2
 8007890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007894:	464b      	mov	r3, r9
 8007896:	460a      	mov	r2, r1
 8007898:	eb42 0303 	adc.w	r3, r2, r3
 800789c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80078aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	f04f 0300 	mov.w	r3, #0
 80078b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078b8:	4649      	mov	r1, r9
 80078ba:	008b      	lsls	r3, r1, #2
 80078bc:	4641      	mov	r1, r8
 80078be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078c2:	4641      	mov	r1, r8
 80078c4:	008a      	lsls	r2, r1, #2
 80078c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078ca:	f7f8 fce1 	bl	8000290 <__aeabi_uldivmod>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4b39      	ldr	r3, [pc, #228]	; (80079b8 <UART_SetConfig+0x4e4>)
 80078d4:	fba3 1302 	umull	r1, r3, r3, r2
 80078d8:	095b      	lsrs	r3, r3, #5
 80078da:	2164      	movs	r1, #100	; 0x64
 80078dc:	fb01 f303 	mul.w	r3, r1, r3
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	3332      	adds	r3, #50	; 0x32
 80078e6:	4a34      	ldr	r2, [pc, #208]	; (80079b8 <UART_SetConfig+0x4e4>)
 80078e8:	fba2 2303 	umull	r2, r3, r2, r3
 80078ec:	095b      	lsrs	r3, r3, #5
 80078ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078f2:	441c      	add	r4, r3
 80078f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078f8:	2200      	movs	r2, #0
 80078fa:	673b      	str	r3, [r7, #112]	; 0x70
 80078fc:	677a      	str	r2, [r7, #116]	; 0x74
 80078fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007902:	4642      	mov	r2, r8
 8007904:	464b      	mov	r3, r9
 8007906:	1891      	adds	r1, r2, r2
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	415b      	adcs	r3, r3
 800790c:	60fb      	str	r3, [r7, #12]
 800790e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007912:	4641      	mov	r1, r8
 8007914:	1851      	adds	r1, r2, r1
 8007916:	6039      	str	r1, [r7, #0]
 8007918:	4649      	mov	r1, r9
 800791a:	414b      	adcs	r3, r1
 800791c:	607b      	str	r3, [r7, #4]
 800791e:	f04f 0200 	mov.w	r2, #0
 8007922:	f04f 0300 	mov.w	r3, #0
 8007926:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800792a:	4659      	mov	r1, fp
 800792c:	00cb      	lsls	r3, r1, #3
 800792e:	4651      	mov	r1, sl
 8007930:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007934:	4651      	mov	r1, sl
 8007936:	00ca      	lsls	r2, r1, #3
 8007938:	4610      	mov	r0, r2
 800793a:	4619      	mov	r1, r3
 800793c:	4603      	mov	r3, r0
 800793e:	4642      	mov	r2, r8
 8007940:	189b      	adds	r3, r3, r2
 8007942:	66bb      	str	r3, [r7, #104]	; 0x68
 8007944:	464b      	mov	r3, r9
 8007946:	460a      	mov	r2, r1
 8007948:	eb42 0303 	adc.w	r3, r2, r3
 800794c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800794e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	663b      	str	r3, [r7, #96]	; 0x60
 8007958:	667a      	str	r2, [r7, #100]	; 0x64
 800795a:	f04f 0200 	mov.w	r2, #0
 800795e:	f04f 0300 	mov.w	r3, #0
 8007962:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007966:	4649      	mov	r1, r9
 8007968:	008b      	lsls	r3, r1, #2
 800796a:	4641      	mov	r1, r8
 800796c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007970:	4641      	mov	r1, r8
 8007972:	008a      	lsls	r2, r1, #2
 8007974:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007978:	f7f8 fc8a 	bl	8000290 <__aeabi_uldivmod>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4b0d      	ldr	r3, [pc, #52]	; (80079b8 <UART_SetConfig+0x4e4>)
 8007982:	fba3 1302 	umull	r1, r3, r3, r2
 8007986:	095b      	lsrs	r3, r3, #5
 8007988:	2164      	movs	r1, #100	; 0x64
 800798a:	fb01 f303 	mul.w	r3, r1, r3
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	3332      	adds	r3, #50	; 0x32
 8007994:	4a08      	ldr	r2, [pc, #32]	; (80079b8 <UART_SetConfig+0x4e4>)
 8007996:	fba2 2303 	umull	r2, r3, r2, r3
 800799a:	095b      	lsrs	r3, r3, #5
 800799c:	f003 020f 	and.w	r2, r3, #15
 80079a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4422      	add	r2, r4
 80079a8:	609a      	str	r2, [r3, #8]
}
 80079aa:	bf00      	nop
 80079ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079b0:	46bd      	mov	sp, r7
 80079b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079b6:	bf00      	nop
 80079b8:	51eb851f 	.word	0x51eb851f

080079bc <_ZNSaIcEC1Ev>:
 80079bc:	4770      	bx	lr

080079be <_ZNSaIcED1Ev>:
 80079be:	4770      	bx	lr

080079c0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80079c0:	b10a      	cbz	r2, 80079c6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80079c2:	f000 b90d 	b.w	8007be0 <memcpy>
 80079c6:	4770      	bx	lr

080079c8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80079c8:	b10a      	cbz	r2, 80079ce <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80079ca:	f000 b8f9 	b.w	8007bc0 <memcmp>
 80079ce:	4610      	mov	r0, r2
 80079d0:	4770      	bx	lr
	...

080079d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80079d4:	b508      	push	{r3, lr}
 80079d6:	680b      	ldr	r3, [r1, #0]
 80079d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079dc:	d302      	bcc.n	80079e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80079de:	480d      	ldr	r0, [pc, #52]	; (8007a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80079e0:	f000 f8a0 	bl	8007b24 <_ZSt20__throw_length_errorPKc>
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d90b      	bls.n	8007a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80079e8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80079ec:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80079f0:	d206      	bcs.n	8007a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80079f2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80079f6:	bf2a      	itet	cs
 80079f8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80079fc:	6008      	strcc	r0, [r1, #0]
 80079fe:	600b      	strcs	r3, [r1, #0]
 8007a00:	6808      	ldr	r0, [r1, #0]
 8007a02:	3001      	adds	r0, #1
 8007a04:	d501      	bpl.n	8007a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8007a06:	f000 f887 	bl	8007b18 <_ZSt17__throw_bad_allocv>
 8007a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a0e:	f000 b872 	b.w	8007af6 <_Znwj>
 8007a12:	bf00      	nop
 8007a14:	0800871c 	.word	0x0800871c

08007a18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8007a18:	f850 3b08 	ldr.w	r3, [r0], #8
 8007a1c:	4283      	cmp	r3, r0
 8007a1e:	d002      	beq.n	8007a26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 b866 	b.w	8007af2 <_ZdlPv>
 8007a26:	4770      	bx	lr

08007a28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8007a28:	2a01      	cmp	r2, #1
 8007a2a:	b410      	push	{r4}
 8007a2c:	d104      	bne.n	8007a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8007a2e:	780a      	ldrb	r2, [r1, #0]
 8007a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a34:	7002      	strb	r2, [r0, #0]
 8007a36:	4770      	bx	lr
 8007a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a3c:	f7ff bfc0 	b.w	80079c0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08007a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8007a40:	b508      	push	{r3, lr}
 8007a42:	1a52      	subs	r2, r2, r1
 8007a44:	f7ff fff0 	bl	8007a28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007a48:	bd08      	pop	{r3, pc}

08007a4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	f7ff ffe3 	bl	8007a18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007a52:	4620      	mov	r0, r4
 8007a54:	bd10      	pop	{r4, pc}

08007a56 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8007a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a58:	6846      	ldr	r6, [r0, #4]
 8007a5a:	9101      	str	r1, [sp, #4]
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	4608      	mov	r0, r1
 8007a60:	f7f8 fc0e 	bl	8000280 <strlen>
 8007a64:	4286      	cmp	r6, r0
 8007a66:	4604      	mov	r4, r0
 8007a68:	4632      	mov	r2, r6
 8007a6a:	9901      	ldr	r1, [sp, #4]
 8007a6c:	bf28      	it	cs
 8007a6e:	4602      	movcs	r2, r0
 8007a70:	6828      	ldr	r0, [r5, #0]
 8007a72:	f7ff ffa9 	bl	80079c8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8007a76:	b900      	cbnz	r0, 8007a7a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8007a78:	1b30      	subs	r0, r6, r4
 8007a7a:	b002      	add	sp, #8
 8007a7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8007a80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a82:	4604      	mov	r4, r0
 8007a84:	4616      	mov	r6, r2
 8007a86:	460d      	mov	r5, r1
 8007a88:	b919      	cbnz	r1, 8007a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8007a8a:	b112      	cbz	r2, 8007a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8007a8c:	480d      	ldr	r0, [pc, #52]	; (8007ac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8007a8e:	f000 f846 	bl	8007b1e <_ZSt19__throw_logic_errorPKc>
 8007a92:	1b73      	subs	r3, r6, r5
 8007a94:	2b0f      	cmp	r3, #15
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	d907      	bls.n	8007aaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	a901      	add	r1, sp, #4
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f7ff ff98 	bl	80079d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007aa4:	9b01      	ldr	r3, [sp, #4]
 8007aa6:	6020      	str	r0, [r4, #0]
 8007aa8:	60a3      	str	r3, [r4, #8]
 8007aaa:	4632      	mov	r2, r6
 8007aac:	4629      	mov	r1, r5
 8007aae:	6820      	ldr	r0, [r4, #0]
 8007ab0:	f7ff ffc6 	bl	8007a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8007ab4:	9b01      	ldr	r3, [sp, #4]
 8007ab6:	6822      	ldr	r2, [r4, #0]
 8007ab8:	6063      	str	r3, [r4, #4]
 8007aba:	2100      	movs	r1, #0
 8007abc:	54d1      	strb	r1, [r2, r3]
 8007abe:	b002      	add	sp, #8
 8007ac0:	bd70      	pop	{r4, r5, r6, pc}
 8007ac2:	bf00      	nop
 8007ac4:	08008734 	.word	0x08008734

08007ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	f100 0308 	add.w	r3, r0, #8
 8007ace:	4604      	mov	r4, r0
 8007ad0:	6003      	str	r3, [r0, #0]
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	b159      	cbz	r1, 8007aee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8007ad6:	4608      	mov	r0, r1
 8007ad8:	f7f8 fbd2 	bl	8000280 <strlen>
 8007adc:	182a      	adds	r2, r5, r0
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f04f 0300 	mov.w	r3, #0
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	f7ff ffcb 	bl	8007a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007aea:	4620      	mov	r0, r4
 8007aec:	bd38      	pop	{r3, r4, r5, pc}
 8007aee:	2201      	movs	r2, #1
 8007af0:	e7f5      	b.n	8007ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08007af2 <_ZdlPv>:
 8007af2:	f000 b85d 	b.w	8007bb0 <free>

08007af6 <_Znwj>:
 8007af6:	2801      	cmp	r0, #1
 8007af8:	bf38      	it	cc
 8007afa:	2001      	movcc	r0, #1
 8007afc:	b510      	push	{r4, lr}
 8007afe:	4604      	mov	r4, r0
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 f84d 	bl	8007ba0 <malloc>
 8007b06:	b930      	cbnz	r0, 8007b16 <_Znwj+0x20>
 8007b08:	f000 f810 	bl	8007b2c <_ZSt15get_new_handlerv>
 8007b0c:	b908      	cbnz	r0, 8007b12 <_Znwj+0x1c>
 8007b0e:	f000 f815 	bl	8007b3c <abort>
 8007b12:	4780      	blx	r0
 8007b14:	e7f4      	b.n	8007b00 <_Znwj+0xa>
 8007b16:	bd10      	pop	{r4, pc}

08007b18 <_ZSt17__throw_bad_allocv>:
 8007b18:	b508      	push	{r3, lr}
 8007b1a:	f000 f80f 	bl	8007b3c <abort>

08007b1e <_ZSt19__throw_logic_errorPKc>:
 8007b1e:	b508      	push	{r3, lr}
 8007b20:	f000 f80c 	bl	8007b3c <abort>

08007b24 <_ZSt20__throw_length_errorPKc>:
 8007b24:	b508      	push	{r3, lr}
 8007b26:	f000 f809 	bl	8007b3c <abort>
	...

08007b2c <_ZSt15get_new_handlerv>:
 8007b2c:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <_ZSt15get_new_handlerv+0xc>)
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	f3bf 8f5b 	dmb	ish
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	200003bc 	.word	0x200003bc

08007b3c <abort>:
 8007b3c:	b508      	push	{r3, lr}
 8007b3e:	2006      	movs	r0, #6
 8007b40:	f000 f996 	bl	8007e70 <raise>
 8007b44:	2001      	movs	r0, #1
 8007b46:	f7fa f997 	bl	8001e78 <_exit>
	...

08007b4c <__errno>:
 8007b4c:	4b01      	ldr	r3, [pc, #4]	; (8007b54 <__errno+0x8>)
 8007b4e:	6818      	ldr	r0, [r3, #0]
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	2000000c 	.word	0x2000000c

08007b58 <__libc_init_array>:
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	4d0d      	ldr	r5, [pc, #52]	; (8007b90 <__libc_init_array+0x38>)
 8007b5c:	4c0d      	ldr	r4, [pc, #52]	; (8007b94 <__libc_init_array+0x3c>)
 8007b5e:	1b64      	subs	r4, r4, r5
 8007b60:	10a4      	asrs	r4, r4, #2
 8007b62:	2600      	movs	r6, #0
 8007b64:	42a6      	cmp	r6, r4
 8007b66:	d109      	bne.n	8007b7c <__libc_init_array+0x24>
 8007b68:	4d0b      	ldr	r5, [pc, #44]	; (8007b98 <__libc_init_array+0x40>)
 8007b6a:	4c0c      	ldr	r4, [pc, #48]	; (8007b9c <__libc_init_array+0x44>)
 8007b6c:	f000 fd7e 	bl	800866c <_init>
 8007b70:	1b64      	subs	r4, r4, r5
 8007b72:	10a4      	asrs	r4, r4, #2
 8007b74:	2600      	movs	r6, #0
 8007b76:	42a6      	cmp	r6, r4
 8007b78:	d105      	bne.n	8007b86 <__libc_init_array+0x2e>
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b80:	4798      	blx	r3
 8007b82:	3601      	adds	r6, #1
 8007b84:	e7ee      	b.n	8007b64 <__libc_init_array+0xc>
 8007b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8a:	4798      	blx	r3
 8007b8c:	3601      	adds	r6, #1
 8007b8e:	e7f2      	b.n	8007b76 <__libc_init_array+0x1e>
 8007b90:	0800889c 	.word	0x0800889c
 8007b94:	0800889c 	.word	0x0800889c
 8007b98:	0800889c 	.word	0x0800889c
 8007b9c:	080088a4 	.word	0x080088a4

08007ba0 <malloc>:
 8007ba0:	4b02      	ldr	r3, [pc, #8]	; (8007bac <malloc+0xc>)
 8007ba2:	4601      	mov	r1, r0
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	f000 b8b7 	b.w	8007d18 <_malloc_r>
 8007baa:	bf00      	nop
 8007bac:	2000000c 	.word	0x2000000c

08007bb0 <free>:
 8007bb0:	4b02      	ldr	r3, [pc, #8]	; (8007bbc <free+0xc>)
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	f000 b843 	b.w	8007c40 <_free_r>
 8007bba:	bf00      	nop
 8007bbc:	2000000c 	.word	0x2000000c

08007bc0 <memcmp>:
 8007bc0:	b510      	push	{r4, lr}
 8007bc2:	3901      	subs	r1, #1
 8007bc4:	4402      	add	r2, r0
 8007bc6:	4290      	cmp	r0, r2
 8007bc8:	d101      	bne.n	8007bce <memcmp+0xe>
 8007bca:	2000      	movs	r0, #0
 8007bcc:	e005      	b.n	8007bda <memcmp+0x1a>
 8007bce:	7803      	ldrb	r3, [r0, #0]
 8007bd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007bd4:	42a3      	cmp	r3, r4
 8007bd6:	d001      	beq.n	8007bdc <memcmp+0x1c>
 8007bd8:	1b18      	subs	r0, r3, r4
 8007bda:	bd10      	pop	{r4, pc}
 8007bdc:	3001      	adds	r0, #1
 8007bde:	e7f2      	b.n	8007bc6 <memcmp+0x6>

08007be0 <memcpy>:
 8007be0:	440a      	add	r2, r1
 8007be2:	4291      	cmp	r1, r2
 8007be4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007be8:	d100      	bne.n	8007bec <memcpy+0xc>
 8007bea:	4770      	bx	lr
 8007bec:	b510      	push	{r4, lr}
 8007bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bf6:	4291      	cmp	r1, r2
 8007bf8:	d1f9      	bne.n	8007bee <memcpy+0xe>
 8007bfa:	bd10      	pop	{r4, pc}

08007bfc <memmove>:
 8007bfc:	4288      	cmp	r0, r1
 8007bfe:	b510      	push	{r4, lr}
 8007c00:	eb01 0402 	add.w	r4, r1, r2
 8007c04:	d902      	bls.n	8007c0c <memmove+0x10>
 8007c06:	4284      	cmp	r4, r0
 8007c08:	4623      	mov	r3, r4
 8007c0a:	d807      	bhi.n	8007c1c <memmove+0x20>
 8007c0c:	1e43      	subs	r3, r0, #1
 8007c0e:	42a1      	cmp	r1, r4
 8007c10:	d008      	beq.n	8007c24 <memmove+0x28>
 8007c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c1a:	e7f8      	b.n	8007c0e <memmove+0x12>
 8007c1c:	4402      	add	r2, r0
 8007c1e:	4601      	mov	r1, r0
 8007c20:	428a      	cmp	r2, r1
 8007c22:	d100      	bne.n	8007c26 <memmove+0x2a>
 8007c24:	bd10      	pop	{r4, pc}
 8007c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c2e:	e7f7      	b.n	8007c20 <memmove+0x24>

08007c30 <memset>:
 8007c30:	4402      	add	r2, r0
 8007c32:	4603      	mov	r3, r0
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d100      	bne.n	8007c3a <memset+0xa>
 8007c38:	4770      	bx	lr
 8007c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c3e:	e7f9      	b.n	8007c34 <memset+0x4>

08007c40 <_free_r>:
 8007c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c42:	2900      	cmp	r1, #0
 8007c44:	d044      	beq.n	8007cd0 <_free_r+0x90>
 8007c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c4a:	9001      	str	r0, [sp, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8007c52:	bfb8      	it	lt
 8007c54:	18e4      	addlt	r4, r4, r3
 8007c56:	f000 f9d3 	bl	8008000 <__malloc_lock>
 8007c5a:	4a1e      	ldr	r2, [pc, #120]	; (8007cd4 <_free_r+0x94>)
 8007c5c:	9801      	ldr	r0, [sp, #4]
 8007c5e:	6813      	ldr	r3, [r2, #0]
 8007c60:	b933      	cbnz	r3, 8007c70 <_free_r+0x30>
 8007c62:	6063      	str	r3, [r4, #4]
 8007c64:	6014      	str	r4, [r2, #0]
 8007c66:	b003      	add	sp, #12
 8007c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c6c:	f000 b9ce 	b.w	800800c <__malloc_unlock>
 8007c70:	42a3      	cmp	r3, r4
 8007c72:	d908      	bls.n	8007c86 <_free_r+0x46>
 8007c74:	6825      	ldr	r5, [r4, #0]
 8007c76:	1961      	adds	r1, r4, r5
 8007c78:	428b      	cmp	r3, r1
 8007c7a:	bf01      	itttt	eq
 8007c7c:	6819      	ldreq	r1, [r3, #0]
 8007c7e:	685b      	ldreq	r3, [r3, #4]
 8007c80:	1949      	addeq	r1, r1, r5
 8007c82:	6021      	streq	r1, [r4, #0]
 8007c84:	e7ed      	b.n	8007c62 <_free_r+0x22>
 8007c86:	461a      	mov	r2, r3
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	b10b      	cbz	r3, 8007c90 <_free_r+0x50>
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d9fa      	bls.n	8007c86 <_free_r+0x46>
 8007c90:	6811      	ldr	r1, [r2, #0]
 8007c92:	1855      	adds	r5, r2, r1
 8007c94:	42a5      	cmp	r5, r4
 8007c96:	d10b      	bne.n	8007cb0 <_free_r+0x70>
 8007c98:	6824      	ldr	r4, [r4, #0]
 8007c9a:	4421      	add	r1, r4
 8007c9c:	1854      	adds	r4, r2, r1
 8007c9e:	42a3      	cmp	r3, r4
 8007ca0:	6011      	str	r1, [r2, #0]
 8007ca2:	d1e0      	bne.n	8007c66 <_free_r+0x26>
 8007ca4:	681c      	ldr	r4, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	6053      	str	r3, [r2, #4]
 8007caa:	4421      	add	r1, r4
 8007cac:	6011      	str	r1, [r2, #0]
 8007cae:	e7da      	b.n	8007c66 <_free_r+0x26>
 8007cb0:	d902      	bls.n	8007cb8 <_free_r+0x78>
 8007cb2:	230c      	movs	r3, #12
 8007cb4:	6003      	str	r3, [r0, #0]
 8007cb6:	e7d6      	b.n	8007c66 <_free_r+0x26>
 8007cb8:	6825      	ldr	r5, [r4, #0]
 8007cba:	1961      	adds	r1, r4, r5
 8007cbc:	428b      	cmp	r3, r1
 8007cbe:	bf04      	itt	eq
 8007cc0:	6819      	ldreq	r1, [r3, #0]
 8007cc2:	685b      	ldreq	r3, [r3, #4]
 8007cc4:	6063      	str	r3, [r4, #4]
 8007cc6:	bf04      	itt	eq
 8007cc8:	1949      	addeq	r1, r1, r5
 8007cca:	6021      	streq	r1, [r4, #0]
 8007ccc:	6054      	str	r4, [r2, #4]
 8007cce:	e7ca      	b.n	8007c66 <_free_r+0x26>
 8007cd0:	b003      	add	sp, #12
 8007cd2:	bd30      	pop	{r4, r5, pc}
 8007cd4:	200003c0 	.word	0x200003c0

08007cd8 <sbrk_aligned>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	4e0e      	ldr	r6, [pc, #56]	; (8007d14 <sbrk_aligned+0x3c>)
 8007cdc:	460c      	mov	r4, r1
 8007cde:	6831      	ldr	r1, [r6, #0]
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	b911      	cbnz	r1, 8007cea <sbrk_aligned+0x12>
 8007ce4:	f000 f88c 	bl	8007e00 <_sbrk_r>
 8007ce8:	6030      	str	r0, [r6, #0]
 8007cea:	4621      	mov	r1, r4
 8007cec:	4628      	mov	r0, r5
 8007cee:	f000 f887 	bl	8007e00 <_sbrk_r>
 8007cf2:	1c43      	adds	r3, r0, #1
 8007cf4:	d00a      	beq.n	8007d0c <sbrk_aligned+0x34>
 8007cf6:	1cc4      	adds	r4, r0, #3
 8007cf8:	f024 0403 	bic.w	r4, r4, #3
 8007cfc:	42a0      	cmp	r0, r4
 8007cfe:	d007      	beq.n	8007d10 <sbrk_aligned+0x38>
 8007d00:	1a21      	subs	r1, r4, r0
 8007d02:	4628      	mov	r0, r5
 8007d04:	f000 f87c 	bl	8007e00 <_sbrk_r>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d101      	bne.n	8007d10 <sbrk_aligned+0x38>
 8007d0c:	f04f 34ff 	mov.w	r4, #4294967295
 8007d10:	4620      	mov	r0, r4
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	200003c4 	.word	0x200003c4

08007d18 <_malloc_r>:
 8007d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1c:	1ccd      	adds	r5, r1, #3
 8007d1e:	f025 0503 	bic.w	r5, r5, #3
 8007d22:	3508      	adds	r5, #8
 8007d24:	2d0c      	cmp	r5, #12
 8007d26:	bf38      	it	cc
 8007d28:	250c      	movcc	r5, #12
 8007d2a:	2d00      	cmp	r5, #0
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	db01      	blt.n	8007d34 <_malloc_r+0x1c>
 8007d30:	42a9      	cmp	r1, r5
 8007d32:	d905      	bls.n	8007d40 <_malloc_r+0x28>
 8007d34:	230c      	movs	r3, #12
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	2600      	movs	r6, #0
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d40:	4e2e      	ldr	r6, [pc, #184]	; (8007dfc <_malloc_r+0xe4>)
 8007d42:	f000 f95d 	bl	8008000 <__malloc_lock>
 8007d46:	6833      	ldr	r3, [r6, #0]
 8007d48:	461c      	mov	r4, r3
 8007d4a:	bb34      	cbnz	r4, 8007d9a <_malloc_r+0x82>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4638      	mov	r0, r7
 8007d50:	f7ff ffc2 	bl	8007cd8 <sbrk_aligned>
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	4604      	mov	r4, r0
 8007d58:	d14d      	bne.n	8007df6 <_malloc_r+0xde>
 8007d5a:	6834      	ldr	r4, [r6, #0]
 8007d5c:	4626      	mov	r6, r4
 8007d5e:	2e00      	cmp	r6, #0
 8007d60:	d140      	bne.n	8007de4 <_malloc_r+0xcc>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	4631      	mov	r1, r6
 8007d66:	4638      	mov	r0, r7
 8007d68:	eb04 0803 	add.w	r8, r4, r3
 8007d6c:	f000 f848 	bl	8007e00 <_sbrk_r>
 8007d70:	4580      	cmp	r8, r0
 8007d72:	d13a      	bne.n	8007dea <_malloc_r+0xd2>
 8007d74:	6821      	ldr	r1, [r4, #0]
 8007d76:	3503      	adds	r5, #3
 8007d78:	1a6d      	subs	r5, r5, r1
 8007d7a:	f025 0503 	bic.w	r5, r5, #3
 8007d7e:	3508      	adds	r5, #8
 8007d80:	2d0c      	cmp	r5, #12
 8007d82:	bf38      	it	cc
 8007d84:	250c      	movcc	r5, #12
 8007d86:	4629      	mov	r1, r5
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f7ff ffa5 	bl	8007cd8 <sbrk_aligned>
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d02b      	beq.n	8007dea <_malloc_r+0xd2>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	442b      	add	r3, r5
 8007d96:	6023      	str	r3, [r4, #0]
 8007d98:	e00e      	b.n	8007db8 <_malloc_r+0xa0>
 8007d9a:	6822      	ldr	r2, [r4, #0]
 8007d9c:	1b52      	subs	r2, r2, r5
 8007d9e:	d41e      	bmi.n	8007dde <_malloc_r+0xc6>
 8007da0:	2a0b      	cmp	r2, #11
 8007da2:	d916      	bls.n	8007dd2 <_malloc_r+0xba>
 8007da4:	1961      	adds	r1, r4, r5
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	6025      	str	r5, [r4, #0]
 8007daa:	bf18      	it	ne
 8007dac:	6059      	strne	r1, [r3, #4]
 8007dae:	6863      	ldr	r3, [r4, #4]
 8007db0:	bf08      	it	eq
 8007db2:	6031      	streq	r1, [r6, #0]
 8007db4:	5162      	str	r2, [r4, r5]
 8007db6:	604b      	str	r3, [r1, #4]
 8007db8:	4638      	mov	r0, r7
 8007dba:	f104 060b 	add.w	r6, r4, #11
 8007dbe:	f000 f925 	bl	800800c <__malloc_unlock>
 8007dc2:	f026 0607 	bic.w	r6, r6, #7
 8007dc6:	1d23      	adds	r3, r4, #4
 8007dc8:	1af2      	subs	r2, r6, r3
 8007dca:	d0b6      	beq.n	8007d3a <_malloc_r+0x22>
 8007dcc:	1b9b      	subs	r3, r3, r6
 8007dce:	50a3      	str	r3, [r4, r2]
 8007dd0:	e7b3      	b.n	8007d3a <_malloc_r+0x22>
 8007dd2:	6862      	ldr	r2, [r4, #4]
 8007dd4:	42a3      	cmp	r3, r4
 8007dd6:	bf0c      	ite	eq
 8007dd8:	6032      	streq	r2, [r6, #0]
 8007dda:	605a      	strne	r2, [r3, #4]
 8007ddc:	e7ec      	b.n	8007db8 <_malloc_r+0xa0>
 8007dde:	4623      	mov	r3, r4
 8007de0:	6864      	ldr	r4, [r4, #4]
 8007de2:	e7b2      	b.n	8007d4a <_malloc_r+0x32>
 8007de4:	4634      	mov	r4, r6
 8007de6:	6876      	ldr	r6, [r6, #4]
 8007de8:	e7b9      	b.n	8007d5e <_malloc_r+0x46>
 8007dea:	230c      	movs	r3, #12
 8007dec:	603b      	str	r3, [r7, #0]
 8007dee:	4638      	mov	r0, r7
 8007df0:	f000 f90c 	bl	800800c <__malloc_unlock>
 8007df4:	e7a1      	b.n	8007d3a <_malloc_r+0x22>
 8007df6:	6025      	str	r5, [r4, #0]
 8007df8:	e7de      	b.n	8007db8 <_malloc_r+0xa0>
 8007dfa:	bf00      	nop
 8007dfc:	200003c0 	.word	0x200003c0

08007e00 <_sbrk_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4d06      	ldr	r5, [pc, #24]	; (8007e1c <_sbrk_r+0x1c>)
 8007e04:	2300      	movs	r3, #0
 8007e06:	4604      	mov	r4, r0
 8007e08:	4608      	mov	r0, r1
 8007e0a:	602b      	str	r3, [r5, #0]
 8007e0c:	f7fa f83e 	bl	8001e8c <_sbrk>
 8007e10:	1c43      	adds	r3, r0, #1
 8007e12:	d102      	bne.n	8007e1a <_sbrk_r+0x1a>
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	b103      	cbz	r3, 8007e1a <_sbrk_r+0x1a>
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	200003c8 	.word	0x200003c8

08007e20 <_raise_r>:
 8007e20:	291f      	cmp	r1, #31
 8007e22:	b538      	push	{r3, r4, r5, lr}
 8007e24:	4604      	mov	r4, r0
 8007e26:	460d      	mov	r5, r1
 8007e28:	d904      	bls.n	8007e34 <_raise_r+0x14>
 8007e2a:	2316      	movs	r3, #22
 8007e2c:	6003      	str	r3, [r0, #0]
 8007e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e36:	b112      	cbz	r2, 8007e3e <_raise_r+0x1e>
 8007e38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e3c:	b94b      	cbnz	r3, 8007e52 <_raise_r+0x32>
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f000 f830 	bl	8007ea4 <_getpid_r>
 8007e44:	462a      	mov	r2, r5
 8007e46:	4601      	mov	r1, r0
 8007e48:	4620      	mov	r0, r4
 8007e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e4e:	f000 b817 	b.w	8007e80 <_kill_r>
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d00a      	beq.n	8007e6c <_raise_r+0x4c>
 8007e56:	1c59      	adds	r1, r3, #1
 8007e58:	d103      	bne.n	8007e62 <_raise_r+0x42>
 8007e5a:	2316      	movs	r3, #22
 8007e5c:	6003      	str	r3, [r0, #0]
 8007e5e:	2001      	movs	r0, #1
 8007e60:	e7e7      	b.n	8007e32 <_raise_r+0x12>
 8007e62:	2400      	movs	r4, #0
 8007e64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e68:	4628      	mov	r0, r5
 8007e6a:	4798      	blx	r3
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	e7e0      	b.n	8007e32 <_raise_r+0x12>

08007e70 <raise>:
 8007e70:	4b02      	ldr	r3, [pc, #8]	; (8007e7c <raise+0xc>)
 8007e72:	4601      	mov	r1, r0
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	f7ff bfd3 	b.w	8007e20 <_raise_r>
 8007e7a:	bf00      	nop
 8007e7c:	2000000c 	.word	0x2000000c

08007e80 <_kill_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	4d07      	ldr	r5, [pc, #28]	; (8007ea0 <_kill_r+0x20>)
 8007e84:	2300      	movs	r3, #0
 8007e86:	4604      	mov	r4, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	f7f9 ffe3 	bl	8001e58 <_kill>
 8007e92:	1c43      	adds	r3, r0, #1
 8007e94:	d102      	bne.n	8007e9c <_kill_r+0x1c>
 8007e96:	682b      	ldr	r3, [r5, #0]
 8007e98:	b103      	cbz	r3, 8007e9c <_kill_r+0x1c>
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	bd38      	pop	{r3, r4, r5, pc}
 8007e9e:	bf00      	nop
 8007ea0:	200003c8 	.word	0x200003c8

08007ea4 <_getpid_r>:
 8007ea4:	f7f9 bfd0 	b.w	8001e48 <_getpid>

08007ea8 <siprintf>:
 8007ea8:	b40e      	push	{r1, r2, r3}
 8007eaa:	b500      	push	{lr}
 8007eac:	b09c      	sub	sp, #112	; 0x70
 8007eae:	ab1d      	add	r3, sp, #116	; 0x74
 8007eb0:	9002      	str	r0, [sp, #8]
 8007eb2:	9006      	str	r0, [sp, #24]
 8007eb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eb8:	4809      	ldr	r0, [pc, #36]	; (8007ee0 <siprintf+0x38>)
 8007eba:	9107      	str	r1, [sp, #28]
 8007ebc:	9104      	str	r1, [sp, #16]
 8007ebe:	4909      	ldr	r1, [pc, #36]	; (8007ee4 <siprintf+0x3c>)
 8007ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec4:	9105      	str	r1, [sp, #20]
 8007ec6:	6800      	ldr	r0, [r0, #0]
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	a902      	add	r1, sp, #8
 8007ecc:	f000 f900 	bl	80080d0 <_svfiprintf_r>
 8007ed0:	9b02      	ldr	r3, [sp, #8]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	b01c      	add	sp, #112	; 0x70
 8007ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007edc:	b003      	add	sp, #12
 8007ede:	4770      	bx	lr
 8007ee0:	2000000c 	.word	0x2000000c
 8007ee4:	ffff0208 	.word	0xffff0208

08007ee8 <_strtol_l.constprop.0>:
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eee:	d001      	beq.n	8007ef4 <_strtol_l.constprop.0+0xc>
 8007ef0:	2b24      	cmp	r3, #36	; 0x24
 8007ef2:	d906      	bls.n	8007f02 <_strtol_l.constprop.0+0x1a>
 8007ef4:	f7ff fe2a 	bl	8007b4c <__errno>
 8007ef8:	2316      	movs	r3, #22
 8007efa:	6003      	str	r3, [r0, #0]
 8007efc:	2000      	movs	r0, #0
 8007efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007fe8 <_strtol_l.constprop.0+0x100>
 8007f06:	460d      	mov	r5, r1
 8007f08:	462e      	mov	r6, r5
 8007f0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f12:	f017 0708 	ands.w	r7, r7, #8
 8007f16:	d1f7      	bne.n	8007f08 <_strtol_l.constprop.0+0x20>
 8007f18:	2c2d      	cmp	r4, #45	; 0x2d
 8007f1a:	d132      	bne.n	8007f82 <_strtol_l.constprop.0+0x9a>
 8007f1c:	782c      	ldrb	r4, [r5, #0]
 8007f1e:	2701      	movs	r7, #1
 8007f20:	1cb5      	adds	r5, r6, #2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d05b      	beq.n	8007fde <_strtol_l.constprop.0+0xf6>
 8007f26:	2b10      	cmp	r3, #16
 8007f28:	d109      	bne.n	8007f3e <_strtol_l.constprop.0+0x56>
 8007f2a:	2c30      	cmp	r4, #48	; 0x30
 8007f2c:	d107      	bne.n	8007f3e <_strtol_l.constprop.0+0x56>
 8007f2e:	782c      	ldrb	r4, [r5, #0]
 8007f30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f34:	2c58      	cmp	r4, #88	; 0x58
 8007f36:	d14d      	bne.n	8007fd4 <_strtol_l.constprop.0+0xec>
 8007f38:	786c      	ldrb	r4, [r5, #1]
 8007f3a:	2310      	movs	r3, #16
 8007f3c:	3502      	adds	r5, #2
 8007f3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f42:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f46:	f04f 0c00 	mov.w	ip, #0
 8007f4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f4e:	4666      	mov	r6, ip
 8007f50:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007f58:	f1be 0f09 	cmp.w	lr, #9
 8007f5c:	d816      	bhi.n	8007f8c <_strtol_l.constprop.0+0xa4>
 8007f5e:	4674      	mov	r4, lr
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	dd24      	ble.n	8007fae <_strtol_l.constprop.0+0xc6>
 8007f64:	f1bc 0f00 	cmp.w	ip, #0
 8007f68:	db1e      	blt.n	8007fa8 <_strtol_l.constprop.0+0xc0>
 8007f6a:	45b1      	cmp	r9, r6
 8007f6c:	d31c      	bcc.n	8007fa8 <_strtol_l.constprop.0+0xc0>
 8007f6e:	d101      	bne.n	8007f74 <_strtol_l.constprop.0+0x8c>
 8007f70:	45a2      	cmp	sl, r4
 8007f72:	db19      	blt.n	8007fa8 <_strtol_l.constprop.0+0xc0>
 8007f74:	fb06 4603 	mla	r6, r6, r3, r4
 8007f78:	f04f 0c01 	mov.w	ip, #1
 8007f7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f80:	e7e8      	b.n	8007f54 <_strtol_l.constprop.0+0x6c>
 8007f82:	2c2b      	cmp	r4, #43	; 0x2b
 8007f84:	bf04      	itt	eq
 8007f86:	782c      	ldrbeq	r4, [r5, #0]
 8007f88:	1cb5      	addeq	r5, r6, #2
 8007f8a:	e7ca      	b.n	8007f22 <_strtol_l.constprop.0+0x3a>
 8007f8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007f90:	f1be 0f19 	cmp.w	lr, #25
 8007f94:	d801      	bhi.n	8007f9a <_strtol_l.constprop.0+0xb2>
 8007f96:	3c37      	subs	r4, #55	; 0x37
 8007f98:	e7e2      	b.n	8007f60 <_strtol_l.constprop.0+0x78>
 8007f9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007f9e:	f1be 0f19 	cmp.w	lr, #25
 8007fa2:	d804      	bhi.n	8007fae <_strtol_l.constprop.0+0xc6>
 8007fa4:	3c57      	subs	r4, #87	; 0x57
 8007fa6:	e7db      	b.n	8007f60 <_strtol_l.constprop.0+0x78>
 8007fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8007fac:	e7e6      	b.n	8007f7c <_strtol_l.constprop.0+0x94>
 8007fae:	f1bc 0f00 	cmp.w	ip, #0
 8007fb2:	da05      	bge.n	8007fc0 <_strtol_l.constprop.0+0xd8>
 8007fb4:	2322      	movs	r3, #34	; 0x22
 8007fb6:	6003      	str	r3, [r0, #0]
 8007fb8:	4646      	mov	r6, r8
 8007fba:	b942      	cbnz	r2, 8007fce <_strtol_l.constprop.0+0xe6>
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	e79e      	b.n	8007efe <_strtol_l.constprop.0+0x16>
 8007fc0:	b107      	cbz	r7, 8007fc4 <_strtol_l.constprop.0+0xdc>
 8007fc2:	4276      	negs	r6, r6
 8007fc4:	2a00      	cmp	r2, #0
 8007fc6:	d0f9      	beq.n	8007fbc <_strtol_l.constprop.0+0xd4>
 8007fc8:	f1bc 0f00 	cmp.w	ip, #0
 8007fcc:	d000      	beq.n	8007fd0 <_strtol_l.constprop.0+0xe8>
 8007fce:	1e69      	subs	r1, r5, #1
 8007fd0:	6011      	str	r1, [r2, #0]
 8007fd2:	e7f3      	b.n	8007fbc <_strtol_l.constprop.0+0xd4>
 8007fd4:	2430      	movs	r4, #48	; 0x30
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1b1      	bne.n	8007f3e <_strtol_l.constprop.0+0x56>
 8007fda:	2308      	movs	r3, #8
 8007fdc:	e7af      	b.n	8007f3e <_strtol_l.constprop.0+0x56>
 8007fde:	2c30      	cmp	r4, #48	; 0x30
 8007fe0:	d0a5      	beq.n	8007f2e <_strtol_l.constprop.0+0x46>
 8007fe2:	230a      	movs	r3, #10
 8007fe4:	e7ab      	b.n	8007f3e <_strtol_l.constprop.0+0x56>
 8007fe6:	bf00      	nop
 8007fe8:	0800875f 	.word	0x0800875f

08007fec <strtol>:
 8007fec:	4613      	mov	r3, r2
 8007fee:	460a      	mov	r2, r1
 8007ff0:	4601      	mov	r1, r0
 8007ff2:	4802      	ldr	r0, [pc, #8]	; (8007ffc <strtol+0x10>)
 8007ff4:	6800      	ldr	r0, [r0, #0]
 8007ff6:	f7ff bf77 	b.w	8007ee8 <_strtol_l.constprop.0>
 8007ffa:	bf00      	nop
 8007ffc:	2000000c 	.word	0x2000000c

08008000 <__malloc_lock>:
 8008000:	4801      	ldr	r0, [pc, #4]	; (8008008 <__malloc_lock+0x8>)
 8008002:	f000 baf9 	b.w	80085f8 <__retarget_lock_acquire_recursive>
 8008006:	bf00      	nop
 8008008:	200003cc 	.word	0x200003cc

0800800c <__malloc_unlock>:
 800800c:	4801      	ldr	r0, [pc, #4]	; (8008014 <__malloc_unlock+0x8>)
 800800e:	f000 baf4 	b.w	80085fa <__retarget_lock_release_recursive>
 8008012:	bf00      	nop
 8008014:	200003cc 	.word	0x200003cc

08008018 <__ssputs_r>:
 8008018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800801c:	688e      	ldr	r6, [r1, #8]
 800801e:	429e      	cmp	r6, r3
 8008020:	4682      	mov	sl, r0
 8008022:	460c      	mov	r4, r1
 8008024:	4690      	mov	r8, r2
 8008026:	461f      	mov	r7, r3
 8008028:	d838      	bhi.n	800809c <__ssputs_r+0x84>
 800802a:	898a      	ldrh	r2, [r1, #12]
 800802c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008030:	d032      	beq.n	8008098 <__ssputs_r+0x80>
 8008032:	6825      	ldr	r5, [r4, #0]
 8008034:	6909      	ldr	r1, [r1, #16]
 8008036:	eba5 0901 	sub.w	r9, r5, r1
 800803a:	6965      	ldr	r5, [r4, #20]
 800803c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008040:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008044:	3301      	adds	r3, #1
 8008046:	444b      	add	r3, r9
 8008048:	106d      	asrs	r5, r5, #1
 800804a:	429d      	cmp	r5, r3
 800804c:	bf38      	it	cc
 800804e:	461d      	movcc	r5, r3
 8008050:	0553      	lsls	r3, r2, #21
 8008052:	d531      	bpl.n	80080b8 <__ssputs_r+0xa0>
 8008054:	4629      	mov	r1, r5
 8008056:	f7ff fe5f 	bl	8007d18 <_malloc_r>
 800805a:	4606      	mov	r6, r0
 800805c:	b950      	cbnz	r0, 8008074 <__ssputs_r+0x5c>
 800805e:	230c      	movs	r3, #12
 8008060:	f8ca 3000 	str.w	r3, [sl]
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800806a:	81a3      	strh	r3, [r4, #12]
 800806c:	f04f 30ff 	mov.w	r0, #4294967295
 8008070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008074:	6921      	ldr	r1, [r4, #16]
 8008076:	464a      	mov	r2, r9
 8008078:	f7ff fdb2 	bl	8007be0 <memcpy>
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008086:	81a3      	strh	r3, [r4, #12]
 8008088:	6126      	str	r6, [r4, #16]
 800808a:	6165      	str	r5, [r4, #20]
 800808c:	444e      	add	r6, r9
 800808e:	eba5 0509 	sub.w	r5, r5, r9
 8008092:	6026      	str	r6, [r4, #0]
 8008094:	60a5      	str	r5, [r4, #8]
 8008096:	463e      	mov	r6, r7
 8008098:	42be      	cmp	r6, r7
 800809a:	d900      	bls.n	800809e <__ssputs_r+0x86>
 800809c:	463e      	mov	r6, r7
 800809e:	6820      	ldr	r0, [r4, #0]
 80080a0:	4632      	mov	r2, r6
 80080a2:	4641      	mov	r1, r8
 80080a4:	f7ff fdaa 	bl	8007bfc <memmove>
 80080a8:	68a3      	ldr	r3, [r4, #8]
 80080aa:	1b9b      	subs	r3, r3, r6
 80080ac:	60a3      	str	r3, [r4, #8]
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	4433      	add	r3, r6
 80080b2:	6023      	str	r3, [r4, #0]
 80080b4:	2000      	movs	r0, #0
 80080b6:	e7db      	b.n	8008070 <__ssputs_r+0x58>
 80080b8:	462a      	mov	r2, r5
 80080ba:	f000 fa9f 	bl	80085fc <_realloc_r>
 80080be:	4606      	mov	r6, r0
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d1e1      	bne.n	8008088 <__ssputs_r+0x70>
 80080c4:	6921      	ldr	r1, [r4, #16]
 80080c6:	4650      	mov	r0, sl
 80080c8:	f7ff fdba 	bl	8007c40 <_free_r>
 80080cc:	e7c7      	b.n	800805e <__ssputs_r+0x46>
	...

080080d0 <_svfiprintf_r>:
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	4698      	mov	r8, r3
 80080d6:	898b      	ldrh	r3, [r1, #12]
 80080d8:	061b      	lsls	r3, r3, #24
 80080da:	b09d      	sub	sp, #116	; 0x74
 80080dc:	4607      	mov	r7, r0
 80080de:	460d      	mov	r5, r1
 80080e0:	4614      	mov	r4, r2
 80080e2:	d50e      	bpl.n	8008102 <_svfiprintf_r+0x32>
 80080e4:	690b      	ldr	r3, [r1, #16]
 80080e6:	b963      	cbnz	r3, 8008102 <_svfiprintf_r+0x32>
 80080e8:	2140      	movs	r1, #64	; 0x40
 80080ea:	f7ff fe15 	bl	8007d18 <_malloc_r>
 80080ee:	6028      	str	r0, [r5, #0]
 80080f0:	6128      	str	r0, [r5, #16]
 80080f2:	b920      	cbnz	r0, 80080fe <_svfiprintf_r+0x2e>
 80080f4:	230c      	movs	r3, #12
 80080f6:	603b      	str	r3, [r7, #0]
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295
 80080fc:	e0d1      	b.n	80082a2 <_svfiprintf_r+0x1d2>
 80080fe:	2340      	movs	r3, #64	; 0x40
 8008100:	616b      	str	r3, [r5, #20]
 8008102:	2300      	movs	r3, #0
 8008104:	9309      	str	r3, [sp, #36]	; 0x24
 8008106:	2320      	movs	r3, #32
 8008108:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800810c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008110:	2330      	movs	r3, #48	; 0x30
 8008112:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082bc <_svfiprintf_r+0x1ec>
 8008116:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800811a:	f04f 0901 	mov.w	r9, #1
 800811e:	4623      	mov	r3, r4
 8008120:	469a      	mov	sl, r3
 8008122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008126:	b10a      	cbz	r2, 800812c <_svfiprintf_r+0x5c>
 8008128:	2a25      	cmp	r2, #37	; 0x25
 800812a:	d1f9      	bne.n	8008120 <_svfiprintf_r+0x50>
 800812c:	ebba 0b04 	subs.w	fp, sl, r4
 8008130:	d00b      	beq.n	800814a <_svfiprintf_r+0x7a>
 8008132:	465b      	mov	r3, fp
 8008134:	4622      	mov	r2, r4
 8008136:	4629      	mov	r1, r5
 8008138:	4638      	mov	r0, r7
 800813a:	f7ff ff6d 	bl	8008018 <__ssputs_r>
 800813e:	3001      	adds	r0, #1
 8008140:	f000 80aa 	beq.w	8008298 <_svfiprintf_r+0x1c8>
 8008144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008146:	445a      	add	r2, fp
 8008148:	9209      	str	r2, [sp, #36]	; 0x24
 800814a:	f89a 3000 	ldrb.w	r3, [sl]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 80a2 	beq.w	8008298 <_svfiprintf_r+0x1c8>
 8008154:	2300      	movs	r3, #0
 8008156:	f04f 32ff 	mov.w	r2, #4294967295
 800815a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800815e:	f10a 0a01 	add.w	sl, sl, #1
 8008162:	9304      	str	r3, [sp, #16]
 8008164:	9307      	str	r3, [sp, #28]
 8008166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800816a:	931a      	str	r3, [sp, #104]	; 0x68
 800816c:	4654      	mov	r4, sl
 800816e:	2205      	movs	r2, #5
 8008170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008174:	4851      	ldr	r0, [pc, #324]	; (80082bc <_svfiprintf_r+0x1ec>)
 8008176:	f7f8 f833 	bl	80001e0 <memchr>
 800817a:	9a04      	ldr	r2, [sp, #16]
 800817c:	b9d8      	cbnz	r0, 80081b6 <_svfiprintf_r+0xe6>
 800817e:	06d0      	lsls	r0, r2, #27
 8008180:	bf44      	itt	mi
 8008182:	2320      	movmi	r3, #32
 8008184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008188:	0711      	lsls	r1, r2, #28
 800818a:	bf44      	itt	mi
 800818c:	232b      	movmi	r3, #43	; 0x2b
 800818e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008192:	f89a 3000 	ldrb.w	r3, [sl]
 8008196:	2b2a      	cmp	r3, #42	; 0x2a
 8008198:	d015      	beq.n	80081c6 <_svfiprintf_r+0xf6>
 800819a:	9a07      	ldr	r2, [sp, #28]
 800819c:	4654      	mov	r4, sl
 800819e:	2000      	movs	r0, #0
 80081a0:	f04f 0c0a 	mov.w	ip, #10
 80081a4:	4621      	mov	r1, r4
 80081a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081aa:	3b30      	subs	r3, #48	; 0x30
 80081ac:	2b09      	cmp	r3, #9
 80081ae:	d94e      	bls.n	800824e <_svfiprintf_r+0x17e>
 80081b0:	b1b0      	cbz	r0, 80081e0 <_svfiprintf_r+0x110>
 80081b2:	9207      	str	r2, [sp, #28]
 80081b4:	e014      	b.n	80081e0 <_svfiprintf_r+0x110>
 80081b6:	eba0 0308 	sub.w	r3, r0, r8
 80081ba:	fa09 f303 	lsl.w	r3, r9, r3
 80081be:	4313      	orrs	r3, r2
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	46a2      	mov	sl, r4
 80081c4:	e7d2      	b.n	800816c <_svfiprintf_r+0x9c>
 80081c6:	9b03      	ldr	r3, [sp, #12]
 80081c8:	1d19      	adds	r1, r3, #4
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	9103      	str	r1, [sp, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bfbb      	ittet	lt
 80081d2:	425b      	neglt	r3, r3
 80081d4:	f042 0202 	orrlt.w	r2, r2, #2
 80081d8:	9307      	strge	r3, [sp, #28]
 80081da:	9307      	strlt	r3, [sp, #28]
 80081dc:	bfb8      	it	lt
 80081de:	9204      	strlt	r2, [sp, #16]
 80081e0:	7823      	ldrb	r3, [r4, #0]
 80081e2:	2b2e      	cmp	r3, #46	; 0x2e
 80081e4:	d10c      	bne.n	8008200 <_svfiprintf_r+0x130>
 80081e6:	7863      	ldrb	r3, [r4, #1]
 80081e8:	2b2a      	cmp	r3, #42	; 0x2a
 80081ea:	d135      	bne.n	8008258 <_svfiprintf_r+0x188>
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	1d1a      	adds	r2, r3, #4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	9203      	str	r2, [sp, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bfb8      	it	lt
 80081f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80081fc:	3402      	adds	r4, #2
 80081fe:	9305      	str	r3, [sp, #20]
 8008200:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082cc <_svfiprintf_r+0x1fc>
 8008204:	7821      	ldrb	r1, [r4, #0]
 8008206:	2203      	movs	r2, #3
 8008208:	4650      	mov	r0, sl
 800820a:	f7f7 ffe9 	bl	80001e0 <memchr>
 800820e:	b140      	cbz	r0, 8008222 <_svfiprintf_r+0x152>
 8008210:	2340      	movs	r3, #64	; 0x40
 8008212:	eba0 000a 	sub.w	r0, r0, sl
 8008216:	fa03 f000 	lsl.w	r0, r3, r0
 800821a:	9b04      	ldr	r3, [sp, #16]
 800821c:	4303      	orrs	r3, r0
 800821e:	3401      	adds	r4, #1
 8008220:	9304      	str	r3, [sp, #16]
 8008222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008226:	4826      	ldr	r0, [pc, #152]	; (80082c0 <_svfiprintf_r+0x1f0>)
 8008228:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800822c:	2206      	movs	r2, #6
 800822e:	f7f7 ffd7 	bl	80001e0 <memchr>
 8008232:	2800      	cmp	r0, #0
 8008234:	d038      	beq.n	80082a8 <_svfiprintf_r+0x1d8>
 8008236:	4b23      	ldr	r3, [pc, #140]	; (80082c4 <_svfiprintf_r+0x1f4>)
 8008238:	bb1b      	cbnz	r3, 8008282 <_svfiprintf_r+0x1b2>
 800823a:	9b03      	ldr	r3, [sp, #12]
 800823c:	3307      	adds	r3, #7
 800823e:	f023 0307 	bic.w	r3, r3, #7
 8008242:	3308      	adds	r3, #8
 8008244:	9303      	str	r3, [sp, #12]
 8008246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008248:	4433      	add	r3, r6
 800824a:	9309      	str	r3, [sp, #36]	; 0x24
 800824c:	e767      	b.n	800811e <_svfiprintf_r+0x4e>
 800824e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008252:	460c      	mov	r4, r1
 8008254:	2001      	movs	r0, #1
 8008256:	e7a5      	b.n	80081a4 <_svfiprintf_r+0xd4>
 8008258:	2300      	movs	r3, #0
 800825a:	3401      	adds	r4, #1
 800825c:	9305      	str	r3, [sp, #20]
 800825e:	4619      	mov	r1, r3
 8008260:	f04f 0c0a 	mov.w	ip, #10
 8008264:	4620      	mov	r0, r4
 8008266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800826a:	3a30      	subs	r2, #48	; 0x30
 800826c:	2a09      	cmp	r2, #9
 800826e:	d903      	bls.n	8008278 <_svfiprintf_r+0x1a8>
 8008270:	2b00      	cmp	r3, #0
 8008272:	d0c5      	beq.n	8008200 <_svfiprintf_r+0x130>
 8008274:	9105      	str	r1, [sp, #20]
 8008276:	e7c3      	b.n	8008200 <_svfiprintf_r+0x130>
 8008278:	fb0c 2101 	mla	r1, ip, r1, r2
 800827c:	4604      	mov	r4, r0
 800827e:	2301      	movs	r3, #1
 8008280:	e7f0      	b.n	8008264 <_svfiprintf_r+0x194>
 8008282:	ab03      	add	r3, sp, #12
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	462a      	mov	r2, r5
 8008288:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <_svfiprintf_r+0x1f8>)
 800828a:	a904      	add	r1, sp, #16
 800828c:	4638      	mov	r0, r7
 800828e:	f3af 8000 	nop.w
 8008292:	1c42      	adds	r2, r0, #1
 8008294:	4606      	mov	r6, r0
 8008296:	d1d6      	bne.n	8008246 <_svfiprintf_r+0x176>
 8008298:	89ab      	ldrh	r3, [r5, #12]
 800829a:	065b      	lsls	r3, r3, #25
 800829c:	f53f af2c 	bmi.w	80080f8 <_svfiprintf_r+0x28>
 80082a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082a2:	b01d      	add	sp, #116	; 0x74
 80082a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a8:	ab03      	add	r3, sp, #12
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	462a      	mov	r2, r5
 80082ae:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <_svfiprintf_r+0x1f8>)
 80082b0:	a904      	add	r1, sp, #16
 80082b2:	4638      	mov	r0, r7
 80082b4:	f000 f87a 	bl	80083ac <_printf_i>
 80082b8:	e7eb      	b.n	8008292 <_svfiprintf_r+0x1c2>
 80082ba:	bf00      	nop
 80082bc:	0800885f 	.word	0x0800885f
 80082c0:	08008869 	.word	0x08008869
 80082c4:	00000000 	.word	0x00000000
 80082c8:	08008019 	.word	0x08008019
 80082cc:	08008865 	.word	0x08008865

080082d0 <_printf_common>:
 80082d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d4:	4616      	mov	r6, r2
 80082d6:	4699      	mov	r9, r3
 80082d8:	688a      	ldr	r2, [r1, #8]
 80082da:	690b      	ldr	r3, [r1, #16]
 80082dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082e0:	4293      	cmp	r3, r2
 80082e2:	bfb8      	it	lt
 80082e4:	4613      	movlt	r3, r2
 80082e6:	6033      	str	r3, [r6, #0]
 80082e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082ec:	4607      	mov	r7, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	b10a      	cbz	r2, 80082f6 <_printf_common+0x26>
 80082f2:	3301      	adds	r3, #1
 80082f4:	6033      	str	r3, [r6, #0]
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	0699      	lsls	r1, r3, #26
 80082fa:	bf42      	ittt	mi
 80082fc:	6833      	ldrmi	r3, [r6, #0]
 80082fe:	3302      	addmi	r3, #2
 8008300:	6033      	strmi	r3, [r6, #0]
 8008302:	6825      	ldr	r5, [r4, #0]
 8008304:	f015 0506 	ands.w	r5, r5, #6
 8008308:	d106      	bne.n	8008318 <_printf_common+0x48>
 800830a:	f104 0a19 	add.w	sl, r4, #25
 800830e:	68e3      	ldr	r3, [r4, #12]
 8008310:	6832      	ldr	r2, [r6, #0]
 8008312:	1a9b      	subs	r3, r3, r2
 8008314:	42ab      	cmp	r3, r5
 8008316:	dc26      	bgt.n	8008366 <_printf_common+0x96>
 8008318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800831c:	1e13      	subs	r3, r2, #0
 800831e:	6822      	ldr	r2, [r4, #0]
 8008320:	bf18      	it	ne
 8008322:	2301      	movne	r3, #1
 8008324:	0692      	lsls	r2, r2, #26
 8008326:	d42b      	bmi.n	8008380 <_printf_common+0xb0>
 8008328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800832c:	4649      	mov	r1, r9
 800832e:	4638      	mov	r0, r7
 8008330:	47c0      	blx	r8
 8008332:	3001      	adds	r0, #1
 8008334:	d01e      	beq.n	8008374 <_printf_common+0xa4>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	68e5      	ldr	r5, [r4, #12]
 800833a:	6832      	ldr	r2, [r6, #0]
 800833c:	f003 0306 	and.w	r3, r3, #6
 8008340:	2b04      	cmp	r3, #4
 8008342:	bf08      	it	eq
 8008344:	1aad      	subeq	r5, r5, r2
 8008346:	68a3      	ldr	r3, [r4, #8]
 8008348:	6922      	ldr	r2, [r4, #16]
 800834a:	bf0c      	ite	eq
 800834c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008350:	2500      	movne	r5, #0
 8008352:	4293      	cmp	r3, r2
 8008354:	bfc4      	itt	gt
 8008356:	1a9b      	subgt	r3, r3, r2
 8008358:	18ed      	addgt	r5, r5, r3
 800835a:	2600      	movs	r6, #0
 800835c:	341a      	adds	r4, #26
 800835e:	42b5      	cmp	r5, r6
 8008360:	d11a      	bne.n	8008398 <_printf_common+0xc8>
 8008362:	2000      	movs	r0, #0
 8008364:	e008      	b.n	8008378 <_printf_common+0xa8>
 8008366:	2301      	movs	r3, #1
 8008368:	4652      	mov	r2, sl
 800836a:	4649      	mov	r1, r9
 800836c:	4638      	mov	r0, r7
 800836e:	47c0      	blx	r8
 8008370:	3001      	adds	r0, #1
 8008372:	d103      	bne.n	800837c <_printf_common+0xac>
 8008374:	f04f 30ff 	mov.w	r0, #4294967295
 8008378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837c:	3501      	adds	r5, #1
 800837e:	e7c6      	b.n	800830e <_printf_common+0x3e>
 8008380:	18e1      	adds	r1, r4, r3
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	2030      	movs	r0, #48	; 0x30
 8008386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800838a:	4422      	add	r2, r4
 800838c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008394:	3302      	adds	r3, #2
 8008396:	e7c7      	b.n	8008328 <_printf_common+0x58>
 8008398:	2301      	movs	r3, #1
 800839a:	4622      	mov	r2, r4
 800839c:	4649      	mov	r1, r9
 800839e:	4638      	mov	r0, r7
 80083a0:	47c0      	blx	r8
 80083a2:	3001      	adds	r0, #1
 80083a4:	d0e6      	beq.n	8008374 <_printf_common+0xa4>
 80083a6:	3601      	adds	r6, #1
 80083a8:	e7d9      	b.n	800835e <_printf_common+0x8e>
	...

080083ac <_printf_i>:
 80083ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083b0:	7e0f      	ldrb	r7, [r1, #24]
 80083b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083b4:	2f78      	cmp	r7, #120	; 0x78
 80083b6:	4691      	mov	r9, r2
 80083b8:	4680      	mov	r8, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	469a      	mov	sl, r3
 80083be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083c2:	d807      	bhi.n	80083d4 <_printf_i+0x28>
 80083c4:	2f62      	cmp	r7, #98	; 0x62
 80083c6:	d80a      	bhi.n	80083de <_printf_i+0x32>
 80083c8:	2f00      	cmp	r7, #0
 80083ca:	f000 80d8 	beq.w	800857e <_printf_i+0x1d2>
 80083ce:	2f58      	cmp	r7, #88	; 0x58
 80083d0:	f000 80a3 	beq.w	800851a <_printf_i+0x16e>
 80083d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083dc:	e03a      	b.n	8008454 <_printf_i+0xa8>
 80083de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083e2:	2b15      	cmp	r3, #21
 80083e4:	d8f6      	bhi.n	80083d4 <_printf_i+0x28>
 80083e6:	a101      	add	r1, pc, #4	; (adr r1, 80083ec <_printf_i+0x40>)
 80083e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083ec:	08008445 	.word	0x08008445
 80083f0:	08008459 	.word	0x08008459
 80083f4:	080083d5 	.word	0x080083d5
 80083f8:	080083d5 	.word	0x080083d5
 80083fc:	080083d5 	.word	0x080083d5
 8008400:	080083d5 	.word	0x080083d5
 8008404:	08008459 	.word	0x08008459
 8008408:	080083d5 	.word	0x080083d5
 800840c:	080083d5 	.word	0x080083d5
 8008410:	080083d5 	.word	0x080083d5
 8008414:	080083d5 	.word	0x080083d5
 8008418:	08008565 	.word	0x08008565
 800841c:	08008489 	.word	0x08008489
 8008420:	08008547 	.word	0x08008547
 8008424:	080083d5 	.word	0x080083d5
 8008428:	080083d5 	.word	0x080083d5
 800842c:	08008587 	.word	0x08008587
 8008430:	080083d5 	.word	0x080083d5
 8008434:	08008489 	.word	0x08008489
 8008438:	080083d5 	.word	0x080083d5
 800843c:	080083d5 	.word	0x080083d5
 8008440:	0800854f 	.word	0x0800854f
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	1d1a      	adds	r2, r3, #4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	602a      	str	r2, [r5, #0]
 800844c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008454:	2301      	movs	r3, #1
 8008456:	e0a3      	b.n	80085a0 <_printf_i+0x1f4>
 8008458:	6820      	ldr	r0, [r4, #0]
 800845a:	6829      	ldr	r1, [r5, #0]
 800845c:	0606      	lsls	r6, r0, #24
 800845e:	f101 0304 	add.w	r3, r1, #4
 8008462:	d50a      	bpl.n	800847a <_printf_i+0xce>
 8008464:	680e      	ldr	r6, [r1, #0]
 8008466:	602b      	str	r3, [r5, #0]
 8008468:	2e00      	cmp	r6, #0
 800846a:	da03      	bge.n	8008474 <_printf_i+0xc8>
 800846c:	232d      	movs	r3, #45	; 0x2d
 800846e:	4276      	negs	r6, r6
 8008470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008474:	485e      	ldr	r0, [pc, #376]	; (80085f0 <_printf_i+0x244>)
 8008476:	230a      	movs	r3, #10
 8008478:	e019      	b.n	80084ae <_printf_i+0x102>
 800847a:	680e      	ldr	r6, [r1, #0]
 800847c:	602b      	str	r3, [r5, #0]
 800847e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008482:	bf18      	it	ne
 8008484:	b236      	sxthne	r6, r6
 8008486:	e7ef      	b.n	8008468 <_printf_i+0xbc>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	6820      	ldr	r0, [r4, #0]
 800848c:	1d19      	adds	r1, r3, #4
 800848e:	6029      	str	r1, [r5, #0]
 8008490:	0601      	lsls	r1, r0, #24
 8008492:	d501      	bpl.n	8008498 <_printf_i+0xec>
 8008494:	681e      	ldr	r6, [r3, #0]
 8008496:	e002      	b.n	800849e <_printf_i+0xf2>
 8008498:	0646      	lsls	r6, r0, #25
 800849a:	d5fb      	bpl.n	8008494 <_printf_i+0xe8>
 800849c:	881e      	ldrh	r6, [r3, #0]
 800849e:	4854      	ldr	r0, [pc, #336]	; (80085f0 <_printf_i+0x244>)
 80084a0:	2f6f      	cmp	r7, #111	; 0x6f
 80084a2:	bf0c      	ite	eq
 80084a4:	2308      	moveq	r3, #8
 80084a6:	230a      	movne	r3, #10
 80084a8:	2100      	movs	r1, #0
 80084aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084ae:	6865      	ldr	r5, [r4, #4]
 80084b0:	60a5      	str	r5, [r4, #8]
 80084b2:	2d00      	cmp	r5, #0
 80084b4:	bfa2      	ittt	ge
 80084b6:	6821      	ldrge	r1, [r4, #0]
 80084b8:	f021 0104 	bicge.w	r1, r1, #4
 80084bc:	6021      	strge	r1, [r4, #0]
 80084be:	b90e      	cbnz	r6, 80084c4 <_printf_i+0x118>
 80084c0:	2d00      	cmp	r5, #0
 80084c2:	d04d      	beq.n	8008560 <_printf_i+0x1b4>
 80084c4:	4615      	mov	r5, r2
 80084c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80084ca:	fb03 6711 	mls	r7, r3, r1, r6
 80084ce:	5dc7      	ldrb	r7, [r0, r7]
 80084d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084d4:	4637      	mov	r7, r6
 80084d6:	42bb      	cmp	r3, r7
 80084d8:	460e      	mov	r6, r1
 80084da:	d9f4      	bls.n	80084c6 <_printf_i+0x11a>
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d10b      	bne.n	80084f8 <_printf_i+0x14c>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	07de      	lsls	r6, r3, #31
 80084e4:	d508      	bpl.n	80084f8 <_printf_i+0x14c>
 80084e6:	6923      	ldr	r3, [r4, #16]
 80084e8:	6861      	ldr	r1, [r4, #4]
 80084ea:	4299      	cmp	r1, r3
 80084ec:	bfde      	ittt	le
 80084ee:	2330      	movle	r3, #48	; 0x30
 80084f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084f8:	1b52      	subs	r2, r2, r5
 80084fa:	6122      	str	r2, [r4, #16]
 80084fc:	f8cd a000 	str.w	sl, [sp]
 8008500:	464b      	mov	r3, r9
 8008502:	aa03      	add	r2, sp, #12
 8008504:	4621      	mov	r1, r4
 8008506:	4640      	mov	r0, r8
 8008508:	f7ff fee2 	bl	80082d0 <_printf_common>
 800850c:	3001      	adds	r0, #1
 800850e:	d14c      	bne.n	80085aa <_printf_i+0x1fe>
 8008510:	f04f 30ff 	mov.w	r0, #4294967295
 8008514:	b004      	add	sp, #16
 8008516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851a:	4835      	ldr	r0, [pc, #212]	; (80085f0 <_printf_i+0x244>)
 800851c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008520:	6829      	ldr	r1, [r5, #0]
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	f851 6b04 	ldr.w	r6, [r1], #4
 8008528:	6029      	str	r1, [r5, #0]
 800852a:	061d      	lsls	r5, r3, #24
 800852c:	d514      	bpl.n	8008558 <_printf_i+0x1ac>
 800852e:	07df      	lsls	r7, r3, #31
 8008530:	bf44      	itt	mi
 8008532:	f043 0320 	orrmi.w	r3, r3, #32
 8008536:	6023      	strmi	r3, [r4, #0]
 8008538:	b91e      	cbnz	r6, 8008542 <_printf_i+0x196>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	f023 0320 	bic.w	r3, r3, #32
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	2310      	movs	r3, #16
 8008544:	e7b0      	b.n	80084a8 <_printf_i+0xfc>
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	f043 0320 	orr.w	r3, r3, #32
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	2378      	movs	r3, #120	; 0x78
 8008550:	4828      	ldr	r0, [pc, #160]	; (80085f4 <_printf_i+0x248>)
 8008552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008556:	e7e3      	b.n	8008520 <_printf_i+0x174>
 8008558:	0659      	lsls	r1, r3, #25
 800855a:	bf48      	it	mi
 800855c:	b2b6      	uxthmi	r6, r6
 800855e:	e7e6      	b.n	800852e <_printf_i+0x182>
 8008560:	4615      	mov	r5, r2
 8008562:	e7bb      	b.n	80084dc <_printf_i+0x130>
 8008564:	682b      	ldr	r3, [r5, #0]
 8008566:	6826      	ldr	r6, [r4, #0]
 8008568:	6961      	ldr	r1, [r4, #20]
 800856a:	1d18      	adds	r0, r3, #4
 800856c:	6028      	str	r0, [r5, #0]
 800856e:	0635      	lsls	r5, r6, #24
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	d501      	bpl.n	8008578 <_printf_i+0x1cc>
 8008574:	6019      	str	r1, [r3, #0]
 8008576:	e002      	b.n	800857e <_printf_i+0x1d2>
 8008578:	0670      	lsls	r0, r6, #25
 800857a:	d5fb      	bpl.n	8008574 <_printf_i+0x1c8>
 800857c:	8019      	strh	r1, [r3, #0]
 800857e:	2300      	movs	r3, #0
 8008580:	6123      	str	r3, [r4, #16]
 8008582:	4615      	mov	r5, r2
 8008584:	e7ba      	b.n	80084fc <_printf_i+0x150>
 8008586:	682b      	ldr	r3, [r5, #0]
 8008588:	1d1a      	adds	r2, r3, #4
 800858a:	602a      	str	r2, [r5, #0]
 800858c:	681d      	ldr	r5, [r3, #0]
 800858e:	6862      	ldr	r2, [r4, #4]
 8008590:	2100      	movs	r1, #0
 8008592:	4628      	mov	r0, r5
 8008594:	f7f7 fe24 	bl	80001e0 <memchr>
 8008598:	b108      	cbz	r0, 800859e <_printf_i+0x1f2>
 800859a:	1b40      	subs	r0, r0, r5
 800859c:	6060      	str	r0, [r4, #4]
 800859e:	6863      	ldr	r3, [r4, #4]
 80085a0:	6123      	str	r3, [r4, #16]
 80085a2:	2300      	movs	r3, #0
 80085a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a8:	e7a8      	b.n	80084fc <_printf_i+0x150>
 80085aa:	6923      	ldr	r3, [r4, #16]
 80085ac:	462a      	mov	r2, r5
 80085ae:	4649      	mov	r1, r9
 80085b0:	4640      	mov	r0, r8
 80085b2:	47d0      	blx	sl
 80085b4:	3001      	adds	r0, #1
 80085b6:	d0ab      	beq.n	8008510 <_printf_i+0x164>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	079b      	lsls	r3, r3, #30
 80085bc:	d413      	bmi.n	80085e6 <_printf_i+0x23a>
 80085be:	68e0      	ldr	r0, [r4, #12]
 80085c0:	9b03      	ldr	r3, [sp, #12]
 80085c2:	4298      	cmp	r0, r3
 80085c4:	bfb8      	it	lt
 80085c6:	4618      	movlt	r0, r3
 80085c8:	e7a4      	b.n	8008514 <_printf_i+0x168>
 80085ca:	2301      	movs	r3, #1
 80085cc:	4632      	mov	r2, r6
 80085ce:	4649      	mov	r1, r9
 80085d0:	4640      	mov	r0, r8
 80085d2:	47d0      	blx	sl
 80085d4:	3001      	adds	r0, #1
 80085d6:	d09b      	beq.n	8008510 <_printf_i+0x164>
 80085d8:	3501      	adds	r5, #1
 80085da:	68e3      	ldr	r3, [r4, #12]
 80085dc:	9903      	ldr	r1, [sp, #12]
 80085de:	1a5b      	subs	r3, r3, r1
 80085e0:	42ab      	cmp	r3, r5
 80085e2:	dcf2      	bgt.n	80085ca <_printf_i+0x21e>
 80085e4:	e7eb      	b.n	80085be <_printf_i+0x212>
 80085e6:	2500      	movs	r5, #0
 80085e8:	f104 0619 	add.w	r6, r4, #25
 80085ec:	e7f5      	b.n	80085da <_printf_i+0x22e>
 80085ee:	bf00      	nop
 80085f0:	08008870 	.word	0x08008870
 80085f4:	08008881 	.word	0x08008881

080085f8 <__retarget_lock_acquire_recursive>:
 80085f8:	4770      	bx	lr

080085fa <__retarget_lock_release_recursive>:
 80085fa:	4770      	bx	lr

080085fc <_realloc_r>:
 80085fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008600:	4680      	mov	r8, r0
 8008602:	4614      	mov	r4, r2
 8008604:	460e      	mov	r6, r1
 8008606:	b921      	cbnz	r1, 8008612 <_realloc_r+0x16>
 8008608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800860c:	4611      	mov	r1, r2
 800860e:	f7ff bb83 	b.w	8007d18 <_malloc_r>
 8008612:	b92a      	cbnz	r2, 8008620 <_realloc_r+0x24>
 8008614:	f7ff fb14 	bl	8007c40 <_free_r>
 8008618:	4625      	mov	r5, r4
 800861a:	4628      	mov	r0, r5
 800861c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008620:	f000 f81b 	bl	800865a <_malloc_usable_size_r>
 8008624:	4284      	cmp	r4, r0
 8008626:	4607      	mov	r7, r0
 8008628:	d802      	bhi.n	8008630 <_realloc_r+0x34>
 800862a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800862e:	d812      	bhi.n	8008656 <_realloc_r+0x5a>
 8008630:	4621      	mov	r1, r4
 8008632:	4640      	mov	r0, r8
 8008634:	f7ff fb70 	bl	8007d18 <_malloc_r>
 8008638:	4605      	mov	r5, r0
 800863a:	2800      	cmp	r0, #0
 800863c:	d0ed      	beq.n	800861a <_realloc_r+0x1e>
 800863e:	42bc      	cmp	r4, r7
 8008640:	4622      	mov	r2, r4
 8008642:	4631      	mov	r1, r6
 8008644:	bf28      	it	cs
 8008646:	463a      	movcs	r2, r7
 8008648:	f7ff faca 	bl	8007be0 <memcpy>
 800864c:	4631      	mov	r1, r6
 800864e:	4640      	mov	r0, r8
 8008650:	f7ff faf6 	bl	8007c40 <_free_r>
 8008654:	e7e1      	b.n	800861a <_realloc_r+0x1e>
 8008656:	4635      	mov	r5, r6
 8008658:	e7df      	b.n	800861a <_realloc_r+0x1e>

0800865a <_malloc_usable_size_r>:
 800865a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800865e:	1f18      	subs	r0, r3, #4
 8008660:	2b00      	cmp	r3, #0
 8008662:	bfbc      	itt	lt
 8008664:	580b      	ldrlt	r3, [r1, r0]
 8008666:	18c0      	addlt	r0, r0, r3
 8008668:	4770      	bx	lr
	...

0800866c <_init>:
 800866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866e:	bf00      	nop
 8008670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008672:	bc08      	pop	{r3}
 8008674:	469e      	mov	lr, r3
 8008676:	4770      	bx	lr

08008678 <_fini>:
 8008678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867a:	bf00      	nop
 800867c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867e:	bc08      	pop	{r3}
 8008680:	469e      	mov	lr, r3
 8008682:	4770      	bx	lr
