
me507_lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008570  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800892c  0800892c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800892c  0800892c  0001892c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008934  08008934  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008934  08008934  00018934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800893c  0800893c  0001893c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000070  080089b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  080089b0  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c18c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a3  00000000  00000000  0003c22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0003f2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  00040500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4d0  00000000  00000000  00041688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016727  00000000  00000000  0005db58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abade  00000000  00000000  0007427f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fd5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006754  00000000  00000000  0011fdb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080086f8 	.word	0x080086f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080086f8 	.word	0x080086f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_Z16getADCsimplifiedv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int getADCsimplified(){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <_Z16getADCsimplifiedv+0x28>)
 800059a:	f001 fdef 	bl	800217c <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 800059e:	2101      	movs	r1, #1
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <_Z16getADCsimplifiedv+0x28>)
 80005a2:	f001 fe9f 	bl	80022e4 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	adcres = HAL_ADC_GetValue(&hadc1);
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <_Z16getADCsimplifiedv+0x28>)
 80005a8:	f002 f837 	bl	800261a <HAL_ADC_GetValue>
 80005ac:	4603      	mov	r3, r0
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <_Z16getADCsimplifiedv+0x2c>)
 80005b2:	801a      	strh	r2, [r3, #0]
	return adcres;
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <_Z16getADCsimplifiedv+0x2c>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000008c 	.word	0x2000008c
 80005c0:	200003b2 	.word	0x200003b2

080005c4 <_ZSt3maxItERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	881a      	ldrh	r2, [r3, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d201      	bcs.n	80005de <_ZSt3maxItERKT_S2_S2_+0x1a>
	return __b;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	e000      	b.n	80005e0 <_ZSt3maxItERKT_S2_S2_+0x1c>
      return __a;
 80005de:	687b      	ldr	r3, [r7, #4]
    }
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <_Z26colorSensor_DetermineColorB5cxx11v>:
	HAL_I2C_Mem_Write(&hi2c2, 0x88, 0x01, I2C_MEMADD_SIZE_8BIT, &configData1,1,HAL_MAX_DELAY );
	HAL_I2C_Mem_Write(&hi2c2, 0x88, 0x02, I2C_MEMADD_SIZE_8BIT, &configData2,1,HAL_MAX_DELAY );
	HAL_I2C_Mem_Write(&hi2c2, 0x88, 0x03, I2C_MEMADD_SIZE_8BIT, &configData3,1,HAL_MAX_DELAY );
}

std::string colorSensor_DetermineColor(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af04      	add	r7, sp, #16
 80005f2:	6078      	str	r0, [r7, #4]

	if (!HAL_I2C_Mem_Read(&hi2c2, 0x88, 0x09, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&colorData, 8, HAL_MAX_DELAY)){
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2308      	movs	r3, #8
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	4b58      	ldr	r3, [pc, #352]	; (8000760 <_Z26colorSensor_DetermineColorB5cxx11v+0x174>)
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	2209      	movs	r2, #9
 8000606:	2188      	movs	r1, #136	; 0x88
 8000608:	4856      	ldr	r0, [pc, #344]	; (8000764 <_Z26colorSensor_DetermineColorB5cxx11v+0x178>)
 800060a:	f002 ff15 	bl	8003438 <HAL_I2C_Mem_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf0c      	ite	eq
 8000614:	2301      	moveq	r3, #1
 8000616:	2300      	movne	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	f000 808a 	beq.w	8000734 <_Z26colorSensor_DetermineColorB5cxx11v+0x148>
		//stores byte data into int values used to determine color
		greenValue = (colorData[1] << 8) | colorData[0];
 8000620:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <_Z26colorSensor_DetermineColorB5cxx11v+0x174>)
 8000622:	785b      	ldrb	r3, [r3, #1]
 8000624:	021b      	lsls	r3, r3, #8
 8000626:	b21a      	sxth	r2, r3
 8000628:	4b4d      	ldr	r3, [pc, #308]	; (8000760 <_Z26colorSensor_DetermineColorB5cxx11v+0x174>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b21b      	sxth	r3, r3
 800062e:	4313      	orrs	r3, r2
 8000630:	b21b      	sxth	r3, r3
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b4c      	ldr	r3, [pc, #304]	; (8000768 <_Z26colorSensor_DetermineColorB5cxx11v+0x17c>)
 8000636:	801a      	strh	r2, [r3, #0]
		redValue = (colorData[3] << 8) | colorData[2];
 8000638:	4b49      	ldr	r3, [pc, #292]	; (8000760 <_Z26colorSensor_DetermineColorB5cxx11v+0x174>)
 800063a:	78db      	ldrb	r3, [r3, #3]
 800063c:	021b      	lsls	r3, r3, #8
 800063e:	b21a      	sxth	r2, r3
 8000640:	4b47      	ldr	r3, [pc, #284]	; (8000760 <_Z26colorSensor_DetermineColorB5cxx11v+0x174>)
 8000642:	789b      	ldrb	r3, [r3, #2]
 8000644:	b21b      	sxth	r3, r3
 8000646:	4313      	orrs	r3, r2
 8000648:	b21b      	sxth	r3, r3
 800064a:	b29a      	uxth	r2, r3
 800064c:	4b47      	ldr	r3, [pc, #284]	; (800076c <_Z26colorSensor_DetermineColorB5cxx11v+0x180>)
 800064e:	801a      	strh	r2, [r3, #0]
		blueValue = (colorData[5] << 8) | colorData[4];
 8000650:	4b43      	ldr	r3, [pc, #268]	; (8000760 <_Z26colorSensor_DetermineColorB5cxx11v+0x174>)
 8000652:	795b      	ldrb	r3, [r3, #5]
 8000654:	021b      	lsls	r3, r3, #8
 8000656:	b21a      	sxth	r2, r3
 8000658:	4b41      	ldr	r3, [pc, #260]	; (8000760 <_Z26colorSensor_DetermineColorB5cxx11v+0x174>)
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	b21b      	sxth	r3, r3
 800065e:	4313      	orrs	r3, r2
 8000660:	b21b      	sxth	r3, r3
 8000662:	b29a      	uxth	r2, r3
 8000664:	4b42      	ldr	r3, [pc, #264]	; (8000770 <_Z26colorSensor_DetermineColorB5cxx11v+0x184>)
 8000666:	801a      	strh	r2, [r3, #0]

		//This algorithm was written by chat GPT to find the max int value.
		int maxValue = std::max(std::max(greenValue, redValue), blueValue);
 8000668:	4940      	ldr	r1, [pc, #256]	; (800076c <_Z26colorSensor_DetermineColorB5cxx11v+0x180>)
 800066a:	483f      	ldr	r0, [pc, #252]	; (8000768 <_Z26colorSensor_DetermineColorB5cxx11v+0x17c>)
 800066c:	f7ff ffaa 	bl	80005c4 <_ZSt3maxItERKT_S2_S2_>
 8000670:	4603      	mov	r3, r0
 8000672:	493f      	ldr	r1, [pc, #252]	; (8000770 <_Z26colorSensor_DetermineColorB5cxx11v+0x184>)
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffa5 	bl	80005c4 <_ZSt3maxItERKT_S2_S2_>
 800067a:	4603      	mov	r3, r0
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	61fb      	str	r3, [r7, #28]

		if (maxValue == blueValue)
 8000680:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <_Z26colorSensor_DetermineColorB5cxx11v+0x184>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	4293      	cmp	r3, r2
 800068a:	d111      	bne.n	80006b0 <_Z26colorSensor_DetermineColorB5cxx11v+0xc4>
			return "Blue";
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	4618      	mov	r0, r3
 8000692:	f007 f9d9 	bl	8007a48 <_ZNSaIcEC1Ev>
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	461a      	mov	r2, r3
 800069c:	4935      	ldr	r1, [pc, #212]	; (8000774 <_Z26colorSensor_DetermineColorB5cxx11v+0x188>)
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f007 fa58 	bl	8007b54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	4618      	mov	r0, r3
 80006aa:	f007 f9ce 	bl	8007a4a <_ZNSaIcED1Ev>
			return "No dominant color";
}
	else {
		return "i2c error";
	}
}
 80006ae:	e052      	b.n	8000756 <_Z26colorSensor_DetermineColorB5cxx11v+0x16a>
		else if (maxValue == greenValue)
 80006b0:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <_Z26colorSensor_DetermineColorB5cxx11v+0x17c>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d111      	bne.n	80006e0 <_Z26colorSensor_DetermineColorB5cxx11v+0xf4>
			return "Green";
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	4618      	mov	r0, r3
 80006c2:	f007 f9c1 	bl	8007a48 <_ZNSaIcEC1Ev>
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	461a      	mov	r2, r3
 80006cc:	492a      	ldr	r1, [pc, #168]	; (8000778 <_Z26colorSensor_DetermineColorB5cxx11v+0x18c>)
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f007 fa40 	bl	8007b54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4618      	mov	r0, r3
 80006da:	f007 f9b6 	bl	8007a4a <_ZNSaIcED1Ev>
}
 80006de:	e03a      	b.n	8000756 <_Z26colorSensor_DetermineColorB5cxx11v+0x16a>
		else if (maxValue == redValue)
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <_Z26colorSensor_DetermineColorB5cxx11v+0x180>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d111      	bne.n	8000710 <_Z26colorSensor_DetermineColorB5cxx11v+0x124>
			return "Red";
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	4618      	mov	r0, r3
 80006f2:	f007 f9a9 	bl	8007a48 <_ZNSaIcEC1Ev>
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	461a      	mov	r2, r3
 80006fc:	491f      	ldr	r1, [pc, #124]	; (800077c <_Z26colorSensor_DetermineColorB5cxx11v+0x190>)
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f007 fa28 	bl	8007b54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4618      	mov	r0, r3
 800070a:	f007 f99e 	bl	8007a4a <_ZNSaIcED1Ev>
}
 800070e:	e022      	b.n	8000756 <_Z26colorSensor_DetermineColorB5cxx11v+0x16a>
			return "No dominant color";
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4618      	mov	r0, r3
 8000716:	f007 f997 	bl	8007a48 <_ZNSaIcEC1Ev>
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	461a      	mov	r2, r3
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <_Z26colorSensor_DetermineColorB5cxx11v+0x194>)
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f007 fa16 	bl	8007b54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4618      	mov	r0, r3
 800072e:	f007 f98c 	bl	8007a4a <_ZNSaIcED1Ev>
}
 8000732:	e010      	b.n	8000756 <_Z26colorSensor_DetermineColorB5cxx11v+0x16a>
		return "i2c error";
 8000734:	f107 0318 	add.w	r3, r7, #24
 8000738:	4618      	mov	r0, r3
 800073a:	f007 f985 	bl	8007a48 <_ZNSaIcEC1Ev>
 800073e:	f107 0318 	add.w	r3, r7, #24
 8000742:	461a      	mov	r2, r3
 8000744:	490f      	ldr	r1, [pc, #60]	; (8000784 <_Z26colorSensor_DetermineColorB5cxx11v+0x198>)
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f007 fa04 	bl	8007b54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800074c:	f107 0318 	add.w	r3, r7, #24
 8000750:	4618      	mov	r0, r3
 8000752:	f007 f97a 	bl	8007a4a <_ZNSaIcED1Ev>
}
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	3720      	adds	r7, #32
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200003ac 	.word	0x200003ac
 8000764:	200000d4 	.word	0x200000d4
 8000768:	200003a8 	.word	0x200003a8
 800076c:	200003a6 	.word	0x200003a6
 8000770:	200003aa 	.word	0x200003aa
 8000774:	08008710 	.word	0x08008710
 8000778:	08008718 	.word	0x08008718
 800077c:	08008720 	.word	0x08008720
 8000780:	08008724 	.word	0x08008724
 8000784:	08008738 	.word	0x08008738

08000788 <_Z15enableAllMotorsv>:

void enableAllMotors(){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	  driver1.enable_driver();
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <_Z15enableAllMotorsv+0x34>)
 800078e:	f000 ff57 	bl	8001640 <_ZN12motor_driver13enable_driverEv>
	  driver2.enable_driver();
 8000792:	480b      	ldr	r0, [pc, #44]	; (80007c0 <_Z15enableAllMotorsv+0x38>)
 8000794:	f000 ff54 	bl	8001640 <_ZN12motor_driver13enable_driverEv>
	  driver3.enable_driver();
 8000798:	480a      	ldr	r0, [pc, #40]	; (80007c4 <_Z15enableAllMotorsv+0x3c>)
 800079a:	f000 ff51 	bl	8001640 <_ZN12motor_driver13enable_driverEv>
	  driver4.enable_driver();
 800079e:	480a      	ldr	r0, [pc, #40]	; (80007c8 <_Z15enableAllMotorsv+0x40>)
 80007a0:	f000 ff4e 	bl	8001640 <_ZN12motor_driver13enable_driverEv>
	  driver5.enable_driver();
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <_Z15enableAllMotorsv+0x44>)
 80007a6:	f000 ff4b 	bl	8001640 <_ZN12motor_driver13enable_driverEv>
	  servo1.enable_driver();
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <_Z15enableAllMotorsv+0x48>)
 80007ac:	f001 f837 	bl	800181e <_ZN12servo_driver13enable_driverEv>
	  servo2.enable_driver();
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <_Z15enableAllMotorsv+0x4c>)
 80007b2:	f001 f834 	bl	800181e <_ZN12servo_driver13enable_driverEv>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200002dc 	.word	0x200002dc
 80007c0:	200002ec 	.word	0x200002ec
 80007c4:	200002fc 	.word	0x200002fc
 80007c8:	2000030c 	.word	0x2000030c
 80007cc:	2000031c 	.word	0x2000031c
 80007d0:	2000032c 	.word	0x2000032c
 80007d4:	20000334 	.word	0x20000334

080007d8 <_Z16disableAllMotorsv>:

void disableAllMotors(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	  driver1.disable_driver();
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <_Z16disableAllMotorsv+0x34>)
 80007de:	f000 ff47 	bl	8001670 <_ZN12motor_driver14disable_driverEv>
	  driver2.disable_driver();
 80007e2:	480b      	ldr	r0, [pc, #44]	; (8000810 <_Z16disableAllMotorsv+0x38>)
 80007e4:	f000 ff44 	bl	8001670 <_ZN12motor_driver14disable_driverEv>
	  driver3.disable_driver();
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <_Z16disableAllMotorsv+0x3c>)
 80007ea:	f000 ff41 	bl	8001670 <_ZN12motor_driver14disable_driverEv>
	  driver4.disable_driver();
 80007ee:	480a      	ldr	r0, [pc, #40]	; (8000818 <_Z16disableAllMotorsv+0x40>)
 80007f0:	f000 ff3e 	bl	8001670 <_ZN12motor_driver14disable_driverEv>
	  driver5.disable_driver();
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <_Z16disableAllMotorsv+0x44>)
 80007f6:	f000 ff3b 	bl	8001670 <_ZN12motor_driver14disable_driverEv>
	  servo1.disable_driver();
 80007fa:	4809      	ldr	r0, [pc, #36]	; (8000820 <_Z16disableAllMotorsv+0x48>)
 80007fc:	f001 f81f 	bl	800183e <_ZN12servo_driver14disable_driverEv>
	  servo2.disable_driver();
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <_Z16disableAllMotorsv+0x4c>)
 8000802:	f001 f81c 	bl	800183e <_ZN12servo_driver14disable_driverEv>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200002dc 	.word	0x200002dc
 8000810:	200002ec 	.word	0x200002ec
 8000814:	200002fc 	.word	0x200002fc
 8000818:	2000030c 	.word	0x2000030c
 800081c:	2000031c 	.word	0x2000031c
 8000820:	2000032c 	.word	0x2000032c
 8000824:	20000334 	.word	0x20000334

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f001 fbcb 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f8d7 	bl	80009e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 fcd3 	bl	80011e0 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 800083a:	f000 fa6d 	bl	8000d18 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 800083e:	f000 f9d3 	bl	8000be8 <_ZL12MX_TIM1_Initv>
  MX_USART1_UART_Init();
 8000842:	f000 fc9f 	bl	8001184 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 8000846:	f000 f93f 	bl	8000ac8 <_ZL12MX_ADC1_Initv>
  MX_I2C2_Init();
 800084a:	f000 f999 	bl	8000b80 <_ZL12MX_I2C2_Initv>
  MX_TIM3_Init();
 800084e:	f000 faf1 	bl	8000e34 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000852:	f000 fb87 	bl	8000f64 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8000856:	f000 fc1d 	bl	8001094 <_ZL12MX_TIM5_Initv>

    strcpy(testbuff, "Hello, UART!");
     */


  enableAllMotors();
 800085a:	f7ff ff95 	bl	8000788 <_Z15enableAllMotorsv>
  driver1.set_duty_cycle(0x40);
 800085e:	2140      	movs	r1, #64	; 0x40
 8000860:	4852      	ldr	r0, [pc, #328]	; (80009ac <main+0x184>)
 8000862:	f000 ff1d 	bl	80016a0 <_ZN12motor_driver14set_duty_cycleEt>
  driver2.set_duty_cycle(0xD0);
 8000866:	21d0      	movs	r1, #208	; 0xd0
 8000868:	4851      	ldr	r0, [pc, #324]	; (80009b0 <main+0x188>)
 800086a:	f000 ff19 	bl	80016a0 <_ZN12motor_driver14set_duty_cycleEt>
  servo1.set_duty_cycle(10);
 800086e:	210a      	movs	r1, #10
 8000870:	4850      	ldr	r0, [pc, #320]	; (80009b4 <main+0x18c>)
 8000872:	f000 fff4 	bl	800185e <_ZN12servo_driver14set_duty_cycleEt>
  servo1.set_duty_cycle(15);
 8000876:	210f      	movs	r1, #15
 8000878:	484e      	ldr	r0, [pc, #312]	; (80009b4 <main+0x18c>)
 800087a:	f000 fff0 	bl	800185e <_ZN12servo_driver14set_duty_cycleEt>
  servo1.set_duty_cycle(20);
 800087e:	2114      	movs	r1, #20
 8000880:	484c      	ldr	r0, [pc, #304]	; (80009b4 <main+0x18c>)
 8000882:	f000 ffec 	bl	800185e <_ZN12servo_driver14set_duty_cycleEt>


    while (1)
    {
    	//start
    	if (state == 0){
 8000886:	4b4c      	ldr	r3, [pc, #304]	; (80009b8 <main+0x190>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10a      	bne.n	80008a4 <main+0x7c>

    		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2101      	movs	r1, #1
 8000892:	484a      	ldr	r0, [pc, #296]	; (80009bc <main+0x194>)
 8000894:	f002 fc5a 	bl	800314c <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2101      	movs	r1, #1
 800089c:	4847      	ldr	r0, [pc, #284]	; (80009bc <main+0x194>)
 800089e:	f002 fc55 	bl	800314c <HAL_GPIO_WritePin>
 80008a2:	e7f0      	b.n	8000886 <main+0x5e>
    		//interrupt will change the state to 1 to begin the program.

    	}

    	//state 1: listen to UART 1 and pick up balls
    	else if (state ==1){
 80008a4:	4b44      	ldr	r3, [pc, #272]	; (80009b8 <main+0x190>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d119      	bne.n	80008e0 <main+0xb8>



    		//checks the light sensor so that when the robot is off the field, it will go to state 2.
    		//adcres = getADCsimplified();
    		adcres = 500;
 80008ac:	4b44      	ldr	r3, [pc, #272]	; (80009c0 <main+0x198>)
 80008ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008b2:	801a      	strh	r2, [r3, #0]
    		//checks if the robot is "home"
    		//pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    		pinstate = GPIO_PIN_RESET;
 80008b4:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <main+0x19c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
    		//if there is no light, meaning robot is not on the field
    		if (adcres <= 400){
 80008ba:	4b41      	ldr	r3, [pc, #260]	; (80009c0 <main+0x198>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80008c2:	d803      	bhi.n	80008cc <main+0xa4>
    			state = 2;
 80008c4:	4b3c      	ldr	r3, [pc, #240]	; (80009b8 <main+0x190>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e7dc      	b.n	8000886 <main+0x5e>
    		}
    		//if the robot is at home, state = 0;
    		else if (pinstate == GPIO_PIN_SET){
 80008cc:	4b3d      	ldr	r3, [pc, #244]	; (80009c4 <main+0x19c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d1d8      	bne.n	8000886 <main+0x5e>
					state = 0;
 80008d4:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <main+0x190>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
					disableAllMotors();
 80008da:	f7ff ff7d 	bl	80007d8 <_Z16disableAllMotorsv>
 80008de:	e7d2      	b.n	8000886 <main+0x5e>
			}
    	}


    	//state 2: when the robot moves outside of the arena or into trouble, backtrack and then once backtrack is confirmed, go back to state 1
    	else if (state == 2){
 80008e0:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <main+0x190>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d116      	bne.n	8000916 <main+0xee>

    		driver1.set_duty_cycle(0xD0);
 80008e8:	21d0      	movs	r1, #208	; 0xd0
 80008ea:	4830      	ldr	r0, [pc, #192]	; (80009ac <main+0x184>)
 80008ec:	f000 fed8 	bl	80016a0 <_ZN12motor_driver14set_duty_cycleEt>
    		driver2.set_duty_cycle(0xD0);
 80008f0:	21d0      	movs	r1, #208	; 0xd0
 80008f2:	482f      	ldr	r0, [pc, #188]	; (80009b0 <main+0x188>)
 80008f4:	f000 fed4 	bl	80016a0 <_ZN12motor_driver14set_duty_cycleEt>


    		//checks the light sensor so that when the robot is back on the field, it will return to state 1.
    		adcres = getADCsimplified();
 80008f8:	f7ff fe4c 	bl	8000594 <_Z16getADCsimplifiedv>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <main+0x198>)
 8000902:	801a      	strh	r2, [r3, #0]
    		//if there is light, meaning the robot is on the field
    		if (adcres >= 400){
 8000904:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <main+0x198>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800090c:	d3bb      	bcc.n	8000886 <main+0x5e>
    			state = 1;
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <main+0x190>)
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	e7b7      	b.n	8000886 <main+0x5e>
    		}

    	}

    	//state 3: when the robot is done picking up balls, it will move to stage 3, where it will deposit balls into the corral
    	else if (state == 3){
 8000916:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <main+0x190>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d1b3      	bne.n	8000886 <main+0x5e>
    		driver3.set_duty_cycle(0x7F);
 800091e:	217f      	movs	r1, #127	; 0x7f
 8000920:	4829      	ldr	r0, [pc, #164]	; (80009c8 <main+0x1a0>)
 8000922:	f000 febd 	bl	80016a0 <_ZN12motor_driver14set_duty_cycleEt>
    		driver4.set_duty_cycle(0x7F);
 8000926:	217f      	movs	r1, #127	; 0x7f
 8000928:	4828      	ldr	r0, [pc, #160]	; (80009cc <main+0x1a4>)
 800092a:	f000 feb9 	bl	80016a0 <_ZN12motor_driver14set_duty_cycleEt>
    		driver5.set_duty_cycle(0x7F);
 800092e:	217f      	movs	r1, #127	; 0x7f
 8000930:	4827      	ldr	r0, [pc, #156]	; (80009d0 <main+0x1a8>)
 8000932:	f000 feb5 	bl	80016a0 <_ZN12motor_driver14set_duty_cycleEt>

    		std::string color = colorSensor_DetermineColor();
 8000936:	463b      	mov	r3, r7
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fe57 	bl	80005ec <_Z26colorSensor_DetermineColorB5cxx11v>
    		if (color == "Blue"){
 800093e:	463b      	mov	r3, r7
 8000940:	4924      	ldr	r1, [pc, #144]	; (80009d4 <main+0x1ac>)
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fdeb 	bl	800151e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d00c      	beq.n	8000968 <main+0x140>
    			servo1.set_duty_cycle(20);
 800094e:	2114      	movs	r1, #20
 8000950:	4818      	ldr	r0, [pc, #96]	; (80009b4 <main+0x18c>)
 8000952:	f000 ff84 	bl	800185e <_ZN12servo_driver14set_duty_cycleEt>
    			HAL_Delay(1000);
 8000956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095a:	f001 fba7 	bl	80020ac <HAL_Delay>
				servo1.set_duty_cycle(10);
 800095e:	210a      	movs	r1, #10
 8000960:	4814      	ldr	r0, [pc, #80]	; (80009b4 <main+0x18c>)
 8000962:	f000 ff7c 	bl	800185e <_ZN12servo_driver14set_duty_cycleEt>
 8000966:	e01c      	b.n	80009a2 <main+0x17a>

    		}
    		else if (color == "Green"){
 8000968:	463b      	mov	r3, r7
 800096a:	491b      	ldr	r1, [pc, #108]	; (80009d8 <main+0x1b0>)
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fdd6 	bl	800151e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d114      	bne.n	80009a2 <main+0x17a>

    		}
    		else if (color == "Red"){
 8000978:	463b      	mov	r3, r7
 800097a:	4918      	ldr	r1, [pc, #96]	; (80009dc <main+0x1b4>)
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fdce 	bl	800151e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d10c      	bne.n	80009a2 <main+0x17a>

    		}
    		else if (color == "No dominant color"){
 8000988:	463b      	mov	r3, r7
 800098a:	4915      	ldr	r1, [pc, #84]	; (80009e0 <main+0x1b8>)
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fdc6 	bl	800151e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d004      	beq.n	80009a2 <main+0x17a>
    			state = 0;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <main+0x190>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
    			disableAllMotors();
 800099e:	f7ff ff1b 	bl	80007d8 <_Z16disableAllMotorsv>
    		std::string color = colorSensor_DetermineColor();
 80009a2:	463b      	mov	r3, r7
 80009a4:	4618      	mov	r0, r3
 80009a6:	f007 f896 	bl	8007ad6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
         */

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    }
 80009aa:	e76c      	b.n	8000886 <main+0x5e>
 80009ac:	200002dc 	.word	0x200002dc
 80009b0:	200002ec 	.word	0x200002ec
 80009b4:	2000032c 	.word	0x2000032c
 80009b8:	200002d4 	.word	0x200002d4
 80009bc:	40020000 	.word	0x40020000
 80009c0:	200003b2 	.word	0x200003b2
 80009c4:	200003b4 	.word	0x200003b4
 80009c8:	200002fc 	.word	0x200002fc
 80009cc:	2000030c 	.word	0x2000030c
 80009d0:	2000031c 	.word	0x2000031c
 80009d4:	08008710 	.word	0x08008710
 80009d8:	08008718 	.word	0x08008718
 80009dc:	08008720 	.word	0x08008720
 80009e0:	08008724 	.word	0x08008724

080009e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	; 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0320 	add.w	r3, r7, #32
 80009ee:	2230      	movs	r2, #48	; 0x30
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f007 f962 	bl	8007cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <_Z18SystemClock_Configv+0xdc>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a2b      	ldr	r2, [pc, #172]	; (8000ac0 <_Z18SystemClock_Configv+0xdc>)
 8000a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <_Z18SystemClock_Configv+0xdc>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <_Z18SystemClock_Configv+0xe0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <_Z18SystemClock_Configv+0xe0>)
 8000a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <_Z18SystemClock_Configv+0xe0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a54:	230c      	movs	r3, #12
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a58:	2360      	movs	r3, #96	; 0x60
 8000a5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 fd55 	bl	8005518 <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	bf14      	ite	ne
 8000a74:	2301      	movne	r3, #1
 8000a76:	2300      	moveq	r3, #0
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000a7e:	f000 fd49 	bl	8001514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a82:	230f      	movs	r3, #15
 8000a84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a86:	2302      	movs	r3, #2
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f004 ffb2 	bl	8005a08 <HAL_RCC_ClockConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf14      	ite	ne
 8000aaa:	2301      	movne	r3, #1
 8000aac:	2300      	moveq	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000ab4:	f000 fd2e 	bl	8001514 <Error_Handler>
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3750      	adds	r7, #80	; 0x50
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40007000 	.word	0x40007000

08000ac8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000adc:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <_ZL12MX_ADC1_Initv+0xb0>)
 8000ade:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000ae2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ae6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <_ZL12MX_ADC1_Initv+0xb4>)
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b28:	4812      	ldr	r0, [pc, #72]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000b2a:	f001 fae3 	bl	80020f4 <HAL_ADC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bf14      	ite	ne
 8000b34:	2301      	movne	r3, #1
 8000b36:	2300      	moveq	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8000b3e:	f000 fce9 	bl	8001514 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b42:	2305      	movs	r3, #5
 8000b44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4619      	mov	r1, r3
 8000b52:	4808      	ldr	r0, [pc, #32]	; (8000b74 <_ZL12MX_ADC1_Initv+0xac>)
 8000b54:	f001 fd8c 	bl	8002670 <HAL_ADC_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf14      	ite	ne
 8000b5e:	2301      	movne	r3, #1
 8000b60:	2300      	moveq	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000b68:	f000 fcd4 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000008c 	.word	0x2000008c
 8000b78:	40012000 	.word	0x40012000
 8000b7c:	0f000001 	.word	0x0f000001

08000b80 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <_ZL12MX_I2C2_Initv+0x5c>)
 8000b86:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <_ZL12MX_I2C2_Initv+0x60>)
 8000b88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <_ZL12MX_I2C2_Initv+0x5c>)
 8000b8c:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <_ZL12MX_I2C2_Initv+0x64>)
 8000b8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <_ZL12MX_I2C2_Initv+0x5c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_ZL12MX_I2C2_Initv+0x5c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <_ZL12MX_I2C2_Initv+0x5c>)
 8000b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <_ZL12MX_I2C2_Initv+0x5c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <_ZL12MX_I2C2_Initv+0x5c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <_ZL12MX_I2C2_Initv+0x5c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <_ZL12MX_I2C2_Initv+0x5c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <_ZL12MX_I2C2_Initv+0x5c>)
 8000bbe:	f002 faf7 	bl	80031b0 <HAL_I2C_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	bf14      	ite	ne
 8000bc8:	2301      	movne	r3, #1
 8000bca:	2300      	moveq	r3, #0
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8000bd2:	f000 fc9f 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000d4 	.word	0x200000d4
 8000be0:	40005800 	.word	0x40005800
 8000be4:	000186a0 	.word	0x000186a0

08000be8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b092      	sub	sp, #72	; 0x48
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2220      	movs	r2, #32
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f007 f852 	bl	8007cbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c18:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <_ZL12MX_TIM1_Initv+0x128>)
 8000c1a:	4a3e      	ldr	r2, [pc, #248]	; (8000d14 <_ZL12MX_TIM1_Initv+0x12c>)
 8000c1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 8000c1e:	4b3c      	ldr	r3, [pc, #240]	; (8000d10 <_ZL12MX_TIM1_Initv+0x128>)
 8000c20:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <_ZL12MX_TIM1_Initv+0x128>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8000c2c:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <_ZL12MX_TIM1_Initv+0x128>)
 8000c2e:	22c8      	movs	r2, #200	; 0xc8
 8000c30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c32:	4b37      	ldr	r3, [pc, #220]	; (8000d10 <_ZL12MX_TIM1_Initv+0x128>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c38:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <_ZL12MX_TIM1_Initv+0x128>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <_ZL12MX_TIM1_Initv+0x128>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c44:	4832      	ldr	r0, [pc, #200]	; (8000d10 <_ZL12MX_TIM1_Initv+0x128>)
 8000c46:	f005 f90e 	bl	8005e66 <HAL_TIM_PWM_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf14      	ite	ne
 8000c50:	2301      	movne	r3, #1
 8000c52:	2300      	moveq	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8000c5a:	f000 fc5b 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4828      	ldr	r0, [pc, #160]	; (8000d10 <_ZL12MX_TIM1_Initv+0x128>)
 8000c6e:	f005 feb3 	bl	80069d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	bf14      	ite	ne
 8000c78:	2301      	movne	r3, #1
 8000c7a:	2300      	moveq	r3, #0
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8000c82:	f000 fc47 	bl	8001514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c86:	2360      	movs	r3, #96	; 0x60
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4819      	ldr	r0, [pc, #100]	; (8000d10 <_ZL12MX_TIM1_Initv+0x128>)
 8000cac:	f005 fa3e 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	bf14      	ite	ne
 8000cb6:	2301      	movne	r3, #1
 8000cb8:	2300      	moveq	r3, #0
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8000cc0:	f000 fc28 	bl	8001514 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480a      	ldr	r0, [pc, #40]	; (8000d10 <_ZL12MX_TIM1_Initv+0x128>)
 8000ce8:	f005 fee4 	bl	8006ab4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf14      	ite	ne
 8000cf2:	2301      	movne	r3, #1
 8000cf4:	2300      	moveq	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 8000cfc:	f000 fc0a 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <_ZL12MX_TIM1_Initv+0x128>)
 8000d02:	f000 ff33 	bl	8001b6c <HAL_TIM_MspPostInit>

}
 8000d06:	bf00      	nop
 8000d08:	3748      	adds	r7, #72	; 0x48
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000128 	.word	0x20000128
 8000d14:	40010000 	.word	0x40010000

08000d18 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	; 0x38
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2c:	f107 0320 	add.w	r3, r7, #32
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	615a      	str	r2, [r3, #20]
 8000d46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d48:	4b39      	ldr	r3, [pc, #228]	; (8000e30 <_ZL12MX_TIM2_Initv+0x118>)
 8000d4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000d50:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <_ZL12MX_TIM2_Initv+0x118>)
 8000d52:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <_ZL12MX_TIM2_Initv+0x118>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8000d5e:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <_ZL12MX_TIM2_Initv+0x118>)
 8000d60:	22c7      	movs	r2, #199	; 0xc7
 8000d62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d64:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <_ZL12MX_TIM2_Initv+0x118>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <_ZL12MX_TIM2_Initv+0x118>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d70:	482f      	ldr	r0, [pc, #188]	; (8000e30 <_ZL12MX_TIM2_Initv+0x118>)
 8000d72:	f005 f829 	bl	8005dc8 <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	bf14      	ite	ne
 8000d7c:	2301      	movne	r3, #1
 8000d7e:	2300      	moveq	r3, #0
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000d86:	f000 fbc5 	bl	8001514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4826      	ldr	r0, [pc, #152]	; (8000e30 <_ZL12MX_TIM2_Initv+0x118>)
 8000d98:	f005 fa8a 	bl	80062b0 <HAL_TIM_ConfigClockSource>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf14      	ite	ne
 8000da2:	2301      	movne	r3, #1
 8000da4:	2300      	moveq	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000dac:	f000 fbb2 	bl	8001514 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000db0:	481f      	ldr	r0, [pc, #124]	; (8000e30 <_ZL12MX_TIM2_Initv+0x118>)
 8000db2:	f005 f858 	bl	8005e66 <HAL_TIM_PWM_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	bf14      	ite	ne
 8000dbc:	2301      	movne	r3, #1
 8000dbe:	2300      	moveq	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000dc6:	f000 fba5 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd2:	f107 0320 	add.w	r3, r7, #32
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4815      	ldr	r0, [pc, #84]	; (8000e30 <_ZL12MX_TIM2_Initv+0x118>)
 8000dda:	f005 fdfd 	bl	80069d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	bf14      	ite	ne
 8000de4:	2301      	movne	r3, #1
 8000de6:	2300      	moveq	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000dee:	f000 fb91 	bl	8001514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df2:	2360      	movs	r3, #96	; 0x60
 8000df4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	4619      	mov	r1, r3
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <_ZL12MX_TIM2_Initv+0x118>)
 8000e0a:	f005 f98f 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf14      	ite	ne
 8000e14:	2301      	movne	r3, #1
 8000e16:	2300      	moveq	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8000e1e:	f000 fb79 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e22:	4803      	ldr	r0, [pc, #12]	; (8000e30 <_ZL12MX_TIM2_Initv+0x118>)
 8000e24:	f000 fea2 	bl	8001b6c <HAL_TIM_MspPostInit>

}
 8000e28:	bf00      	nop
 8000e2a:	3738      	adds	r7, #56	; 0x38
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000170 	.word	0x20000170

08000e34 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
 8000e52:	615a      	str	r2, [r3, #20]
 8000e54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e56:	4b41      	ldr	r3, [pc, #260]	; (8000f5c <_ZL12MX_TIM3_Initv+0x128>)
 8000e58:	4a41      	ldr	r2, [pc, #260]	; (8000f60 <_ZL12MX_TIM3_Initv+0x12c>)
 8000e5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e5c:	4b3f      	ldr	r3, [pc, #252]	; (8000f5c <_ZL12MX_TIM3_Initv+0x128>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e62:	4b3e      	ldr	r3, [pc, #248]	; (8000f5c <_ZL12MX_TIM3_Initv+0x128>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4799;
 8000e68:	4b3c      	ldr	r3, [pc, #240]	; (8000f5c <_ZL12MX_TIM3_Initv+0x128>)
 8000e6a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000e6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e70:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <_ZL12MX_TIM3_Initv+0x128>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e76:	4b39      	ldr	r3, [pc, #228]	; (8000f5c <_ZL12MX_TIM3_Initv+0x128>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e7c:	4837      	ldr	r0, [pc, #220]	; (8000f5c <_ZL12MX_TIM3_Initv+0x128>)
 8000e7e:	f004 fff2 	bl	8005e66 <HAL_TIM_PWM_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bf14      	ite	ne
 8000e88:	2301      	movne	r3, #1
 8000e8a:	2300      	moveq	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8000e92:	f000 fb3f 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	482d      	ldr	r0, [pc, #180]	; (8000f5c <_ZL12MX_TIM3_Initv+0x128>)
 8000ea6:	f005 fd97 	bl	80069d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf14      	ite	ne
 8000eb0:	2301      	movne	r3, #1
 8000eb2:	2300      	moveq	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8000eba:	f000 fb2b 	bl	8001514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ebe:	2360      	movs	r3, #96	; 0x60
 8000ec0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4821      	ldr	r0, [pc, #132]	; (8000f5c <_ZL12MX_TIM3_Initv+0x128>)
 8000ed6:	f005 f929 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf14      	ite	ne
 8000ee0:	2301      	movne	r3, #1
 8000ee2:	2300      	moveq	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8000eea:	f000 fb13 	bl	8001514 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4819      	ldr	r0, [pc, #100]	; (8000f5c <_ZL12MX_TIM3_Initv+0x128>)
 8000ef6:	f005 f919 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf14      	ite	ne
 8000f00:	2301      	movne	r3, #1
 8000f02:	2300      	moveq	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8000f0a:	f000 fb03 	bl	8001514 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2208      	movs	r2, #8
 8000f12:	4619      	mov	r1, r3
 8000f14:	4811      	ldr	r0, [pc, #68]	; (8000f5c <_ZL12MX_TIM3_Initv+0x128>)
 8000f16:	f005 f909 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	bf14      	ite	ne
 8000f20:	2301      	movne	r3, #1
 8000f22:	2300      	moveq	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 8000f2a:	f000 faf3 	bl	8001514 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	220c      	movs	r2, #12
 8000f32:	4619      	mov	r1, r3
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <_ZL12MX_TIM3_Initv+0x128>)
 8000f36:	f005 f8f9 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	bf14      	ite	ne
 8000f40:	2301      	movne	r3, #1
 8000f42:	2300      	moveq	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 8000f4a:	f000 fae3 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f4e:	4803      	ldr	r0, [pc, #12]	; (8000f5c <_ZL12MX_TIM3_Initv+0x128>)
 8000f50:	f000 fe0c 	bl	8001b6c <HAL_TIM_MspPostInit>

}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200001b8 	.word	0x200001b8
 8000f60:	40000400 	.word	0x40000400

08000f64 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f86:	4b41      	ldr	r3, [pc, #260]	; (800108c <_ZL12MX_TIM4_Initv+0x128>)
 8000f88:	4a41      	ldr	r2, [pc, #260]	; (8001090 <_ZL12MX_TIM4_Initv+0x12c>)
 8000f8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f8c:	4b3f      	ldr	r3, [pc, #252]	; (800108c <_ZL12MX_TIM4_Initv+0x128>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	4b3e      	ldr	r3, [pc, #248]	; (800108c <_ZL12MX_TIM4_Initv+0x128>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4799;
 8000f98:	4b3c      	ldr	r3, [pc, #240]	; (800108c <_ZL12MX_TIM4_Initv+0x128>)
 8000f9a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000f9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	4b3a      	ldr	r3, [pc, #232]	; (800108c <_ZL12MX_TIM4_Initv+0x128>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa6:	4b39      	ldr	r3, [pc, #228]	; (800108c <_ZL12MX_TIM4_Initv+0x128>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fac:	4837      	ldr	r0, [pc, #220]	; (800108c <_ZL12MX_TIM4_Initv+0x128>)
 8000fae:	f004 ff5a 	bl	8005e66 <HAL_TIM_PWM_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8000fc2:	f000 faa7 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	482d      	ldr	r0, [pc, #180]	; (800108c <_ZL12MX_TIM4_Initv+0x128>)
 8000fd6:	f005 fcff 	bl	80069d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bf14      	ite	ne
 8000fe0:	2301      	movne	r3, #1
 8000fe2:	2300      	moveq	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 8000fea:	f000 fa93 	bl	8001514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fee:	2360      	movs	r3, #96	; 0x60
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	4821      	ldr	r0, [pc, #132]	; (800108c <_ZL12MX_TIM4_Initv+0x128>)
 8001006:	f005 f891 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf14      	ite	ne
 8001010:	2301      	movne	r3, #1
 8001012:	2300      	moveq	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 800101a:	f000 fa7b 	bl	8001514 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2204      	movs	r2, #4
 8001022:	4619      	mov	r1, r3
 8001024:	4819      	ldr	r0, [pc, #100]	; (800108c <_ZL12MX_TIM4_Initv+0x128>)
 8001026:	f005 f881 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	bf14      	ite	ne
 8001030:	2301      	movne	r3, #1
 8001032:	2300      	moveq	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 800103a:	f000 fa6b 	bl	8001514 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2208      	movs	r2, #8
 8001042:	4619      	mov	r1, r3
 8001044:	4811      	ldr	r0, [pc, #68]	; (800108c <_ZL12MX_TIM4_Initv+0x128>)
 8001046:	f005 f871 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	bf14      	ite	ne
 8001050:	2301      	movne	r3, #1
 8001052:	2300      	moveq	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <_ZL12MX_TIM4_Initv+0xfa>
  {
    Error_Handler();
 800105a:	f000 fa5b 	bl	8001514 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	220c      	movs	r2, #12
 8001062:	4619      	mov	r1, r3
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <_ZL12MX_TIM4_Initv+0x128>)
 8001066:	f005 f861 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	bf14      	ite	ne
 8001070:	2301      	movne	r3, #1
 8001072:	2300      	moveq	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <_ZL12MX_TIM4_Initv+0x11a>
  {
    Error_Handler();
 800107a:	f000 fa4b 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <_ZL12MX_TIM4_Initv+0x128>)
 8001080:	f000 fd74 	bl	8001b6c <HAL_TIM_MspPostInit>

}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000200 	.word	0x20000200
 8001090:	40000800 	.word	0x40000800

08001094 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]
 80010b2:	615a      	str	r2, [r3, #20]
 80010b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010b6:	4b31      	ldr	r3, [pc, #196]	; (800117c <_ZL12MX_TIM5_Initv+0xe8>)
 80010b8:	4a31      	ldr	r2, [pc, #196]	; (8001180 <_ZL12MX_TIM5_Initv+0xec>)
 80010ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010bc:	4b2f      	ldr	r3, [pc, #188]	; (800117c <_ZL12MX_TIM5_Initv+0xe8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <_ZL12MX_TIM5_Initv+0xe8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4799;
 80010c8:	4b2c      	ldr	r3, [pc, #176]	; (800117c <_ZL12MX_TIM5_Initv+0xe8>)
 80010ca:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80010ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b2a      	ldr	r3, [pc, #168]	; (800117c <_ZL12MX_TIM5_Initv+0xe8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d6:	4b29      	ldr	r3, [pc, #164]	; (800117c <_ZL12MX_TIM5_Initv+0xe8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80010dc:	4827      	ldr	r0, [pc, #156]	; (800117c <_ZL12MX_TIM5_Initv+0xe8>)
 80010de:	f004 fec2 	bl	8005e66 <HAL_TIM_PWM_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	bf14      	ite	ne
 80010e8:	2301      	movne	r3, #1
 80010ea:	2300      	moveq	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 80010f2:	f000 fa0f 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	4619      	mov	r1, r3
 8001104:	481d      	ldr	r0, [pc, #116]	; (800117c <_ZL12MX_TIM5_Initv+0xe8>)
 8001106:	f005 fc67 	bl	80069d8 <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	bf14      	ite	ne
 8001110:	2301      	movne	r3, #1
 8001112:	2300      	moveq	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 800111a:	f000 f9fb 	bl	8001514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111e:	2360      	movs	r3, #96	; 0x60
 8001120:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2208      	movs	r2, #8
 8001132:	4619      	mov	r1, r3
 8001134:	4811      	ldr	r0, [pc, #68]	; (800117c <_ZL12MX_TIM5_Initv+0xe8>)
 8001136:	f004 fff9 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf14      	ite	ne
 8001140:	2301      	movne	r3, #1
 8001142:	2300      	moveq	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <_ZL12MX_TIM5_Initv+0xba>
  {
    Error_Handler();
 800114a:	f000 f9e3 	bl	8001514 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	220c      	movs	r2, #12
 8001152:	4619      	mov	r1, r3
 8001154:	4809      	ldr	r0, [pc, #36]	; (800117c <_ZL12MX_TIM5_Initv+0xe8>)
 8001156:	f004 ffe9 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	bf14      	ite	ne
 8001160:	2301      	movne	r3, #1
 8001162:	2300      	moveq	r3, #0
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800116a:	f000 f9d3 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <_ZL12MX_TIM5_Initv+0xe8>)
 8001170:	f000 fcfc 	bl	8001b6c <HAL_TIM_MspPostInit>

}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000248 	.word	0x20000248
 8001180:	40000c00 	.word	0x40000c00

08001184 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800118a:	4a14      	ldr	r2, [pc, #80]	; (80011dc <_ZL19MX_USART1_UART_Initv+0x58>)
 800118c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ba:	4807      	ldr	r0, [pc, #28]	; (80011d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011bc:	f005 fccc 	bl	8006b58 <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bf14      	ite	ne
 80011c6:	2301      	movne	r3, #1
 80011c8:	2300      	moveq	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80011d0:	f000 f9a0 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000290 	.word	0x20000290
 80011dc:	40011000 	.word	0x40011000

080011e0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <_ZL12MX_GPIO_Initv+0xec>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a33      	ldr	r2, [pc, #204]	; (80012cc <_ZL12MX_GPIO_Initv+0xec>)
 8001200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <_ZL12MX_GPIO_Initv+0xec>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <_ZL12MX_GPIO_Initv+0xec>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a2c      	ldr	r2, [pc, #176]	; (80012cc <_ZL12MX_GPIO_Initv+0xec>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <_ZL12MX_GPIO_Initv+0xec>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <_ZL12MX_GPIO_Initv+0xec>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a25      	ldr	r2, [pc, #148]	; (80012cc <_ZL12MX_GPIO_Initv+0xec>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <_ZL12MX_GPIO_Initv+0xec>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2101      	movs	r1, #1
 800124e:	4820      	ldr	r0, [pc, #128]	; (80012d0 <_ZL12MX_GPIO_Initv+0xf0>)
 8001250:	f001 ff7c 	bl	800314c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001254:	2301      	movs	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4619      	mov	r1, r3
 800126a:	4819      	ldr	r0, [pc, #100]	; (80012d0 <_ZL12MX_GPIO_Initv+0xf0>)
 800126c:	f001 fdea 	bl	8002e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001270:	2310      	movs	r3, #16
 8001272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4619      	mov	r1, r3
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <_ZL12MX_GPIO_Initv+0xf0>)
 8001284:	f001 fdde 	bl	8002e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8001288:	f241 0304 	movw	r3, #4100	; 0x1004
 800128c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800128e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001294:	2301      	movs	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	480d      	ldr	r0, [pc, #52]	; (80012d4 <_ZL12MX_GPIO_Initv+0xf4>)
 80012a0:	f001 fdd0 	bl	8002e44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2008      	movs	r0, #8
 80012aa:	f001 fcf4 	bl	8002c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80012ae:	2008      	movs	r0, #8
 80012b0:	f001 fd0d 	bl	8002cce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2028      	movs	r0, #40	; 0x28
 80012ba:	f001 fcec 	bl	8002c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012be:	2028      	movs	r0, #40	; 0x28
 80012c0:	f001 fd05 	bl	8002cce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400

080012d8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
    if(huart == &huart1 && state ==1) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a59      	ldr	r2, [pc, #356]	; (8001448 <HAL_UART_RxCpltCallback+0x170>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	f040 80ab 	bne.w	8001440 <HAL_UART_RxCpltCallback+0x168>
 80012ea:	4b58      	ldr	r3, [pc, #352]	; (800144c <HAL_UART_RxCpltCallback+0x174>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	f040 80a6 	bne.w	8001440 <HAL_UART_RxCpltCallback+0x168>
    	HAL_UART_Receive_IT(&huart1, (uint8_t*)&data, 1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	4956      	ldr	r1, [pc, #344]	; (8001450 <HAL_UART_RxCpltCallback+0x178>)
 80012f8:	4853      	ldr	r0, [pc, #332]	; (8001448 <HAL_UART_RxCpltCallback+0x170>)
 80012fa:	f005 fc7a 	bl	8006bf2 <HAL_UART_Receive_IT>
        //HAL_UART_Transmit(&huart2, (uint8_t*)&data, 1, 1000);

        if(data == '\r' && buff_idx >= 4) {
 80012fe:	4b54      	ldr	r3, [pc, #336]	; (8001450 <HAL_UART_RxCpltCallback+0x178>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b0d      	cmp	r3, #13
 8001304:	f040 8087 	bne.w	8001416 <HAL_UART_RxCpltCallback+0x13e>
 8001308:	4b52      	ldr	r3, [pc, #328]	; (8001454 <HAL_UART_RxCpltCallback+0x17c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b03      	cmp	r3, #3
 800130e:	f240 8082 	bls.w	8001416 <HAL_UART_RxCpltCallback+0x13e>
            //check for M
            if(msg_buff[buff_idx - 4] != 'M')
 8001312:	4b50      	ldr	r3, [pc, #320]	; (8001454 <HAL_UART_RxCpltCallback+0x17c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	3b04      	subs	r3, #4
 8001318:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_UART_RxCpltCallback+0x180>)
 800131a:	5cd3      	ldrb	r3, [r2, r3]
 800131c:	2b4d      	cmp	r3, #77	; 0x4d
 800131e:	f040 808c 	bne.w	800143a <HAL_UART_RxCpltCallback+0x162>
                return;

            // check for n = 1 or 2
            if(!(msg_buff[buff_idx - 3] == '1' || msg_buff[buff_idx - 3] == '2'))
 8001322:	4b4c      	ldr	r3, [pc, #304]	; (8001454 <HAL_UART_RxCpltCallback+0x17c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	3b03      	subs	r3, #3
 8001328:	4a4b      	ldr	r2, [pc, #300]	; (8001458 <HAL_UART_RxCpltCallback+0x180>)
 800132a:	5cd3      	ldrb	r3, [r2, r3]
 800132c:	2b31      	cmp	r3, #49	; 0x31
 800132e:	d006      	beq.n	800133e <HAL_UART_RxCpltCallback+0x66>
 8001330:	4b48      	ldr	r3, [pc, #288]	; (8001454 <HAL_UART_RxCpltCallback+0x17c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	3b03      	subs	r3, #3
 8001336:	4a48      	ldr	r2, [pc, #288]	; (8001458 <HAL_UART_RxCpltCallback+0x180>)
 8001338:	5cd3      	ldrb	r3, [r2, r3]
 800133a:	2b32      	cmp	r3, #50	; 0x32
 800133c:	d17f      	bne.n	800143e <HAL_UART_RxCpltCallback+0x166>
                return;

            // get driver number
            int driver_idx = msg_buff[buff_idx - 3] - '0';
 800133e:	4b45      	ldr	r3, [pc, #276]	; (8001454 <HAL_UART_RxCpltCallback+0x17c>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3b03      	subs	r3, #3
 8001344:	4a44      	ldr	r2, [pc, #272]	; (8001458 <HAL_UART_RxCpltCallback+0x180>)
 8001346:	5cd3      	ldrb	r3, [r2, r3]
 8001348:	3b30      	subs	r3, #48	; 0x30
 800134a:	613b      	str	r3, [r7, #16]

            // get duty cycle
            msg_buff[buff_idx] = 0;
 800134c:	4b41      	ldr	r3, [pc, #260]	; (8001454 <HAL_UART_RxCpltCallback+0x17c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b41      	ldr	r3, [pc, #260]	; (8001458 <HAL_UART_RxCpltCallback+0x180>)
 8001354:	2100      	movs	r1, #0
 8001356:	5499      	strb	r1, [r3, r2]
            long dc_initial = strtol(msg_buff + buff_idx - 2, NULL, 16);
 8001358:	4b3e      	ldr	r3, [pc, #248]	; (8001454 <HAL_UART_RxCpltCallback+0x17c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	3b02      	subs	r3, #2
 800135e:	4a3e      	ldr	r2, [pc, #248]	; (8001458 <HAL_UART_RxCpltCallback+0x180>)
 8001360:	4413      	add	r3, r2
 8001362:	2210      	movs	r2, #16
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f006 fe86 	bl	8008078 <strtol>
 800136c:	60f8      	str	r0, [r7, #12]
            uint8_t direction;
            uint16_t dc;
            if(dc_initial > 0x7f) {
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b7f      	cmp	r3, #127	; 0x7f
 8001372:	dd0f      	ble.n	8001394 <HAL_UART_RxCpltCallback+0xbc>
                direction = 1;
 8001374:	2301      	movs	r3, #1
 8001376:	75fb      	strb	r3, [r7, #23]
                dc_initial = 0x100 - dc_initial;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800137e:	60fb      	str	r3, [r7, #12]
                dc = (uint16_t)dc_initial * htim1.Init.Period / 128;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	b29b      	uxth	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	4b35      	ldr	r3, [pc, #212]	; (800145c <HAL_UART_RxCpltCallback+0x184>)
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	09db      	lsrs	r3, r3, #7
 8001390:	82bb      	strh	r3, [r7, #20]
 8001392:	e010      	b.n	80013b6 <HAL_UART_RxCpltCallback+0xde>
            }
            else {
                direction = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	75fb      	strb	r3, [r7, #23]
                dc = (uint16_t)dc_initial * htim1.Init.Period / 127;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4b2f      	ldr	r3, [pc, #188]	; (800145c <HAL_UART_RxCpltCallback+0x184>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	fb03 f202 	mul.w	r2, r3, r2
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <HAL_UART_RxCpltCallback+0x188>)
 80013a8:	fba3 1302 	umull	r1, r3, r3, r2
 80013ac:	1ad2      	subs	r2, r2, r3
 80013ae:	0852      	lsrs	r2, r2, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	099b      	lsrs	r3, r3, #6
 80013b4:	82bb      	strh	r3, [r7, #20]
            }

            // update motor driver
            if(driver_idx == 1) {
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d10a      	bne.n	80013d2 <HAL_UART_RxCpltCallback+0xfa>
                driver1.set_direction(direction);
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	4619      	mov	r1, r3
 80013c0:	4828      	ldr	r0, [pc, #160]	; (8001464 <HAL_UART_RxCpltCallback+0x18c>)
 80013c2:	f000 fa0a 	bl	80017da <_ZN12motor_driver13set_directionEh>
                driver1.set_duty_cycle(dc);
 80013c6:	8abb      	ldrh	r3, [r7, #20]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4826      	ldr	r0, [pc, #152]	; (8001464 <HAL_UART_RxCpltCallback+0x18c>)
 80013cc:	f000 f968 	bl	80016a0 <_ZN12motor_driver14set_duty_cycleEt>
 80013d0:	e009      	b.n	80013e6 <HAL_UART_RxCpltCallback+0x10e>
            }
            else {
                driver2.set_direction(direction);
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	4619      	mov	r1, r3
 80013d6:	4824      	ldr	r0, [pc, #144]	; (8001468 <HAL_UART_RxCpltCallback+0x190>)
 80013d8:	f000 f9ff 	bl	80017da <_ZN12motor_driver13set_directionEh>
                driver2.set_duty_cycle(dc);
 80013dc:	8abb      	ldrh	r3, [r7, #20]
 80013de:	4619      	mov	r1, r3
 80013e0:	4821      	ldr	r0, [pc, #132]	; (8001468 <HAL_UART_RxCpltCallback+0x190>)
 80013e2:	f000 f95d 	bl	80016a0 <_ZN12motor_driver14set_duty_cycleEt>
            }

            // reset buff_idx
            buff_idx = 0;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_UART_RxCpltCallback+0x17c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]

            // send response
            uint16_t size;
            if(direction == 0)
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d108      	bne.n	8001404 <HAL_UART_RxCpltCallback+0x12c>
                size = sprintf(msg_buff, "\nMotor %d set to forward at duty cycle %d\r\n", driver_idx, dc);
 80013f2:	8abb      	ldrh	r3, [r7, #20]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	491d      	ldr	r1, [pc, #116]	; (800146c <HAL_UART_RxCpltCallback+0x194>)
 80013f8:	4817      	ldr	r0, [pc, #92]	; (8001458 <HAL_UART_RxCpltCallback+0x180>)
 80013fa:	f006 fd9b 	bl	8007f34 <siprintf>
 80013fe:	4603      	mov	r3, r0
 8001400:	817b      	strh	r3, [r7, #10]
            else
                size = sprintf(msg_buff, "\nMotor %d set to reverse at duty cycle %d\r\n", driver_idx, dc);
 8001402:	e01d      	b.n	8001440 <HAL_UART_RxCpltCallback+0x168>
 8001404:	8abb      	ldrh	r3, [r7, #20]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4919      	ldr	r1, [pc, #100]	; (8001470 <HAL_UART_RxCpltCallback+0x198>)
 800140a:	4813      	ldr	r0, [pc, #76]	; (8001458 <HAL_UART_RxCpltCallback+0x180>)
 800140c:	f006 fd92 	bl	8007f34 <siprintf>
 8001410:	4603      	mov	r3, r0
 8001412:	817b      	strh	r3, [r7, #10]
 8001414:	e014      	b.n	8001440 <HAL_UART_RxCpltCallback+0x168>
            //HAL_UART_Transmit(&huart2, (uint8_t*)msg_buff, size, 1000);
        }
        else if(buff_idx < 100) {
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_UART_RxCpltCallback+0x17c>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b63      	cmp	r3, #99	; 0x63
 800141c:	d810      	bhi.n	8001440 <HAL_UART_RxCpltCallback+0x168>
            msg_buff[buff_idx] = data;
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_UART_RxCpltCallback+0x17c>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_UART_RxCpltCallback+0x178>)
 8001426:	7819      	ldrb	r1, [r3, #0]
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_UART_RxCpltCallback+0x180>)
 800142a:	5499      	strb	r1, [r3, r2]
            buff_idx++;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_UART_RxCpltCallback+0x17c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	b2da      	uxtb	r2, r3
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <HAL_UART_RxCpltCallback+0x17c>)
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	e002      	b.n	8001440 <HAL_UART_RxCpltCallback+0x168>
                return;
 800143a:	bf00      	nop
 800143c:	e000      	b.n	8001440 <HAL_UART_RxCpltCallback+0x168>
                return;
 800143e:	bf00      	nop
        }
    }
}
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000290 	.word	0x20000290
 800144c:	200002d4 	.word	0x200002d4
 8001450:	2000033c 	.word	0x2000033c
 8001454:	200003a4 	.word	0x200003a4
 8001458:	20000340 	.word	0x20000340
 800145c:	20000128 	.word	0x20000128
 8001460:	02040811 	.word	0x02040811
 8001464:	200002dc 	.word	0x200002dc
 8001468:	200002ec 	.word	0x200002ec
 800146c:	08008744 	.word	0x08008744
 8001470:	08008770 	.word	0x08008770

08001474 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
	// uses the pause state of the state machine, the oldstate variable remebers the previous state of the state machine and will go back to it once finished
	if (GPIO_Pin == GPIO_PIN_2){
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	2b04      	cmp	r3, #4
 8001482:	d127      	bne.n	80014d4 <HAL_GPIO_EXTI_Callback+0x60>
		if (state == 0){
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_GPIO_EXTI_Callback+0x90>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10a      	bne.n	80014a2 <HAL_GPIO_EXTI_Callback+0x2e>
			state = 1;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_GPIO_EXTI_Callback+0x90>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]
			//i2c stuff
			//colorSensor_Init();
			//driver enable
			enableAllMotors();
 8001492:	f7ff f979 	bl	8000788 <_Z15enableAllMotorsv>
			HAL_UART_Receive_IT(&huart1, (uint8_t*)&data, 1);
 8001496:	2201      	movs	r2, #1
 8001498:	491b      	ldr	r1, [pc, #108]	; (8001508 <HAL_GPIO_EXTI_Callback+0x94>)
 800149a:	481c      	ldr	r0, [pc, #112]	; (800150c <HAL_GPIO_EXTI_Callback+0x98>)
 800149c:	f005 fba9 	bl	8006bf2 <HAL_UART_Receive_IT>
			state = 0;
		}
	}


}
 80014a0:	e02b      	b.n	80014fa <HAL_GPIO_EXTI_Callback+0x86>
		else if (state!= 4 && state != 0){
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_GPIO_EXTI_Callback+0x90>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d00d      	beq.n	80014c6 <HAL_GPIO_EXTI_Callback+0x52>
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_GPIO_EXTI_Callback+0x90>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <HAL_GPIO_EXTI_Callback+0x52>
			oldstate = state;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_GPIO_EXTI_Callback+0x90>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a16      	ldr	r2, [pc, #88]	; (8001510 <HAL_GPIO_EXTI_Callback+0x9c>)
 80014b8:	6013      	str	r3, [r2, #0]
			state = 4;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_GPIO_EXTI_Callback+0x90>)
 80014bc:	2204      	movs	r2, #4
 80014be:	601a      	str	r2, [r3, #0]
			disableAllMotors();
 80014c0:	f7ff f98a 	bl	80007d8 <_Z16disableAllMotorsv>
}
 80014c4:	e019      	b.n	80014fa <HAL_GPIO_EXTI_Callback+0x86>
			state = oldstate;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_GPIO_EXTI_Callback+0x9c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_GPIO_EXTI_Callback+0x90>)
 80014cc:	6013      	str	r3, [r2, #0]
			enableAllMotors();
 80014ce:	f7ff f95b 	bl	8000788 <_Z15enableAllMotorsv>
}
 80014d2:	e012      	b.n	80014fa <HAL_GPIO_EXTI_Callback+0x86>
	else if (GPIO_Pin == GPIO_PIN_12){
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014da:	d10e      	bne.n	80014fa <HAL_GPIO_EXTI_Callback+0x86>
		if (state ==1){
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_GPIO_EXTI_Callback+0x90>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d103      	bne.n	80014ec <HAL_GPIO_EXTI_Callback+0x78>
			state = 3;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <HAL_GPIO_EXTI_Callback+0x90>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	601a      	str	r2, [r3, #0]
}
 80014ea:	e006      	b.n	80014fa <HAL_GPIO_EXTI_Callback+0x86>
		else if (state == 3){
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_GPIO_EXTI_Callback+0x90>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d102      	bne.n	80014fa <HAL_GPIO_EXTI_Callback+0x86>
			state = 0;
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GPIO_EXTI_Callback+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200002d4 	.word	0x200002d4
 8001508:	2000033c 	.word	0x2000033c
 800150c:	20000290 	.word	0x20000290
 8001510:	200002d8 	.word	0x200002d8

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800151c:	e7fe      	b.n	800151c <Error_Handler+0x8>

0800151e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @param __rhs  C string.
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f006 fad9 	bl	8007ae2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	bf0c      	ite	eq
 8001536:	2301      	moveq	r3, #1
 8001538:	2300      	movne	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_Z41__static_initialization_and_destruction_0ii>:
    {
    }
  /* USER CODE END Error_Handler_Debug */
}
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af02      	add	r7, sp, #8
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d136      	bne.n	80015c2 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155a:	4293      	cmp	r3, r2
 800155c:	d131      	bne.n	80015c2 <_Z41__static_initialization_and_destruction_0ii+0x7e>
motor_driver driver1 = motor_driver(&htim5, TIM_CHANNEL_3, TIM_CHANNEL_4, 0);
 800155e:	2300      	movs	r3, #0
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	230c      	movs	r3, #12
 8001564:	2208      	movs	r2, #8
 8001566:	4919      	ldr	r1, [pc, #100]	; (80015cc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001568:	4819      	ldr	r0, [pc, #100]	; (80015d0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800156a:	f000 f84f 	bl	800160c <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>
motor_driver driver2 = motor_driver(&htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, 0);
 800156e:	2300      	movs	r3, #0
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2304      	movs	r3, #4
 8001574:	2200      	movs	r2, #0
 8001576:	4917      	ldr	r1, [pc, #92]	; (80015d4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001578:	4817      	ldr	r0, [pc, #92]	; (80015d8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800157a:	f000 f847 	bl	800160c <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>
motor_driver driver3 = motor_driver(&htim3, TIM_CHANNEL_3, TIM_CHANNEL_4, 0);
 800157e:	2300      	movs	r3, #0
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	230c      	movs	r3, #12
 8001584:	2208      	movs	r2, #8
 8001586:	4913      	ldr	r1, [pc, #76]	; (80015d4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001588:	4814      	ldr	r0, [pc, #80]	; (80015dc <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800158a:	f000 f83f 	bl	800160c <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>
motor_driver driver4 = motor_driver(&htim4, TIM_CHANNEL_1, TIM_CHANNEL_2, 0);
 800158e:	2300      	movs	r3, #0
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2304      	movs	r3, #4
 8001594:	2200      	movs	r2, #0
 8001596:	4912      	ldr	r1, [pc, #72]	; (80015e0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001598:	4812      	ldr	r0, [pc, #72]	; (80015e4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800159a:	f000 f837 	bl	800160c <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>
motor_driver driver5 = motor_driver(&htim4, TIM_CHANNEL_3, TIM_CHANNEL_4, 0);
 800159e:	2300      	movs	r3, #0
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	230c      	movs	r3, #12
 80015a4:	2208      	movs	r2, #8
 80015a6:	490e      	ldr	r1, [pc, #56]	; (80015e0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80015a8:	480f      	ldr	r0, [pc, #60]	; (80015e8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80015aa:	f000 f82f 	bl	800160c <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>
servo_driver servo1 = servo_driver(&htim1, TIM_CHANNEL_1);
 80015ae:	2200      	movs	r2, #0
 80015b0:	490e      	ldr	r1, [pc, #56]	; (80015ec <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80015b2:	480f      	ldr	r0, [pc, #60]	; (80015f0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80015b4:	f000 f920 	bl	80017f8 <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>
servo_driver servo2 = servo_driver(&htim2, TIM_CHANNEL_1);
 80015b8:	2200      	movs	r2, #0
 80015ba:	490e      	ldr	r1, [pc, #56]	; (80015f4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80015bc:	480e      	ldr	r0, [pc, #56]	; (80015f8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80015be:	f000 f91b 	bl	80017f8 <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000248 	.word	0x20000248
 80015d0:	200002dc 	.word	0x200002dc
 80015d4:	200001b8 	.word	0x200001b8
 80015d8:	200002ec 	.word	0x200002ec
 80015dc:	200002fc 	.word	0x200002fc
 80015e0:	20000200 	.word	0x20000200
 80015e4:	2000030c 	.word	0x2000030c
 80015e8:	2000031c 	.word	0x2000031c
 80015ec:	20000128 	.word	0x20000128
 80015f0:	2000032c 	.word	0x2000032c
 80015f4:	20000170 	.word	0x20000170
 80015f8:	20000334 	.word	0x20000334

080015fc <_GLOBAL__sub_I_hadc1>:
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
 8001600:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff ff9d 	bl	8001544 <_Z41__static_initialization_and_destruction_0ii>
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>:
 *      Author: Ryan
 */

#include "motor_driver.h"

motor_driver::motor_driver(TIM_HandleTypeDef* _htim,
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
                           uint32_t _ch2,
                           uint8_t _direction)
    :htim(_htim),
     ch1(_ch1),
     ch2(_ch2),
     direction(_direction)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	7e3a      	ldrb	r2, [r7, #24]
 8001630:	731a      	strb	r2, [r3, #12]
{

}
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4618      	mov	r0, r3
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_ZN12motor_driver13enable_driverEv>:

void motor_driver::enable_driver() {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, ch1);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4619      	mov	r1, r3
 8001652:	4610      	mov	r0, r2
 8001654:	f004 fc56 	bl	8005f04 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, ch2);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4619      	mov	r1, r3
 8001662:	4610      	mov	r0, r2
 8001664:	f004 fc4e 	bl	8005f04 <HAL_TIM_PWM_Start>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <_ZN12motor_driver14disable_driverEv>:

void motor_driver::disable_driver() {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop(htim, ch1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f004 fcee 	bl	8006064 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(htim, ch2);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4619      	mov	r1, r3
 8001692:	4610      	mov	r0, r2
 8001694:	f004 fce6 	bl	8006064 <HAL_TIM_PWM_Stop>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZN12motor_driver14set_duty_cycleEt>:

void motor_driver::set_duty_cycle(uint16_t dc) {
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
    // forward
    if(direction == 0) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7b1b      	ldrb	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d146      	bne.n	8001742 <_ZN12motor_driver14set_duty_cycleEt+0xa2>
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <_ZN12motor_driver14set_duty_cycleEt+0x28>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	635a      	str	r2, [r3, #52]	; 0x34
 80016c6:	e018      	b.n	80016fa <_ZN12motor_driver14set_duty_cycleEt+0x5a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d105      	bne.n	80016dc <_ZN12motor_driver14set_duty_cycleEt+0x3c>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
 80016da:	e00e      	b.n	80016fa <_ZN12motor_driver14set_duty_cycleEt+0x5a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d105      	bne.n	80016f0 <_ZN12motor_driver14set_duty_cycleEt+0x50>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ee:	e004      	b.n	80016fa <_ZN12motor_driver14set_duty_cycleEt+0x5a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d105      	bne.n	800170e <_ZN12motor_driver14set_duty_cycleEt+0x6e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2200      	movs	r2, #0
 800170a:	635a      	str	r2, [r3, #52]	; 0x34
    // reverse
    else {
        __HAL_TIM_SET_COMPARE(htim, ch1, 0);
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
    }
}
 800170c:	e05f      	b.n	80017ce <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b04      	cmp	r3, #4
 8001714:	d105      	bne.n	8001722 <_ZN12motor_driver14set_duty_cycleEt+0x82>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2200      	movs	r2, #0
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001720:	e055      	b.n	80017ce <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b08      	cmp	r3, #8
 8001728:	d105      	bne.n	8001736 <_ZN12motor_driver14set_duty_cycleEt+0x96>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001734:	e04b      	b.n	80017ce <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2200      	movs	r2, #0
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001740:	e045      	b.n	80017ce <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch1, 0);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d105      	bne.n	8001756 <_ZN12motor_driver14set_duty_cycleEt+0xb6>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2200      	movs	r2, #0
 8001752:	635a      	str	r2, [r3, #52]	; 0x34
 8001754:	e018      	b.n	8001788 <_ZN12motor_driver14set_duty_cycleEt+0xe8>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b04      	cmp	r3, #4
 800175c:	d105      	bne.n	800176a <_ZN12motor_driver14set_duty_cycleEt+0xca>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2200      	movs	r2, #0
 8001766:	639a      	str	r2, [r3, #56]	; 0x38
 8001768:	e00e      	b.n	8001788 <_ZN12motor_driver14set_duty_cycleEt+0xe8>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b08      	cmp	r3, #8
 8001770:	d105      	bne.n	800177e <_ZN12motor_driver14set_duty_cycleEt+0xde>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2200      	movs	r2, #0
 800177a:	63da      	str	r2, [r3, #60]	; 0x3c
 800177c:	e004      	b.n	8001788 <_ZN12motor_driver14set_duty_cycleEt+0xe8>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <_ZN12motor_driver14set_duty_cycleEt+0xfc>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	635a      	str	r2, [r3, #52]	; 0x34
}
 800179a:	e018      	b.n	80017ce <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d105      	bne.n	80017b0 <_ZN12motor_driver14set_duty_cycleEt+0x110>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017ae:	e00e      	b.n	80017ce <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d105      	bne.n	80017c4 <_ZN12motor_driver14set_duty_cycleEt+0x124>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	887a      	ldrh	r2, [r7, #2]
 80017c0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80017c2:	e004      	b.n	80017ce <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_ZN12motor_driver13set_directionEh>:

void motor_driver::set_direction(uint8_t direction) {
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	70fb      	strb	r3, [r7, #3]
    this->direction = direction;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	731a      	strb	r2, [r3, #12]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>:
 *      Author: Ryan
 */

#include "servo_driver.h"

servo_driver::servo_driver(TIM_HandleTypeDef* _htim,
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
                           uint32_t _ch1)
    :htim(_htim),
     ch1(_ch1)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	605a      	str	r2, [r3, #4]
{

}
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_ZN12servo_driver13enable_driverEv>:

void servo_driver::enable_driver() {
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, ch1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4619      	mov	r1, r3
 8001830:	4610      	mov	r0, r2
 8001832:	f004 fb67 	bl	8005f04 <HAL_TIM_PWM_Start>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_ZN12servo_driver14disable_driverEv>:

void servo_driver::disable_driver() {
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop(htim, ch1);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4619      	mov	r1, r3
 8001850:	4610      	mov	r0, r2
 8001852:	f004 fc07 	bl	8006064 <HAL_TIM_PWM_Stop>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_ZN12servo_driver14set_duty_cycleEt>:

void servo_driver::set_duty_cycle(uint16_t dc) {
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	807b      	strh	r3, [r7, #2]
    // forward
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d105      	bne.n	800187e <_ZN12servo_driver14set_duty_cycleEt+0x20>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	887a      	ldrh	r2, [r7, #2]
 800187a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800187c:	e018      	b.n	80018b0 <_ZN12servo_driver14set_duty_cycleEt+0x52>
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b04      	cmp	r3, #4
 8001884:	d105      	bne.n	8001892 <_ZN12servo_driver14set_duty_cycleEt+0x34>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	887a      	ldrh	r2, [r7, #2]
 800188e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001890:	e00e      	b.n	80018b0 <_ZN12servo_driver14set_duty_cycleEt+0x52>
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b08      	cmp	r3, #8
 8001898:	d105      	bne.n	80018a6 <_ZN12servo_driver14set_duty_cycleEt+0x48>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	887a      	ldrh	r2, [r7, #2]
 80018a2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80018a4:	e004      	b.n	80018b0 <_ZN12servo_driver14set_duty_cycleEt+0x52>
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	887a      	ldrh	r2, [r7, #2]
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_MspInit+0x4c>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a0f      	ldr	r2, [pc, #60]	; (8001908 <HAL_MspInit+0x4c>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_MspInit+0x4c>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_MspInit+0x4c>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <HAL_MspInit+0x4c>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_MspInit+0x4c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_ADC_MspInit+0x8c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d12f      	bne.n	800198e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_ADC_MspInit+0x90>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a19      	ldr	r2, [pc, #100]	; (800199c <HAL_ADC_MspInit+0x90>)
 8001938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_ADC_MspInit+0x90>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_ADC_MspInit+0x90>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <HAL_ADC_MspInit+0x90>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_ADC_MspInit+0x90>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001966:	2320      	movs	r3, #32
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196a:	2303      	movs	r3, #3
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4809      	ldr	r0, [pc, #36]	; (80019a0 <HAL_ADC_MspInit+0x94>)
 800197a:	f001 fa63 	bl	8002e44 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	2012      	movs	r0, #18
 8001984:	f001 f987 	bl	8002c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001988:	2012      	movs	r0, #18
 800198a:	f001 f9a0 	bl	8002cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40012000 	.word	0x40012000
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a25      	ldr	r2, [pc, #148]	; (8001a58 <HAL_I2C_MspInit+0xb4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d144      	bne.n	8001a50 <HAL_I2C_MspInit+0xac>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_I2C_MspInit+0xb8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a23      	ldr	r2, [pc, #140]	; (8001a5c <HAL_I2C_MspInit+0xb8>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <HAL_I2C_MspInit+0xb8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e8:	2312      	movs	r3, #18
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019f4:	2304      	movs	r3, #4
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4818      	ldr	r0, [pc, #96]	; (8001a60 <HAL_I2C_MspInit+0xbc>)
 8001a00:	f001 fa20 	bl	8002e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a04:	2308      	movs	r3, #8
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a08:	2312      	movs	r3, #18
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001a14:	2309      	movs	r3, #9
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4810      	ldr	r0, [pc, #64]	; (8001a60 <HAL_I2C_MspInit+0xbc>)
 8001a20:	f001 fa10 	bl	8002e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_I2C_MspInit+0xb8>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <HAL_I2C_MspInit+0xb8>)
 8001a2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a32:	6413      	str	r3, [r2, #64]	; 0x40
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_I2C_MspInit+0xb8>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2021      	movs	r0, #33	; 0x21
 8001a46:	f001 f926 	bl	8002c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001a4a:	2021      	movs	r0, #33	; 0x21
 8001a4c:	f001 f93f 	bl	8002cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	; 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40005800 	.word	0x40005800
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020400 	.word	0x40020400

08001a64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a29      	ldr	r2, [pc, #164]	; (8001b18 <HAL_TIM_PWM_MspInit+0xb4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10e      	bne.n	8001a94 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_TIM_PWM_MspInit+0xb8>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a27      	ldr	r2, [pc, #156]	; (8001b1c <HAL_TIM_PWM_MspInit+0xb8>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <HAL_TIM_PWM_MspInit+0xb8>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001a92:	e03a      	b.n	8001b0a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a21      	ldr	r2, [pc, #132]	; (8001b20 <HAL_TIM_PWM_MspInit+0xbc>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d10e      	bne.n	8001abc <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_TIM_PWM_MspInit+0xb8>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <HAL_TIM_PWM_MspInit+0xb8>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_TIM_PWM_MspInit+0xb8>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
}
 8001aba:	e026      	b.n	8001b0a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a18      	ldr	r2, [pc, #96]	; (8001b24 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d10e      	bne.n	8001ae4 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <HAL_TIM_PWM_MspInit+0xb8>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <HAL_TIM_PWM_MspInit+0xb8>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_TIM_PWM_MspInit+0xb8>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
}
 8001ae2:	e012      	b.n	8001b0a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM5)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_TIM_PWM_MspInit+0xc4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10d      	bne.n	8001b0a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_TIM_PWM_MspInit+0xb8>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <HAL_TIM_PWM_MspInit+0xb8>)
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_TIM_PWM_MspInit+0xb8>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
}
 8001b0a:	bf00      	nop
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40000400 	.word	0x40000400
 8001b24:	40000800 	.word	0x40000800
 8001b28:	40000c00 	.word	0x40000c00

08001b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3c:	d10d      	bne.n	8001b5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_TIM_Base_MspInit+0x3c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <HAL_TIM_Base_MspInit+0x3c>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_TIM_Base_MspInit+0x3c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08e      	sub	sp, #56	; 0x38
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6a      	ldr	r2, [pc, #424]	; (8001d34 <HAL_TIM_MspPostInit+0x1c8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d11f      	bne.n	8001bce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
 8001b92:	4b69      	ldr	r3, [pc, #420]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a68      	ldr	r2, [pc, #416]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b66      	ldr	r3, [pc, #408]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	623b      	str	r3, [r7, #32]
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	485d      	ldr	r0, [pc, #372]	; (8001d3c <HAL_TIM_MspPostInit+0x1d0>)
 8001bc8:	f001 f93c 	bl	8002e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001bcc:	e0ae      	b.n	8001d2c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd6:	d11f      	bne.n	8001c18 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4a55      	ldr	r2, [pc, #340]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6313      	str	r3, [r2, #48]	; 0x30
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c06:	2301      	movs	r3, #1
 8001c08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	484a      	ldr	r0, [pc, #296]	; (8001d3c <HAL_TIM_MspPostInit+0x1d0>)
 8001c12:	f001 f917 	bl	8002e44 <HAL_GPIO_Init>
}
 8001c16:	e089      	b.n	8001d2c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM3)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a48      	ldr	r2, [pc, #288]	; (8001d40 <HAL_TIM_MspPostInit+0x1d4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d13c      	bne.n	8001c9c <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a43      	ldr	r2, [pc, #268]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a3c      	ldr	r2, [pc, #240]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c5a:	23c0      	movs	r3, #192	; 0xc0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c72:	4619      	mov	r1, r3
 8001c74:	4831      	ldr	r0, [pc, #196]	; (8001d3c <HAL_TIM_MspPostInit+0x1d0>)
 8001c76:	f001 f8e5 	bl	8002e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4619      	mov	r1, r3
 8001c94:	482b      	ldr	r0, [pc, #172]	; (8001d44 <HAL_TIM_MspPostInit+0x1d8>)
 8001c96:	f001 f8d5 	bl	8002e44 <HAL_GPIO_Init>
}
 8001c9a:	e047      	b.n	8001d2c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <HAL_TIM_MspPostInit+0x1dc>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d11f      	bne.n	8001ce6 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a22      	ldr	r2, [pc, #136]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001cc2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4819      	ldr	r0, [pc, #100]	; (8001d44 <HAL_TIM_MspPostInit+0x1d8>)
 8001ce0:	f001 f8b0 	bl	8002e44 <HAL_GPIO_Init>
}
 8001ce4:	e022      	b.n	8001d2c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_TIM_MspPostInit+0x1e0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d11d      	bne.n	8001d2c <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_TIM_MspPostInit+0x1cc>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d0c:	230c      	movs	r3, #12
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d24:	4619      	mov	r1, r3
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <HAL_TIM_MspPostInit+0x1d0>)
 8001d28:	f001 f88c 	bl	8002e44 <HAL_GPIO_Init>
}
 8001d2c:	bf00      	nop
 8001d2e:	3738      	adds	r7, #56	; 0x38
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020000 	.word	0x40020000
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40000800 	.word	0x40000800
 8001d4c:	40000c00 	.word	0x40000c00

08001d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <HAL_UART_MspInit+0x94>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d134      	bne.n	8001ddc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_UART_MspInit+0x98>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_UART_MspInit+0x98>)
 8001d7c:	f043 0310 	orr.w	r3, r3, #16
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_UART_MspInit+0x98>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_UART_MspInit+0x98>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <HAL_UART_MspInit+0x98>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_UART_MspInit+0x98>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001daa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dbc:	2307      	movs	r3, #7
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4809      	ldr	r0, [pc, #36]	; (8001dec <HAL_UART_MspInit+0x9c>)
 8001dc8:	f001 f83c 	bl	8002e44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2025      	movs	r0, #37	; 0x25
 8001dd2:	f000 ff60 	bl	8002c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dd6:	2025      	movs	r0, #37	; 0x25
 8001dd8:	f000 ff79 	bl	8002cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	; 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40011000 	.word	0x40011000
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020000 	.word	0x40020000

08001df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <NMI_Handler+0x4>

08001df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <HardFault_Handler+0x4>

08001dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <MemManage_Handler+0x4>

08001e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <BusFault_Handler+0x4>

08001e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <UsageFault_Handler+0x4>

08001e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3c:	f000 f916 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e48:	2004      	movs	r0, #4
 8001e4a:	f001 f999 	bl	8003180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <ADC_IRQHandler+0x10>)
 8001e5a:	f000 face 	bl	80023fa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000008c 	.word	0x2000008c

08001e68 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <I2C2_EV_IRQHandler+0x10>)
 8001e6e:	f001 fd09 	bl	8003884 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200000d4 	.word	0x200000d4

08001e7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <USART1_IRQHandler+0x10>)
 8001e82:	f004 fee7 	bl	8006c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000290 	.word	0x20000290

08001e90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001e94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e98:	f001 f972 	bl	8003180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return 1;
 8001ea4:	2301      	movs	r3, #1
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_kill>:

int _kill(int pid, int sig)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eba:	f005 fe8d 	bl	8007bd8 <__errno>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2216      	movs	r2, #22
 8001ec2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_exit>:

void _exit (int status)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ffe7 	bl	8001eb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ee2:	e7fe      	b.n	8001ee2 <_exit+0x12>

08001ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <_sbrk+0x5c>)
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <_sbrk+0x60>)
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <_sbrk+0x64>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <_sbrk+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d207      	bcs.n	8001f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f14:	f005 fe60 	bl	8007bd8 <__errno>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e009      	b.n	8001f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <_sbrk+0x64>)
 8001f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20020000 	.word	0x20020000
 8001f44:	00000400 	.word	0x00000400
 8001f48:	200003b8 	.word	0x200003b8
 8001f4c:	200003d8 	.word	0x200003d8

08001f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <SystemInit+0x20>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <SystemInit+0x20>)
 8001f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fac <LoopFillZerobss+0x12>


/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f78:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f7a:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f90:	4c0b      	ldr	r4, [pc, #44]	; (8001fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f9e:	f7ff ffd7 	bl	8001f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f005 fe1f 	bl	8007be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa6:	f7fe fc3f 	bl	8000828 <main>
  bx  lr    
 8001faa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001fb8:	08008940 	.word	0x08008940
  ldr r2, =_sbss
 8001fbc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001fc0:	200003d4 	.word	0x200003d4

08001fc4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <DMA1_Stream0_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <HAL_Init+0x40>)
 8001fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_Init+0x40>)
 8001fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_Init+0x40>)
 8001fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 fe45 	bl	8002c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff6:	200f      	movs	r0, #15
 8001ff8:	f000 f808 	bl	800200c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffc:	f7ff fc5e 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00

0800200c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_InitTick+0x54>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x58>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002022:	fbb3 f3f1 	udiv	r3, r3, r1
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fe5d 	bl	8002cea <HAL_SYSTICK_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e00e      	b.n	8002058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d80a      	bhi.n	8002056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f000 fe25 	bl	8002c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800204c:	4a06      	ldr	r2, [pc, #24]	; (8002068 <HAL_InitTick+0x5c>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000000 	.word	0x20000000
 8002064:	20000008 	.word	0x20000008
 8002068:	20000004 	.word	0x20000004

0800206c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_IncTick+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_IncTick+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_IncTick+0x24>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000008 	.word	0x20000008
 8002090:	200003bc 	.word	0x200003bc

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	200003bc 	.word	0x200003bc

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff ffee 	bl	8002094 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d005      	beq.n	80020d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_Delay+0x44>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020d2:	bf00      	nop
 80020d4:	f7ff ffde 	bl	8002094 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d8f7      	bhi.n	80020d4 <HAL_Delay+0x28>
  {
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000008 	.word	0x20000008

080020f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e033      	b.n	8002172 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fbfa 	bl	800190c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b00      	cmp	r3, #0
 8002130:	d118      	bne.n	8002164 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800213a:	f023 0302 	bic.w	r3, r3, #2
 800213e:	f043 0202 	orr.w	r2, r3, #2
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fbc4 	bl	80028d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f023 0303 	bic.w	r3, r3, #3
 800215a:	f043 0201 	orr.w	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
 8002162:	e001      	b.n	8002168 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002170:	7bfb      	ldrb	r3, [r7, #15]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_ADC_Start+0x1a>
 8002192:	2302      	movs	r3, #2
 8002194:	e097      	b.n	80022c6 <HAL_ADC_Start+0x14a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d018      	beq.n	80021de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021bc:	4b45      	ldr	r3, [pc, #276]	; (80022d4 <HAL_ADC_Start+0x158>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a45      	ldr	r2, [pc, #276]	; (80022d8 <HAL_ADC_Start+0x15c>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	0c9a      	lsrs	r2, r3, #18
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021d0:	e002      	b.n	80021d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f9      	bne.n	80021d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d15f      	bne.n	80022ac <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002216:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222a:	d106      	bne.n	800223a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	f023 0206 	bic.w	r2, r3, #6
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
 8002238:	e002      	b.n	8002240 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_ADC_Start+0x160>)
 800224a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002254:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10f      	bne.n	8002282 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d129      	bne.n	80022c4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	e020      	b.n	80022c4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <HAL_ADC_Start+0x164>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d11b      	bne.n	80022c4 <HAL_ADC_Start+0x148>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d114      	bne.n	80022c4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	e00b      	b.n	80022c4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f043 0210 	orr.w	r2, r3, #16
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000000 	.word	0x20000000
 80022d8:	431bde83 	.word	0x431bde83
 80022dc:	40012300 	.word	0x40012300
 80022e0:	40012000 	.word	0x40012000

080022e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002300:	d113      	bne.n	800232a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800230c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002310:	d10b      	bne.n	800232a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f043 0220 	orr.w	r2, r3, #32
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e063      	b.n	80023f2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800232a:	f7ff feb3 	bl	8002094 <HAL_GetTick>
 800232e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002330:	e021      	b.n	8002376 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d01d      	beq.n	8002376 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_ADC_PollForConversion+0x6c>
 8002340:	f7ff fea8 	bl	8002094 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d212      	bcs.n	8002376 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b02      	cmp	r3, #2
 800235c:	d00b      	beq.n	8002376 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f043 0204 	orr.w	r2, r3, #4
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e03d      	b.n	80023f2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b02      	cmp	r3, #2
 8002382:	d1d6      	bne.n	8002332 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0212 	mvn.w	r2, #18
 800238c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d123      	bne.n	80023f0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d11f      	bne.n	80023f0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d006      	beq.n	80023cc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d111      	bne.n	80023f0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d049      	beq.n	80024c4 <HAL_ADC_IRQHandler+0xca>
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d046      	beq.n	80024c4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d12b      	bne.n	80024b4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002460:	2b00      	cmp	r3, #0
 8002462:	d127      	bne.n	80024b4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800247c:	2b00      	cmp	r3, #0
 800247e:	d119      	bne.n	80024b4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0220 	bic.w	r2, r2, #32
 800248e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f8bd 	bl	8002634 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f06f 0212 	mvn.w	r2, #18
 80024c2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d057      	beq.n	800258a <HAL_ADC_IRQHandler+0x190>
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d054      	beq.n	800258a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d139      	bne.n	800257a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800251e:	2b00      	cmp	r3, #0
 8002520:	d12b      	bne.n	800257a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800252c:	2b00      	cmp	r3, #0
 800252e:	d124      	bne.n	800257a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11d      	bne.n	800257a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	d119      	bne.n	800257a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002554:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d105      	bne.n	800257a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f043 0201 	orr.w	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 faa6 	bl	8002acc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 020c 	mvn.w	r2, #12
 8002588:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002598:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d017      	beq.n	80025d0 <HAL_ADC_IRQHandler+0x1d6>
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d014      	beq.n	80025d0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d10d      	bne.n	80025d0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f841 	bl	8002648 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f06f 0201 	mvn.w	r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025de:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d015      	beq.n	8002612 <HAL_ADC_IRQHandler+0x218>
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d012      	beq.n	8002612 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	f043 0202 	orr.w	r2, r3, #2
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0220 	mvn.w	r2, #32
 8002600:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f82a 	bl	800265c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0220 	mvn.w	r2, #32
 8002610:	601a      	str	r2, [r3, #0]
  }
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x1c>
 8002688:	2302      	movs	r3, #2
 800268a:	e113      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x244>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b09      	cmp	r3, #9
 800269a:	d925      	bls.n	80026e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68d9      	ldr	r1, [r3, #12]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	3b1e      	subs	r3, #30
 80026b2:	2207      	movs	r2, #7
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43da      	mvns	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	400a      	ands	r2, r1
 80026c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68d9      	ldr	r1, [r3, #12]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	4603      	mov	r3, r0
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4403      	add	r3, r0
 80026da:	3b1e      	subs	r3, #30
 80026dc:	409a      	lsls	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	e022      	b.n	800272e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6919      	ldr	r1, [r3, #16]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	2207      	movs	r2, #7
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	400a      	ands	r2, r1
 800270a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6919      	ldr	r1, [r3, #16]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	4618      	mov	r0, r3
 800271e:	4603      	mov	r3, r0
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4403      	add	r3, r0
 8002724:	409a      	lsls	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b06      	cmp	r3, #6
 8002734:	d824      	bhi.n	8002780 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	3b05      	subs	r3, #5
 8002748:	221f      	movs	r2, #31
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	400a      	ands	r2, r1
 8002756:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	4618      	mov	r0, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	3b05      	subs	r3, #5
 8002772:	fa00 f203 	lsl.w	r2, r0, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	635a      	str	r2, [r3, #52]	; 0x34
 800277e:	e04c      	b.n	800281a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b0c      	cmp	r3, #12
 8002786:	d824      	bhi.n	80027d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	3b23      	subs	r3, #35	; 0x23
 800279a:	221f      	movs	r2, #31
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43da      	mvns	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	400a      	ands	r2, r1
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	3b23      	subs	r3, #35	; 0x23
 80027c4:	fa00 f203 	lsl.w	r2, r0, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
 80027d0:	e023      	b.n	800281a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	3b41      	subs	r3, #65	; 0x41
 80027e4:	221f      	movs	r2, #31
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	400a      	ands	r2, r1
 80027f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4618      	mov	r0, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	3b41      	subs	r3, #65	; 0x41
 800280e:	fa00 f203 	lsl.w	r2, r0, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_ADC_ConfigChannel+0x250>)
 800281c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a28      	ldr	r2, [pc, #160]	; (80028c4 <HAL_ADC_ConfigChannel+0x254>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d10f      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1d8>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b12      	cmp	r3, #18
 800282e:	d10b      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1d      	ldr	r2, [pc, #116]	; (80028c4 <HAL_ADC_ConfigChannel+0x254>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d12b      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x23a>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_ADC_ConfigChannel+0x258>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d003      	beq.n	8002864 <HAL_ADC_ConfigChannel+0x1f4>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b11      	cmp	r3, #17
 8002862:	d122      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <HAL_ADC_ConfigChannel+0x258>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d111      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_ADC_ConfigChannel+0x25c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <HAL_ADC_ConfigChannel+0x260>)
 800288c:	fba2 2303 	umull	r2, r3, r2, r3
 8002890:	0c9a      	lsrs	r2, r3, #18
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800289c:	e002      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	3b01      	subs	r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f9      	bne.n	800289e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40012300 	.word	0x40012300
 80028c4:	40012000 	.word	0x40012000
 80028c8:	10000012 	.word	0x10000012
 80028cc:	20000000 	.word	0x20000000
 80028d0:	431bde83 	.word	0x431bde83

080028d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028dc:	4b79      	ldr	r3, [pc, #484]	; (8002ac4 <ADC_Init+0x1f0>)
 80028de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	021a      	lsls	r2, r3, #8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800292c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6899      	ldr	r1, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <ADC_Init+0x1f4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d022      	beq.n	80029b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800297a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6899      	ldr	r1, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800299c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6899      	ldr	r1, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	e00f      	b.n	80029d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0202 	bic.w	r2, r2, #2
 80029e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6899      	ldr	r1, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7e1b      	ldrb	r3, [r3, #24]
 80029ec:	005a      	lsls	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01b      	beq.n	8002a38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6859      	ldr	r1, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	035a      	lsls	r2, r3, #13
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	e007      	b.n	8002a48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	051a      	lsls	r2, r3, #20
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6899      	ldr	r1, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a8a:	025a      	lsls	r2, r3, #9
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	029a      	lsls	r2, r3, #10
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	609a      	str	r2, [r3, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40012300 	.word	0x40012300
 8002ac8:	0f000001 	.word	0x0f000001

08002acc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <__NVIC_SetPriorityGrouping+0x44>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002afc:	4013      	ands	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b12:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <__NVIC_SetPriorityGrouping+0x44>)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	60d3      	str	r3, [r2, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <__NVIC_GetPriorityGrouping+0x18>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	f003 0307 	and.w	r3, r3, #7
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	db0b      	blt.n	8002b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	f003 021f 	and.w	r2, r3, #31
 8002b5c:	4907      	ldr	r1, [pc, #28]	; (8002b7c <__NVIC_EnableIRQ+0x38>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	2001      	movs	r0, #1
 8002b66:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000e100 	.word	0xe000e100

08002b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	db0a      	blt.n	8002baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	490c      	ldr	r1, [pc, #48]	; (8002bcc <__NVIC_SetPriority+0x4c>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba8:	e00a      	b.n	8002bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4908      	ldr	r1, [pc, #32]	; (8002bd0 <__NVIC_SetPriority+0x50>)
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	3b04      	subs	r3, #4
 8002bb8:	0112      	lsls	r2, r2, #4
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	761a      	strb	r2, [r3, #24]
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000e100 	.word	0xe000e100
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	; 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f1c3 0307 	rsb	r3, r3, #7
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	bf28      	it	cs
 8002bf2:	2304      	movcs	r3, #4
 8002bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d902      	bls.n	8002c04 <NVIC_EncodePriority+0x30>
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3b03      	subs	r3, #3
 8002c02:	e000      	b.n	8002c06 <NVIC_EncodePriority+0x32>
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	401a      	ands	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	43d9      	mvns	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	4313      	orrs	r3, r2
         );
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3724      	adds	r7, #36	; 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c4c:	d301      	bcc.n	8002c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00f      	b.n	8002c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c52:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <SysTick_Config+0x40>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c5a:	210f      	movs	r1, #15
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c60:	f7ff ff8e 	bl	8002b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <SysTick_Config+0x40>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c6a:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <SysTick_Config+0x40>)
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	e000e010 	.word	0xe000e010

08002c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ff29 	bl	8002ae0 <__NVIC_SetPriorityGrouping>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b086      	sub	sp, #24
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca8:	f7ff ff3e 	bl	8002b28 <__NVIC_GetPriorityGrouping>
 8002cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	6978      	ldr	r0, [r7, #20]
 8002cb4:	f7ff ff8e 	bl	8002bd4 <NVIC_EncodePriority>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff5d 	bl	8002b80 <__NVIC_SetPriority>
}
 8002cc6:	bf00      	nop
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff31 	bl	8002b44 <__NVIC_EnableIRQ>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ffa2 	bl	8002c3c <SysTick_Config>
 8002cf8:	4603      	mov	r3, r0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d10:	f7ff f9c0 	bl	8002094 <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d008      	beq.n	8002d34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e052      	b.n	8002dda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0216 	bic.w	r2, r2, #22
 8002d42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d103      	bne.n	8002d64 <HAL_DMA_Abort+0x62>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d007      	beq.n	8002d74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0208 	bic.w	r2, r2, #8
 8002d72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d84:	e013      	b.n	8002dae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d86:	f7ff f985 	bl	8002094 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d90c      	bls.n	8002dae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e015      	b.n	8002dda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e4      	bne.n	8002d86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	223f      	movs	r2, #63	; 0x3f
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d004      	beq.n	8002e00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e00c      	b.n	8002e1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2205      	movs	r2, #5
 8002e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e34:	b2db      	uxtb	r3, r3
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b089      	sub	sp, #36	; 0x24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	e159      	b.n	8003114 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e60:	2201      	movs	r2, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	f040 8148 	bne.w	800310e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d005      	beq.n	8002e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d130      	bne.n	8002ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ecc:	2201      	movs	r2, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 0201 	and.w	r2, r3, #1
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d017      	beq.n	8002f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d123      	bne.n	8002f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	08da      	lsrs	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3208      	adds	r2, #8
 8002f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	220f      	movs	r2, #15
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	08da      	lsrs	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3208      	adds	r2, #8
 8002f82:	69b9      	ldr	r1, [r7, #24]
 8002f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	2203      	movs	r2, #3
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0203 	and.w	r2, r3, #3
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80a2 	beq.w	800310e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	4b57      	ldr	r3, [pc, #348]	; (800312c <HAL_GPIO_Init+0x2e8>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	4a56      	ldr	r2, [pc, #344]	; (800312c <HAL_GPIO_Init+0x2e8>)
 8002fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fda:	4b54      	ldr	r3, [pc, #336]	; (800312c <HAL_GPIO_Init+0x2e8>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fe6:	4a52      	ldr	r2, [pc, #328]	; (8003130 <HAL_GPIO_Init+0x2ec>)
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	089b      	lsrs	r3, r3, #2
 8002fec:	3302      	adds	r3, #2
 8002fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	220f      	movs	r2, #15
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a49      	ldr	r2, [pc, #292]	; (8003134 <HAL_GPIO_Init+0x2f0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d019      	beq.n	8003046 <HAL_GPIO_Init+0x202>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a48      	ldr	r2, [pc, #288]	; (8003138 <HAL_GPIO_Init+0x2f4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_GPIO_Init+0x1fe>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a47      	ldr	r2, [pc, #284]	; (800313c <HAL_GPIO_Init+0x2f8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00d      	beq.n	800303e <HAL_GPIO_Init+0x1fa>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a46      	ldr	r2, [pc, #280]	; (8003140 <HAL_GPIO_Init+0x2fc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <HAL_GPIO_Init+0x1f6>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a45      	ldr	r2, [pc, #276]	; (8003144 <HAL_GPIO_Init+0x300>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d101      	bne.n	8003036 <HAL_GPIO_Init+0x1f2>
 8003032:	2304      	movs	r3, #4
 8003034:	e008      	b.n	8003048 <HAL_GPIO_Init+0x204>
 8003036:	2307      	movs	r3, #7
 8003038:	e006      	b.n	8003048 <HAL_GPIO_Init+0x204>
 800303a:	2303      	movs	r3, #3
 800303c:	e004      	b.n	8003048 <HAL_GPIO_Init+0x204>
 800303e:	2302      	movs	r3, #2
 8003040:	e002      	b.n	8003048 <HAL_GPIO_Init+0x204>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_GPIO_Init+0x204>
 8003046:	2300      	movs	r3, #0
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	f002 0203 	and.w	r2, r2, #3
 800304e:	0092      	lsls	r2, r2, #2
 8003050:	4093      	lsls	r3, r2
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003058:	4935      	ldr	r1, [pc, #212]	; (8003130 <HAL_GPIO_Init+0x2ec>)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	3302      	adds	r3, #2
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003066:	4b38      	ldr	r3, [pc, #224]	; (8003148 <HAL_GPIO_Init+0x304>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308a:	4a2f      	ldr	r2, [pc, #188]	; (8003148 <HAL_GPIO_Init+0x304>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003090:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <HAL_GPIO_Init+0x304>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b4:	4a24      	ldr	r2, [pc, #144]	; (8003148 <HAL_GPIO_Init+0x304>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ba:	4b23      	ldr	r3, [pc, #140]	; (8003148 <HAL_GPIO_Init+0x304>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030de:	4a1a      	ldr	r2, [pc, #104]	; (8003148 <HAL_GPIO_Init+0x304>)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e4:	4b18      	ldr	r3, [pc, #96]	; (8003148 <HAL_GPIO_Init+0x304>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003108:	4a0f      	ldr	r2, [pc, #60]	; (8003148 <HAL_GPIO_Init+0x304>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3301      	adds	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b0f      	cmp	r3, #15
 8003118:	f67f aea2 	bls.w	8002e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	40013800 	.word	0x40013800
 8003134:	40020000 	.word	0x40020000
 8003138:	40020400 	.word	0x40020400
 800313c:	40020800 	.word	0x40020800
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40021000 	.word	0x40021000
 8003148:	40013c00 	.word	0x40013c00

0800314c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	807b      	strh	r3, [r7, #2]
 8003158:	4613      	mov	r3, r2
 800315a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800315c:	787b      	ldrb	r3, [r7, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003168:	e003      	b.n	8003172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800316a:	887b      	ldrh	r3, [r7, #2]
 800316c:	041a      	lsls	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	619a      	str	r2, [r3, #24]
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800318a:	4b08      	ldr	r3, [pc, #32]	; (80031ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d006      	beq.n	80031a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003196:	4a05      	ldr	r2, [pc, #20]	; (80031ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe f968 	bl	8001474 <HAL_GPIO_EXTI_Callback>
  }
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40013c00 	.word	0x40013c00

080031b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e12b      	b.n	800341a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fe fbe4 	bl	80019a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2224      	movs	r2, #36	; 0x24
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003202:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003212:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003214:	f002 fdb0 	bl	8005d78 <HAL_RCC_GetPCLK1Freq>
 8003218:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4a81      	ldr	r2, [pc, #516]	; (8003424 <HAL_I2C_Init+0x274>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d807      	bhi.n	8003234 <HAL_I2C_Init+0x84>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4a80      	ldr	r2, [pc, #512]	; (8003428 <HAL_I2C_Init+0x278>)
 8003228:	4293      	cmp	r3, r2
 800322a:	bf94      	ite	ls
 800322c:	2301      	movls	r3, #1
 800322e:	2300      	movhi	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e006      	b.n	8003242 <HAL_I2C_Init+0x92>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a7d      	ldr	r2, [pc, #500]	; (800342c <HAL_I2C_Init+0x27c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	bf94      	ite	ls
 800323c:	2301      	movls	r3, #1
 800323e:	2300      	movhi	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0e7      	b.n	800341a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a78      	ldr	r2, [pc, #480]	; (8003430 <HAL_I2C_Init+0x280>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	0c9b      	lsrs	r3, r3, #18
 8003254:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a6a      	ldr	r2, [pc, #424]	; (8003424 <HAL_I2C_Init+0x274>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d802      	bhi.n	8003284 <HAL_I2C_Init+0xd4>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	3301      	adds	r3, #1
 8003282:	e009      	b.n	8003298 <HAL_I2C_Init+0xe8>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	4a69      	ldr	r2, [pc, #420]	; (8003434 <HAL_I2C_Init+0x284>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	3301      	adds	r3, #1
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	430b      	orrs	r3, r1
 800329e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	495c      	ldr	r1, [pc, #368]	; (8003424 <HAL_I2C_Init+0x274>)
 80032b4:	428b      	cmp	r3, r1
 80032b6:	d819      	bhi.n	80032ec <HAL_I2C_Init+0x13c>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e59      	subs	r1, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c6:	1c59      	adds	r1, r3, #1
 80032c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032cc:	400b      	ands	r3, r1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_I2C_Init+0x138>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1e59      	subs	r1, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e0:	3301      	adds	r3, #1
 80032e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e6:	e051      	b.n	800338c <HAL_I2C_Init+0x1dc>
 80032e8:	2304      	movs	r3, #4
 80032ea:	e04f      	b.n	800338c <HAL_I2C_Init+0x1dc>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d111      	bne.n	8003318 <HAL_I2C_Init+0x168>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1e58      	subs	r0, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	440b      	add	r3, r1
 8003302:	fbb0 f3f3 	udiv	r3, r0, r3
 8003306:	3301      	adds	r3, #1
 8003308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e012      	b.n	800333e <HAL_I2C_Init+0x18e>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1e58      	subs	r0, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	0099      	lsls	r1, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	fbb0 f3f3 	udiv	r3, r0, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Init+0x196>
 8003342:	2301      	movs	r3, #1
 8003344:	e022      	b.n	800338c <HAL_I2C_Init+0x1dc>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10e      	bne.n	800336c <HAL_I2C_Init+0x1bc>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1e58      	subs	r0, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6859      	ldr	r1, [r3, #4]
 8003356:	460b      	mov	r3, r1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	440b      	add	r3, r1
 800335c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003360:	3301      	adds	r3, #1
 8003362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336a:	e00f      	b.n	800338c <HAL_I2C_Init+0x1dc>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e58      	subs	r0, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	0099      	lsls	r1, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003382:	3301      	adds	r3, #1
 8003384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	6809      	ldr	r1, [r1, #0]
 8003390:	4313      	orrs	r3, r2
 8003392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6911      	ldr	r1, [r2, #16]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68d2      	ldr	r2, [r2, #12]
 80033c6:	4311      	orrs	r1, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	000186a0 	.word	0x000186a0
 8003428:	001e847f 	.word	0x001e847f
 800342c:	003d08ff 	.word	0x003d08ff
 8003430:	431bde83 	.word	0x431bde83
 8003434:	10624dd3 	.word	0x10624dd3

08003438 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08c      	sub	sp, #48	; 0x30
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	4608      	mov	r0, r1
 8003442:	4611      	mov	r1, r2
 8003444:	461a      	mov	r2, r3
 8003446:	4603      	mov	r3, r0
 8003448:	817b      	strh	r3, [r7, #10]
 800344a:	460b      	mov	r3, r1
 800344c:	813b      	strh	r3, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003452:	f7fe fe1f 	bl	8002094 <HAL_GetTick>
 8003456:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b20      	cmp	r3, #32
 8003462:	f040 8208 	bne.w	8003876 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2319      	movs	r3, #25
 800346c:	2201      	movs	r2, #1
 800346e:	497b      	ldr	r1, [pc, #492]	; (800365c <HAL_I2C_Mem_Read+0x224>)
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f001 fe67 	bl	8005144 <I2C_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
 800347e:	e1fb      	b.n	8003878 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_I2C_Mem_Read+0x56>
 800348a:	2302      	movs	r3, #2
 800348c:	e1f4      	b.n	8003878 <HAL_I2C_Mem_Read+0x440>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d007      	beq.n	80034b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2222      	movs	r2, #34	; 0x22
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2240      	movs	r2, #64	; 0x40
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80034e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a5b      	ldr	r2, [pc, #364]	; (8003660 <HAL_I2C_Mem_Read+0x228>)
 80034f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034f6:	88f8      	ldrh	r0, [r7, #6]
 80034f8:	893a      	ldrh	r2, [r7, #8]
 80034fa:	8979      	ldrh	r1, [r7, #10]
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	4603      	mov	r3, r0
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f001 fc8c 	bl	8004e24 <I2C_RequestMemoryRead>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e1b0      	b.n	8003878 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	d113      	bne.n	8003546 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	623b      	str	r3, [r7, #32]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	623b      	str	r3, [r7, #32]
 8003532:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e184      	b.n	8003850 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	2b01      	cmp	r3, #1
 800354c:	d11b      	bne.n	8003586 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e164      	b.n	8003850 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	2b02      	cmp	r3, #2
 800358c:	d11b      	bne.n	80035c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	e144      	b.n	8003850 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035dc:	e138      	b.n	8003850 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	f200 80f1 	bhi.w	80037ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d123      	bne.n	8003638 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f001 feef 	bl	80053d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e139      	b.n	8003878 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003636:	e10b      	b.n	8003850 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363c:	2b02      	cmp	r3, #2
 800363e:	d14e      	bne.n	80036de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	2200      	movs	r2, #0
 8003648:	4906      	ldr	r1, [pc, #24]	; (8003664 <HAL_I2C_Mem_Read+0x22c>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f001 fd7a 	bl	8005144 <I2C_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e10e      	b.n	8003878 <HAL_I2C_Mem_Read+0x440>
 800365a:	bf00      	nop
 800365c:	00100002 	.word	0x00100002
 8003660:	ffff0000 	.word	0xffff0000
 8003664:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036dc:	e0b8      	b.n	8003850 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	2200      	movs	r2, #0
 80036e6:	4966      	ldr	r1, [pc, #408]	; (8003880 <HAL_I2C_Mem_Read+0x448>)
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f001 fd2b 	bl	8005144 <I2C_WaitOnFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0bf      	b.n	8003878 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	2200      	movs	r2, #0
 8003742:	494f      	ldr	r1, [pc, #316]	; (8003880 <HAL_I2C_Mem_Read+0x448>)
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f001 fcfd 	bl	8005144 <I2C_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e091      	b.n	8003878 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003762:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037c8:	e042      	b.n	8003850 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f001 fe02 	bl	80053d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e04c      	b.n	8003878 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b04      	cmp	r3, #4
 800381c:	d118      	bne.n	8003850 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003854:	2b00      	cmp	r3, #0
 8003856:	f47f aec2 	bne.w	80035de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	e000      	b.n	8003878 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003876:	2302      	movs	r3, #2
  }
}
 8003878:	4618      	mov	r0, r3
 800387a:	3728      	adds	r7, #40	; 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	00010004 	.word	0x00010004

08003884 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d003      	beq.n	80038bc <HAL_I2C_EV_IRQHandler+0x38>
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	f040 80c1 	bne.w	8003a3e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10d      	bne.n	80038f2 <HAL_I2C_EV_IRQHandler+0x6e>
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80038dc:	d003      	beq.n	80038e6 <HAL_I2C_EV_IRQHandler+0x62>
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80038e4:	d101      	bne.n	80038ea <HAL_I2C_EV_IRQHandler+0x66>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <HAL_I2C_EV_IRQHandler+0x68>
 80038ea:	2300      	movs	r3, #0
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	f000 8132 	beq.w	8003b56 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00c      	beq.n	8003916 <HAL_I2C_EV_IRQHandler+0x92>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	0a5b      	lsrs	r3, r3, #9
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d006      	beq.n	8003916 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f001 fdea 	bl	80054e2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fcdc 	bl	80042cc <I2C_Master_SB>
 8003914:	e092      	b.n	8003a3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	08db      	lsrs	r3, r3, #3
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_I2C_EV_IRQHandler+0xb2>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	0a5b      	lsrs	r3, r3, #9
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fd52 	bl	80043d8 <I2C_Master_ADD10>
 8003934:	e082      	b.n	8003a3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_I2C_EV_IRQHandler+0xd2>
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	0a5b      	lsrs	r3, r3, #9
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fd6c 	bl	800442c <I2C_Master_ADDR>
 8003954:	e072      	b.n	8003a3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d03b      	beq.n	80039da <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800396c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003970:	f000 80f3 	beq.w	8003b5a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	09db      	lsrs	r3, r3, #7
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00f      	beq.n	80039a0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	0a9b      	lsrs	r3, r3, #10
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <HAL_I2C_EV_IRQHandler+0x11c>
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d103      	bne.n	80039a0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f94c 	bl	8003c36 <I2C_MasterTransmit_TXE>
 800399e:	e04d      	b.n	8003a3c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80d6 	beq.w	8003b5a <HAL_I2C_EV_IRQHandler+0x2d6>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	0a5b      	lsrs	r3, r3, #9
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80cf 	beq.w	8003b5a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80039bc:	7bbb      	ldrb	r3, [r7, #14]
 80039be:	2b21      	cmp	r3, #33	; 0x21
 80039c0:	d103      	bne.n	80039ca <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f9d3 	bl	8003d6e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c8:	e0c7      	b.n	8003b5a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	f040 80c4 	bne.w	8003b5a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa41 	bl	8003e5a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039d8:	e0bf      	b.n	8003b5a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e8:	f000 80b7 	beq.w	8003b5a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	099b      	lsrs	r3, r3, #6
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00f      	beq.n	8003a18 <HAL_I2C_EV_IRQHandler+0x194>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	0a9b      	lsrs	r3, r3, #10
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d009      	beq.n	8003a18 <HAL_I2C_EV_IRQHandler+0x194>
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	089b      	lsrs	r3, r3, #2
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d103      	bne.n	8003a18 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fab6 	bl	8003f82 <I2C_MasterReceive_RXNE>
 8003a16:	e011      	b.n	8003a3c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 809a 	beq.w	8003b5a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	0a5b      	lsrs	r3, r3, #9
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8093 	beq.w	8003b5a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fb5f 	bl	80040f8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a3a:	e08e      	b.n	8003b5a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a3c:	e08d      	b.n	8003b5a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	e007      	b.n	8003a60 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d012      	beq.n	8003a92 <HAL_I2C_EV_IRQHandler+0x20e>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	0a5b      	lsrs	r3, r3, #9
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00c      	beq.n	8003a92 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a88:	69b9      	ldr	r1, [r7, #24]
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 ff1d 	bl	80048ca <I2C_Slave_ADDR>
 8003a90:	e066      	b.n	8003b60 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_I2C_EV_IRQHandler+0x22e>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	0a5b      	lsrs	r3, r3, #9
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 ff58 	bl	8004960 <I2C_Slave_STOPF>
 8003ab0:	e056      	b.n	8003b60 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ab2:	7bbb      	ldrb	r3, [r7, #14]
 8003ab4:	2b21      	cmp	r3, #33	; 0x21
 8003ab6:	d002      	beq.n	8003abe <HAL_I2C_EV_IRQHandler+0x23a>
 8003ab8:	7bbb      	ldrb	r3, [r7, #14]
 8003aba:	2b29      	cmp	r3, #41	; 0x29
 8003abc:	d125      	bne.n	8003b0a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	09db      	lsrs	r3, r3, #7
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00f      	beq.n	8003aea <HAL_I2C_EV_IRQHandler+0x266>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	0a9b      	lsrs	r3, r3, #10
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_I2C_EV_IRQHandler+0x266>
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	089b      	lsrs	r3, r3, #2
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fe33 	bl	800474e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ae8:	e039      	b.n	8003b5e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	089b      	lsrs	r3, r3, #2
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d033      	beq.n	8003b5e <HAL_I2C_EV_IRQHandler+0x2da>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	0a5b      	lsrs	r3, r3, #9
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d02d      	beq.n	8003b5e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fe60 	bl	80047c8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b08:	e029      	b.n	8003b5e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	099b      	lsrs	r3, r3, #6
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00f      	beq.n	8003b36 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	0a9b      	lsrs	r3, r3, #10
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	089b      	lsrs	r3, r3, #2
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fe6b 	bl	800480a <I2C_SlaveReceive_RXNE>
 8003b34:	e014      	b.n	8003b60 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00e      	beq.n	8003b60 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	0a5b      	lsrs	r3, r3, #9
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fe99 	bl	8004886 <I2C_SlaveReceive_BTF>
 8003b54:	e004      	b.n	8003b60 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003b56:	bf00      	nop
 8003b58:	e002      	b.n	8003b60 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b5a:	bf00      	nop
 8003b5c:	e000      	b.n	8003b60 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b5e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	70fb      	strb	r3, [r7, #3]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c4c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d150      	bne.n	8003cfe <I2C_MasterTransmit_TXE+0xc8>
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	2b21      	cmp	r3, #33	; 0x21
 8003c60:	d14d      	bne.n	8003cfe <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d01d      	beq.n	8003ca4 <I2C_MasterTransmit_TXE+0x6e>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d01a      	beq.n	8003ca4 <I2C_MasterTransmit_TXE+0x6e>
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c74:	d016      	beq.n	8003ca4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c84:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2211      	movs	r2, #17
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ff62 	bl	8003b66 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ca2:	e060      	b.n	8003d66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cb2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d107      	bne.n	8003cee <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ff7d 	bl	8003be6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cec:	e03b      	b.n	8003d66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ff35 	bl	8003b66 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cfc:	e033      	b.n	8003d66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	2b21      	cmp	r3, #33	; 0x21
 8003d02:	d005      	beq.n	8003d10 <I2C_MasterTransmit_TXE+0xda>
 8003d04:	7bbb      	ldrb	r3, [r7, #14]
 8003d06:	2b40      	cmp	r3, #64	; 0x40
 8003d08:	d12d      	bne.n	8003d66 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	2b22      	cmp	r3, #34	; 0x22
 8003d0e:	d12a      	bne.n	8003d66 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d108      	bne.n	8003d2c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d28:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003d2a:	e01c      	b.n	8003d66 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b40      	cmp	r3, #64	; 0x40
 8003d36:	d103      	bne.n	8003d40 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f88e 	bl	8003e5a <I2C_MemoryTransmit_TXE_BTF>
}
 8003d3e:	e012      	b.n	8003d66 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d64:	e7ff      	b.n	8003d66 <I2C_MasterTransmit_TXE+0x130>
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b21      	cmp	r3, #33	; 0x21
 8003d86:	d164      	bne.n	8003e52 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d012      	beq.n	8003db8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003db6:	e04c      	b.n	8003e52 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d01d      	beq.n	8003dfa <I2C_MasterTransmit_BTF+0x8c>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d01a      	beq.n	8003dfa <I2C_MasterTransmit_BTF+0x8c>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dca:	d016      	beq.n	8003dfa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dda:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2211      	movs	r2, #17
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff feb7 	bl	8003b66 <HAL_I2C_MasterTxCpltCallback>
}
 8003df8:	e02b      	b.n	8003e52 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e08:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e18:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d107      	bne.n	8003e44 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff fed2 	bl	8003be6 <HAL_I2C_MemTxCpltCallback>
}
 8003e42:	e006      	b.n	8003e52 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fe8a 	bl	8003b66 <HAL_I2C_MasterTxCpltCallback>
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d11d      	bne.n	8003eae <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d10b      	bne.n	8003e92 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8a:	1c9a      	adds	r2, r3, #2
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003e90:	e073      	b.n	8003f7a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	121b      	asrs	r3, r3, #8
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003eac:	e065      	b.n	8003f7a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d10b      	bne.n	8003ece <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ecc:	e055      	b.n	8003f7a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d151      	bne.n	8003f7a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	2b22      	cmp	r3, #34	; 0x22
 8003eda:	d10d      	bne.n	8003ef8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eea:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ef6:	e040      	b.n	8003f7a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d015      	beq.n	8003f2e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	2b21      	cmp	r3, #33	; 0x21
 8003f06:	d112      	bne.n	8003f2e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f2c:	e025      	b.n	8003f7a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d120      	bne.n	8003f7a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	2b21      	cmp	r3, #33	; 0x21
 8003f3c:	d11d      	bne.n	8003f7a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f4c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff fe36 	bl	8003be6 <HAL_I2C_MemTxCpltCallback>
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b22      	cmp	r3, #34	; 0x22
 8003f94:	f040 80ac 	bne.w	80040f0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d921      	bls.n	8003fea <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	f040 808c 	bne.w	80040f0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003fe8:	e082      	b.n	80040f0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d075      	beq.n	80040de <I2C_MasterReceive_RXNE+0x15c>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d002      	beq.n	8003ffe <I2C_MasterReceive_RXNE+0x7c>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d16f      	bne.n	80040de <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f001 f9b8 	bl	8005374 <I2C_WaitOnSTOPRequestThroughIT>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d142      	bne.n	8004090 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004018:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004028:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b40      	cmp	r3, #64	; 0x40
 8004062:	d10a      	bne.n	800407a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff fdc1 	bl	8003bfa <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004078:	e03a      	b.n	80040f0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2212      	movs	r2, #18
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff fd76 	bl	8003b7a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800408e:	e02f      	b.n	80040f0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800409e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fd99 	bl	8003c0e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040dc:	e008      	b.n	80040f0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ec:	605a      	str	r2, [r3, #4]
}
 80040ee:	e7ff      	b.n	80040f0 <I2C_MasterReceive_RXNE+0x16e>
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b04      	cmp	r3, #4
 800410e:	d11b      	bne.n	8004148 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004146:	e0bd      	b.n	80042c4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b03      	cmp	r3, #3
 8004150:	d129      	bne.n	80041a6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004160:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d00a      	beq.n	800417e <I2C_MasterReceive_BTF+0x86>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d007      	beq.n	800417e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041a4:	e08e      	b.n	80042c4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d176      	bne.n	800429e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d002      	beq.n	80041bc <I2C_MasterReceive_BTF+0xc4>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d108      	bne.n	80041ce <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e019      	b.n	8004202 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d002      	beq.n	80041da <I2C_MasterReceive_BTF+0xe2>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d108      	bne.n	80041ec <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e00a      	b.n	8004202 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b10      	cmp	r3, #16
 80041f0:	d007      	beq.n	8004202 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004200:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800425c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b40      	cmp	r3, #64	; 0x40
 8004270:	d10a      	bne.n	8004288 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff fcba 	bl	8003bfa <HAL_I2C_MemRxCpltCallback>
}
 8004286:	e01d      	b.n	80042c4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2212      	movs	r2, #18
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fc6f 	bl	8003b7a <HAL_I2C_MasterRxCpltCallback>
}
 800429c:	e012      	b.n	80042c4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d117      	bne.n	8004310 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042f8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80042fa:	e067      	b.n	80043cc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	b2da      	uxtb	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	611a      	str	r2, [r3, #16]
}
 800430e:	e05d      	b.n	80043cc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004318:	d133      	bne.n	8004382 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b21      	cmp	r3, #33	; 0x21
 8004324:	d109      	bne.n	800433a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	b2db      	uxtb	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004336:	611a      	str	r2, [r3, #16]
 8004338:	e008      	b.n	800434c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	b2da      	uxtb	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <I2C_Master_SB+0x92>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d108      	bne.n	8004370 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	2b00      	cmp	r3, #0
 8004364:	d032      	beq.n	80043cc <I2C_Master_SB+0x100>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d02d      	beq.n	80043cc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800437e:	605a      	str	r2, [r3, #4]
}
 8004380:	e024      	b.n	80043cc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10e      	bne.n	80043a8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	b29b      	uxth	r3, r3
 8004390:	11db      	asrs	r3, r3, #7
 8004392:	b2db      	uxtb	r3, r3
 8004394:	f003 0306 	and.w	r3, r3, #6
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f063 030f 	orn	r3, r3, #15
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	611a      	str	r2, [r3, #16]
}
 80043a6:	e011      	b.n	80043cc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d10d      	bne.n	80043cc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	11db      	asrs	r3, r3, #7
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f003 0306 	and.w	r3, r3, #6
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	f063 030e 	orn	r3, r3, #14
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	611a      	str	r2, [r3, #16]
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <I2C_Master_ADD10+0x26>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d108      	bne.n	8004410 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00c      	beq.n	8004420 <I2C_Master_ADD10+0x48>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441e:	605a      	str	r2, [r3, #4]
  }
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800442c:	b480      	push	{r7}
 800442e:	b091      	sub	sp, #68	; 0x44
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800443a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b22      	cmp	r3, #34	; 0x22
 8004454:	f040 8169 	bne.w	800472a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10f      	bne.n	8004480 <I2C_Master_ADDR+0x54>
 8004460:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	d10b      	bne.n	8004480 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004468:	2300      	movs	r3, #0
 800446a:	633b      	str	r3, [r7, #48]	; 0x30
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	633b      	str	r3, [r7, #48]	; 0x30
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	633b      	str	r3, [r7, #48]	; 0x30
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	e160      	b.n	8004742 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004484:	2b00      	cmp	r3, #0
 8004486:	d11d      	bne.n	80044c4 <I2C_Master_ADDR+0x98>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004490:	d118      	bne.n	80044c4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004492:	2300      	movs	r3, #0
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	651a      	str	r2, [r3, #80]	; 0x50
 80044c2:	e13e      	b.n	8004742 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d113      	bne.n	80044f6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ce:	2300      	movs	r3, #0
 80044d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e115      	b.n	8004722 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	f040 808a 	bne.w	8004616 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004508:	d137      	bne.n	800457a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004518:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004528:	d113      	bne.n	8004552 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004538:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	e0e7      	b.n	8004722 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004552:	2300      	movs	r3, #0
 8004554:	623b      	str	r3, [r7, #32]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	623b      	str	r3, [r7, #32]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	623b      	str	r3, [r7, #32]
 8004566:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e0d3      	b.n	8004722 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457c:	2b08      	cmp	r3, #8
 800457e:	d02e      	beq.n	80045de <I2C_Master_ADDR+0x1b2>
 8004580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004582:	2b20      	cmp	r3, #32
 8004584:	d02b      	beq.n	80045de <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004588:	2b12      	cmp	r3, #18
 800458a:	d102      	bne.n	8004592 <I2C_Master_ADDR+0x166>
 800458c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458e:	2b01      	cmp	r3, #1
 8004590:	d125      	bne.n	80045de <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	2b04      	cmp	r3, #4
 8004596:	d00e      	beq.n	80045b6 <I2C_Master_ADDR+0x18a>
 8004598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459a:	2b02      	cmp	r3, #2
 800459c:	d00b      	beq.n	80045b6 <I2C_Master_ADDR+0x18a>
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d008      	beq.n	80045b6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e007      	b.n	80045c6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	e0a1      	b.n	8004722 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ec:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	e085      	b.n	8004722 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d14d      	bne.n	80046bc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	2b04      	cmp	r3, #4
 8004624:	d016      	beq.n	8004654 <I2C_Master_ADDR+0x228>
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	2b02      	cmp	r3, #2
 800462a:	d013      	beq.n	8004654 <I2C_Master_ADDR+0x228>
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	2b10      	cmp	r3, #16
 8004630:	d010      	beq.n	8004654 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004640:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e007      	b.n	8004664 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004662:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800466e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004672:	d117      	bne.n	80046a4 <I2C_Master_ADDR+0x278>
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800467a:	d00b      	beq.n	8004694 <I2C_Master_ADDR+0x268>
 800467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467e:	2b01      	cmp	r3, #1
 8004680:	d008      	beq.n	8004694 <I2C_Master_ADDR+0x268>
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	2b08      	cmp	r3, #8
 8004686:	d005      	beq.n	8004694 <I2C_Master_ADDR+0x268>
 8004688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468a:	2b10      	cmp	r3, #16
 800468c:	d002      	beq.n	8004694 <I2C_Master_ADDR+0x268>
 800468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004690:	2b20      	cmp	r3, #32
 8004692:	d107      	bne.n	80046a4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046a2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	e032      	b.n	8004722 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046ca:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046da:	d117      	bne.n	800470c <I2C_Master_ADDR+0x2e0>
 80046dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046e2:	d00b      	beq.n	80046fc <I2C_Master_ADDR+0x2d0>
 80046e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d008      	beq.n	80046fc <I2C_Master_ADDR+0x2d0>
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d005      	beq.n	80046fc <I2C_Master_ADDR+0x2d0>
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	2b10      	cmp	r3, #16
 80046f4:	d002      	beq.n	80046fc <I2C_Master_ADDR+0x2d0>
 80046f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d107      	bne.n	800470c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800470a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004728:	e00b      	b.n	8004742 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]
}
 8004740:	e7ff      	b.n	8004742 <I2C_Master_ADDR+0x316>
 8004742:	bf00      	nop
 8004744:	3744      	adds	r7, #68	; 0x44
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d02b      	beq.n	80047c0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d114      	bne.n	80047c0 <I2C_SlaveTransmit_TXE+0x72>
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	2b29      	cmp	r3, #41	; 0x29
 800479a:	d111      	bne.n	80047c0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2221      	movs	r2, #33	; 0x21
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2228      	movs	r2, #40	; 0x28
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7ff f9e7 	bl	8003b8e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d011      	beq.n	80047fe <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004818:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d02c      	beq.n	800487e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d114      	bne.n	800487e <I2C_SlaveReceive_RXNE+0x74>
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2b2a      	cmp	r3, #42	; 0x2a
 8004858:	d111      	bne.n	800487e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004868:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2222      	movs	r2, #34	; 0x22
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2228      	movs	r2, #40	; 0x28
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff f992 	bl	8003ba2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d012      	beq.n	80048be <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80048d4:	2300      	movs	r3, #0
 80048d6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048e4:	2b28      	cmp	r3, #40	; 0x28
 80048e6:	d127      	bne.n	8004938 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	089b      	lsrs	r3, r3, #2
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	09db      	lsrs	r3, r3, #7
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d103      	bne.n	800491c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	81bb      	strh	r3, [r7, #12]
 800491a:	e002      	b.n	8004922 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800492a:	89ba      	ldrh	r2, [r7, #12]
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	4619      	mov	r1, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff f940 	bl	8003bb6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004936:	e00e      	b.n	8004956 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004938:	2300      	movs	r3, #0
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800497e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004980:	2300      	movs	r3, #0
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049bc:	d172      	bne.n	8004aa4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	2b22      	cmp	r3, #34	; 0x22
 80049c2:	d002      	beq.n	80049ca <I2C_Slave_STOPF+0x6a>
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b2a      	cmp	r3, #42	; 0x2a
 80049c8:	d135      	bne.n	8004a36 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f043 0204 	orr.w	r2, r3, #4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe fa0f 	bl	8002e26 <HAL_DMA_GetState>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d049      	beq.n	8004aa2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	4a69      	ldr	r2, [pc, #420]	; (8004bb8 <I2C_Slave_STOPF+0x258>)
 8004a14:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe f9e1 	bl	8002de2 <HAL_DMA_Abort_IT>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d03d      	beq.n	8004aa2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a30:	4610      	mov	r0, r2
 8004a32:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a34:	e035      	b.n	8004aa2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f043 0204 	orr.w	r2, r3, #4
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe f9d9 	bl	8002e26 <HAL_DMA_GetState>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d014      	beq.n	8004aa4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	4a4e      	ldr	r2, [pc, #312]	; (8004bb8 <I2C_Slave_STOPF+0x258>)
 8004a80:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe f9ab 	bl	8002de2 <HAL_DMA_Abort_IT>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	4798      	blx	r3
 8004aa0:	e000      	b.n	8004aa4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aa2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d03e      	beq.n	8004b2c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d112      	bne.n	8004ae2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	d112      	bne.n	8004b16 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f043 0204 	orr.w	r2, r3, #4
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f843 	bl	8004bc0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b3a:	e039      	b.n	8004bb0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b40:	d109      	bne.n	8004b56 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2228      	movs	r2, #40	; 0x28
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff f826 	bl	8003ba2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b28      	cmp	r3, #40	; 0x28
 8004b60:	d111      	bne.n	8004b86 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <I2C_Slave_STOPF+0x25c>)
 8004b66:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff f827 	bl	8003bd2 <HAL_I2C_ListenCpltCallback>
}
 8004b84:	e014      	b.n	8004bb0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	2b22      	cmp	r3, #34	; 0x22
 8004b8c:	d002      	beq.n	8004b94 <I2C_Slave_STOPF+0x234>
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	2b22      	cmp	r3, #34	; 0x22
 8004b92:	d10d      	bne.n	8004bb0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fe fff9 	bl	8003ba2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	08004ff5 	.word	0x08004ff5
 8004bbc:	ffff0000 	.word	0xffff0000

08004bc0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004bd8:	7bbb      	ldrb	r3, [r7, #14]
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d002      	beq.n	8004be4 <I2C_ITError+0x24>
 8004bde:	7bbb      	ldrb	r3, [r7, #14]
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d10a      	bne.n	8004bfa <I2C_ITError+0x3a>
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	2b22      	cmp	r3, #34	; 0x22
 8004be8:	d107      	bne.n	8004bfa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bf8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c00:	2b28      	cmp	r3, #40	; 0x28
 8004c02:	d107      	bne.n	8004c14 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2228      	movs	r2, #40	; 0x28
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c12:	e015      	b.n	8004c40 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c22:	d00a      	beq.n	8004c3a <I2C_ITError+0x7a>
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b60      	cmp	r3, #96	; 0x60
 8004c28:	d007      	beq.n	8004c3a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4e:	d162      	bne.n	8004d16 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c5e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d020      	beq.n	8004cb0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c72:	4a6a      	ldr	r2, [pc, #424]	; (8004e1c <I2C_ITError+0x25c>)
 8004c74:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe f8b1 	bl	8002de2 <HAL_DMA_Abort_IT>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8089 	beq.w	8004d9a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0201 	bic.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004caa:	4610      	mov	r0, r2
 8004cac:	4798      	blx	r3
 8004cae:	e074      	b.n	8004d9a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	4a59      	ldr	r2, [pc, #356]	; (8004e1c <I2C_ITError+0x25c>)
 8004cb6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe f890 	bl	8002de2 <HAL_DMA_Abort_IT>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d068      	beq.n	8004d9a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d10b      	bne.n	8004cee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0201 	bic.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d10:	4610      	mov	r0, r2
 8004d12:	4798      	blx	r3
 8004d14:	e041      	b.n	8004d9a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b60      	cmp	r3, #96	; 0x60
 8004d20:	d125      	bne.n	8004d6e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d10b      	bne.n	8004d56 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7fe ff5b 	bl	8003c22 <HAL_I2C_AbortCpltCallback>
 8004d6c:	e015      	b.n	8004d9a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b40      	cmp	r3, #64	; 0x40
 8004d7a:	d10b      	bne.n	8004d94 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7fe ff3a 	bl	8003c0e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10e      	bne.n	8004dc8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dd6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dde:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d113      	bne.n	8004e14 <I2C_ITError+0x254>
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b28      	cmp	r3, #40	; 0x28
 8004df0:	d110      	bne.n	8004e14 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <I2C_ITError+0x260>)
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fe fedf 	bl	8003bd2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e14:	bf00      	nop
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	08004ff5 	.word	0x08004ff5
 8004e20:	ffff0000 	.word	0xffff0000

08004e24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	4611      	mov	r1, r2
 8004e30:	461a      	mov	r2, r3
 8004e32:	4603      	mov	r3, r0
 8004e34:	817b      	strh	r3, [r7, #10]
 8004e36:	460b      	mov	r3, r1
 8004e38:	813b      	strh	r3, [r7, #8]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 f96a 	bl	8005144 <I2C_WaitOnFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00d      	beq.n	8004e92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e84:	d103      	bne.n	8004e8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e0aa      	b.n	8004fe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e92:	897b      	ldrh	r3, [r7, #10]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ea0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	6a3a      	ldr	r2, [r7, #32]
 8004ea6:	4952      	ldr	r1, [pc, #328]	; (8004ff0 <I2C_RequestMemoryRead+0x1cc>)
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f9a2 	bl	80051f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e097      	b.n	8004fe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed0:	6a39      	ldr	r1, [r7, #32]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fa0c 	bl	80052f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00d      	beq.n	8004efa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d107      	bne.n	8004ef6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e076      	b.n	8004fe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d105      	bne.n	8004f0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f00:	893b      	ldrh	r3, [r7, #8]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	611a      	str	r2, [r3, #16]
 8004f0a:	e021      	b.n	8004f50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f0c:	893b      	ldrh	r3, [r7, #8]
 8004f0e:	0a1b      	lsrs	r3, r3, #8
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	6a39      	ldr	r1, [r7, #32]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f9e6 	bl	80052f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00d      	beq.n	8004f46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d107      	bne.n	8004f42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e050      	b.n	8004fe8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f46:	893b      	ldrh	r3, [r7, #8]
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f52:	6a39      	ldr	r1, [r7, #32]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f9cb 	bl	80052f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00d      	beq.n	8004f7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d107      	bne.n	8004f78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e035      	b.n	8004fe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f8d3 	bl	8005144 <I2C_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00d      	beq.n	8004fc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb2:	d103      	bne.n	8004fbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e013      	b.n	8004fe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fc0:	897b      	ldrh	r3, [r7, #10]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	6a3a      	ldr	r2, [r7, #32]
 8004fd4:	4906      	ldr	r1, [pc, #24]	; (8004ff0 <I2C_RequestMemoryRead+0x1cc>)
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f90b 	bl	80051f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	00010002 	.word	0x00010002

08004ff4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800500e:	4b4b      	ldr	r3, [pc, #300]	; (800513c <I2C_DMAAbort+0x148>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	08db      	lsrs	r3, r3, #3
 8005014:	4a4a      	ldr	r2, [pc, #296]	; (8005140 <I2C_DMAAbort+0x14c>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	0a1a      	lsrs	r2, r3, #8
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	00da      	lsls	r2, r3, #3
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800503a:	e00a      	b.n	8005052 <I2C_DMAAbort+0x5e>
    }
    count--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3b01      	subs	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800504c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005050:	d0ea      	beq.n	8005028 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	2200      	movs	r2, #0
 8005060:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	2200      	movs	r2, #0
 8005070:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005080:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005094:	2200      	movs	r2, #0
 8005096:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	2200      	movs	r2, #0
 80050a6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0201 	bic.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b60      	cmp	r3, #96	; 0x60
 80050c2:	d10e      	bne.n	80050e2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2200      	movs	r2, #0
 80050d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050da:	6978      	ldr	r0, [r7, #20]
 80050dc:	f7fe fda1 	bl	8003c22 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050e0:	e027      	b.n	8005132 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050e2:	7cfb      	ldrb	r3, [r7, #19]
 80050e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050e8:	2b28      	cmp	r3, #40	; 0x28
 80050ea:	d117      	bne.n	800511c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800510a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2200      	movs	r2, #0
 8005110:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2228      	movs	r2, #40	; 0x28
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800511a:	e007      	b.n	800512c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800512c:	6978      	ldr	r0, [r7, #20]
 800512e:	f7fe fd6e 	bl	8003c0e <HAL_I2C_ErrorCallback>
}
 8005132:	bf00      	nop
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000000 	.word	0x20000000
 8005140:	14f8b589 	.word	0x14f8b589

08005144 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005154:	e025      	b.n	80051a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d021      	beq.n	80051a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800515e:	f7fc ff99 	bl	8002094 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d302      	bcc.n	8005174 <I2C_WaitOnFlagUntilTimeout+0x30>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d116      	bne.n	80051a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f043 0220 	orr.w	r2, r3, #32
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e023      	b.n	80051ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	0c1b      	lsrs	r3, r3, #16
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d10d      	bne.n	80051c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	43da      	mvns	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4013      	ands	r3, r2
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2300      	movne	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	e00c      	b.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	43da      	mvns	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4013      	ands	r3, r2
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bf0c      	ite	eq
 80051da:	2301      	moveq	r3, #1
 80051dc:	2300      	movne	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d0b6      	beq.n	8005156 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
 80051fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005200:	e051      	b.n	80052a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005210:	d123      	bne.n	800525a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005220:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800522a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f043 0204 	orr.w	r2, r3, #4
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e046      	b.n	80052e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d021      	beq.n	80052a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005262:	f7fc ff17 	bl	8002094 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d116      	bne.n	80052a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e020      	b.n	80052e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	0c1b      	lsrs	r3, r3, #16
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d10c      	bne.n	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	43da      	mvns	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4013      	ands	r3, r2
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bf14      	ite	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	2300      	moveq	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	e00b      	b.n	80052e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	43da      	mvns	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4013      	ands	r3, r2
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d18d      	bne.n	8005202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052fc:	e02d      	b.n	800535a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f8c0 	bl	8005484 <I2C_IsAcknowledgeFailed>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e02d      	b.n	800536a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005314:	d021      	beq.n	800535a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005316:	f7fc febd 	bl	8002094 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	429a      	cmp	r2, r3
 8005324:	d302      	bcc.n	800532c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d116      	bne.n	800535a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f043 0220 	orr.w	r2, r3, #32
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e007      	b.n	800536a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005364:	2b80      	cmp	r3, #128	; 0x80
 8005366:	d1ca      	bne.n	80052fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005380:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	08db      	lsrs	r3, r3, #3
 8005386:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005388:	fba2 2303 	umull	r2, r3, r2, r3
 800538c:	0a1a      	lsrs	r2, r3, #8
 800538e:	4613      	mov	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3b01      	subs	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d107      	bne.n	80053b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f043 0220 	orr.w	r2, r3, #32
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e008      	b.n	80053c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c0:	d0e9      	beq.n	8005396 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	20000000 	.word	0x20000000
 80053d4:	14f8b589 	.word	0x14f8b589

080053d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053e4:	e042      	b.n	800546c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d119      	bne.n	8005428 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0210 	mvn.w	r2, #16
 80053fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e029      	b.n	800547c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005428:	f7fc fe34 	bl	8002094 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	429a      	cmp	r2, r3
 8005436:	d302      	bcc.n	800543e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d116      	bne.n	800546c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	f043 0220 	orr.w	r2, r3, #32
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e007      	b.n	800547c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005476:	2b40      	cmp	r3, #64	; 0x40
 8005478:	d1b5      	bne.n	80053e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549a:	d11b      	bne.n	80054d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	f043 0204 	orr.w	r2, r3, #4
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80054f2:	d103      	bne.n	80054fc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80054fa:	e007      	b.n	800550c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005504:	d102      	bne.n	800550c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2208      	movs	r2, #8
 800550a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e267      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d075      	beq.n	8005622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005536:	4b88      	ldr	r3, [pc, #544]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 030c 	and.w	r3, r3, #12
 800553e:	2b04      	cmp	r3, #4
 8005540:	d00c      	beq.n	800555c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005542:	4b85      	ldr	r3, [pc, #532]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800554a:	2b08      	cmp	r3, #8
 800554c:	d112      	bne.n	8005574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800554e:	4b82      	ldr	r3, [pc, #520]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800555a:	d10b      	bne.n	8005574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800555c:	4b7e      	ldr	r3, [pc, #504]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d05b      	beq.n	8005620 <HAL_RCC_OscConfig+0x108>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d157      	bne.n	8005620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e242      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557c:	d106      	bne.n	800558c <HAL_RCC_OscConfig+0x74>
 800557e:	4b76      	ldr	r3, [pc, #472]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a75      	ldr	r2, [pc, #468]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e01d      	b.n	80055c8 <HAL_RCC_OscConfig+0xb0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005594:	d10c      	bne.n	80055b0 <HAL_RCC_OscConfig+0x98>
 8005596:	4b70      	ldr	r3, [pc, #448]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a6f      	ldr	r2, [pc, #444]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 800559c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	4b6d      	ldr	r3, [pc, #436]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a6c      	ldr	r2, [pc, #432]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e00b      	b.n	80055c8 <HAL_RCC_OscConfig+0xb0>
 80055b0:	4b69      	ldr	r3, [pc, #420]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a68      	ldr	r2, [pc, #416]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	4b66      	ldr	r3, [pc, #408]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a65      	ldr	r2, [pc, #404]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d013      	beq.n	80055f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d0:	f7fc fd60 	bl	8002094 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d8:	f7fc fd5c 	bl	8002094 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b64      	cmp	r3, #100	; 0x64
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e207      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ea:	4b5b      	ldr	r3, [pc, #364]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f0      	beq.n	80055d8 <HAL_RCC_OscConfig+0xc0>
 80055f6:	e014      	b.n	8005622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f8:	f7fc fd4c 	bl	8002094 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005600:	f7fc fd48 	bl	8002094 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	; 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e1f3      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005612:	4b51      	ldr	r3, [pc, #324]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f0      	bne.n	8005600 <HAL_RCC_OscConfig+0xe8>
 800561e:	e000      	b.n	8005622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d063      	beq.n	80056f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800562e:	4b4a      	ldr	r3, [pc, #296]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00b      	beq.n	8005652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800563a:	4b47      	ldr	r3, [pc, #284]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005642:	2b08      	cmp	r3, #8
 8005644:	d11c      	bne.n	8005680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005646:	4b44      	ldr	r3, [pc, #272]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d116      	bne.n	8005680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005652:	4b41      	ldr	r3, [pc, #260]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_RCC_OscConfig+0x152>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d001      	beq.n	800566a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e1c7      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800566a:	4b3b      	ldr	r3, [pc, #236]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	4937      	ldr	r1, [pc, #220]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 800567a:	4313      	orrs	r3, r2
 800567c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800567e:	e03a      	b.n	80056f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d020      	beq.n	80056ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005688:	4b34      	ldr	r3, [pc, #208]	; (800575c <HAL_RCC_OscConfig+0x244>)
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568e:	f7fc fd01 	bl	8002094 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005696:	f7fc fcfd 	bl	8002094 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e1a8      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a8:	4b2b      	ldr	r3, [pc, #172]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f0      	beq.n	8005696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b4:	4b28      	ldr	r3, [pc, #160]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	4925      	ldr	r1, [pc, #148]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	600b      	str	r3, [r1, #0]
 80056c8:	e015      	b.n	80056f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ca:	4b24      	ldr	r3, [pc, #144]	; (800575c <HAL_RCC_OscConfig+0x244>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fc fce0 	bl	8002094 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d8:	f7fc fcdc 	bl	8002094 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e187      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ea:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d036      	beq.n	8005770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d016      	beq.n	8005738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800570a:	4b15      	ldr	r3, [pc, #84]	; (8005760 <HAL_RCC_OscConfig+0x248>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005710:	f7fc fcc0 	bl	8002094 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005718:	f7fc fcbc 	bl	8002094 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e167      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 800572c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0x200>
 8005736:	e01b      	b.n	8005770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005738:	4b09      	ldr	r3, [pc, #36]	; (8005760 <HAL_RCC_OscConfig+0x248>)
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800573e:	f7fc fca9 	bl	8002094 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005744:	e00e      	b.n	8005764 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005746:	f7fc fca5 	bl	8002094 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d907      	bls.n	8005764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e150      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
 8005758:	40023800 	.word	0x40023800
 800575c:	42470000 	.word	0x42470000
 8005760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005764:	4b88      	ldr	r3, [pc, #544]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1ea      	bne.n	8005746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8097 	beq.w	80058ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800577e:	2300      	movs	r3, #0
 8005780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005782:	4b81      	ldr	r3, [pc, #516]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10f      	bne.n	80057ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800578e:	2300      	movs	r3, #0
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	4b7d      	ldr	r3, [pc, #500]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	4a7c      	ldr	r2, [pc, #496]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579c:	6413      	str	r3, [r2, #64]	; 0x40
 800579e:	4b7a      	ldr	r3, [pc, #488]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a6:	60bb      	str	r3, [r7, #8]
 80057a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057aa:	2301      	movs	r3, #1
 80057ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ae:	4b77      	ldr	r3, [pc, #476]	; (800598c <HAL_RCC_OscConfig+0x474>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d118      	bne.n	80057ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ba:	4b74      	ldr	r3, [pc, #464]	; (800598c <HAL_RCC_OscConfig+0x474>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a73      	ldr	r2, [pc, #460]	; (800598c <HAL_RCC_OscConfig+0x474>)
 80057c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057c6:	f7fc fc65 	bl	8002094 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ce:	f7fc fc61 	bl	8002094 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e10c      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e0:	4b6a      	ldr	r3, [pc, #424]	; (800598c <HAL_RCC_OscConfig+0x474>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d106      	bne.n	8005802 <HAL_RCC_OscConfig+0x2ea>
 80057f4:	4b64      	ldr	r3, [pc, #400]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	4a63      	ldr	r2, [pc, #396]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005800:	e01c      	b.n	800583c <HAL_RCC_OscConfig+0x324>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b05      	cmp	r3, #5
 8005808:	d10c      	bne.n	8005824 <HAL_RCC_OscConfig+0x30c>
 800580a:	4b5f      	ldr	r3, [pc, #380]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	4a5e      	ldr	r2, [pc, #376]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005810:	f043 0304 	orr.w	r3, r3, #4
 8005814:	6713      	str	r3, [r2, #112]	; 0x70
 8005816:	4b5c      	ldr	r3, [pc, #368]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581a:	4a5b      	ldr	r2, [pc, #364]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	6713      	str	r3, [r2, #112]	; 0x70
 8005822:	e00b      	b.n	800583c <HAL_RCC_OscConfig+0x324>
 8005824:	4b58      	ldr	r3, [pc, #352]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	4a57      	ldr	r2, [pc, #348]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	6713      	str	r3, [r2, #112]	; 0x70
 8005830:	4b55      	ldr	r3, [pc, #340]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	4a54      	ldr	r2, [pc, #336]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005836:	f023 0304 	bic.w	r3, r3, #4
 800583a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d015      	beq.n	8005870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005844:	f7fc fc26 	bl	8002094 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584a:	e00a      	b.n	8005862 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800584c:	f7fc fc22 	bl	8002094 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e0cb      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005862:	4b49      	ldr	r3, [pc, #292]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0ee      	beq.n	800584c <HAL_RCC_OscConfig+0x334>
 800586e:	e014      	b.n	800589a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005870:	f7fc fc10 	bl	8002094 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005876:	e00a      	b.n	800588e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005878:	f7fc fc0c 	bl	8002094 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	f241 3288 	movw	r2, #5000	; 0x1388
 8005886:	4293      	cmp	r3, r2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e0b5      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588e:	4b3e      	ldr	r3, [pc, #248]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1ee      	bne.n	8005878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d105      	bne.n	80058ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058a0:	4b39      	ldr	r3, [pc, #228]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	4a38      	ldr	r2, [pc, #224]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80058a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 80a1 	beq.w	80059f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058b6:	4b34      	ldr	r3, [pc, #208]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d05c      	beq.n	800597c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d141      	bne.n	800594e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ca:	4b31      	ldr	r3, [pc, #196]	; (8005990 <HAL_RCC_OscConfig+0x478>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d0:	f7fc fbe0 	bl	8002094 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d8:	f7fc fbdc 	bl	8002094 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e087      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ea:	4b27      	ldr	r3, [pc, #156]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f0      	bne.n	80058d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69da      	ldr	r2, [r3, #28]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	019b      	lsls	r3, r3, #6
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	085b      	lsrs	r3, r3, #1
 800590e:	3b01      	subs	r3, #1
 8005910:	041b      	lsls	r3, r3, #16
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	061b      	lsls	r3, r3, #24
 800591a:	491b      	ldr	r1, [pc, #108]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 800591c:	4313      	orrs	r3, r2
 800591e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005920:	4b1b      	ldr	r3, [pc, #108]	; (8005990 <HAL_RCC_OscConfig+0x478>)
 8005922:	2201      	movs	r2, #1
 8005924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005926:	f7fc fbb5 	bl	8002094 <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592e:	f7fc fbb1 	bl	8002094 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e05c      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005940:	4b11      	ldr	r3, [pc, #68]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <HAL_RCC_OscConfig+0x416>
 800594c:	e054      	b.n	80059f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594e:	4b10      	ldr	r3, [pc, #64]	; (8005990 <HAL_RCC_OscConfig+0x478>)
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005954:	f7fc fb9e 	bl	8002094 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800595c:	f7fc fb9a 	bl	8002094 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e045      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_OscConfig+0x444>
 800597a:	e03d      	b.n	80059f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d107      	bne.n	8005994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e038      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
 8005988:	40023800 	.word	0x40023800
 800598c:	40007000 	.word	0x40007000
 8005990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005994:	4b1b      	ldr	r3, [pc, #108]	; (8005a04 <HAL_RCC_OscConfig+0x4ec>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d028      	beq.n	80059f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d121      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d11a      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059c4:	4013      	ands	r3, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d111      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	3b01      	subs	r3, #1
 80059de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d107      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40023800 	.word	0x40023800

08005a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0cc      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a1c:	4b68      	ldr	r3, [pc, #416]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d90c      	bls.n	8005a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a2a:	4b65      	ldr	r3, [pc, #404]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a32:	4b63      	ldr	r3, [pc, #396]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e0b8      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d020      	beq.n	8005a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a5c:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	4a58      	ldr	r2, [pc, #352]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a74:	4b53      	ldr	r3, [pc, #332]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	4a52      	ldr	r2, [pc, #328]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a80:	4b50      	ldr	r3, [pc, #320]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	494d      	ldr	r1, [pc, #308]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d044      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d107      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa6:	4b47      	ldr	r3, [pc, #284]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d119      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e07f      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d107      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac6:	4b3f      	ldr	r3, [pc, #252]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e06f      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad6:	4b3b      	ldr	r3, [pc, #236]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e067      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ae6:	4b37      	ldr	r3, [pc, #220]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f023 0203 	bic.w	r2, r3, #3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4934      	ldr	r1, [pc, #208]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005af8:	f7fc facc 	bl	8002094 <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b00:	f7fc fac8 	bl	8002094 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e04f      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b16:	4b2b      	ldr	r3, [pc, #172]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 020c 	and.w	r2, r3, #12
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d1eb      	bne.n	8005b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b28:	4b25      	ldr	r3, [pc, #148]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d20c      	bcs.n	8005b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b36:	4b22      	ldr	r3, [pc, #136]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3e:	4b20      	ldr	r3, [pc, #128]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d001      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e032      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b5c:	4b19      	ldr	r3, [pc, #100]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	4916      	ldr	r1, [pc, #88]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d009      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b7a:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	490e      	ldr	r1, [pc, #56]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b8e:	f000 f821 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8005b92:	4602      	mov	r2, r0
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	091b      	lsrs	r3, r3, #4
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	490a      	ldr	r1, [pc, #40]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ba0:	5ccb      	ldrb	r3, [r1, r3]
 8005ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fc fa2c 	bl	800200c <HAL_InitTick>

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40023c00 	.word	0x40023c00
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	0800879c 	.word	0x0800879c
 8005bcc:	20000000 	.word	0x20000000
 8005bd0:	20000004 	.word	0x20000004

08005bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bd8:	b090      	sub	sp, #64	; 0x40
 8005bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	637b      	str	r3, [r7, #52]	; 0x34
 8005be0:	2300      	movs	r3, #0
 8005be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be4:	2300      	movs	r3, #0
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bec:	4b59      	ldr	r3, [pc, #356]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 030c 	and.w	r3, r3, #12
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d00d      	beq.n	8005c14 <HAL_RCC_GetSysClockFreq+0x40>
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	f200 80a1 	bhi.w	8005d40 <HAL_RCC_GetSysClockFreq+0x16c>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_RCC_GetSysClockFreq+0x34>
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d003      	beq.n	8005c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8005c06:	e09b      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c08:	4b53      	ldr	r3, [pc, #332]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c0a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005c0c:	e09b      	b.n	8005d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c0e:	4b53      	ldr	r3, [pc, #332]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8005c10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c12:	e098      	b.n	8005d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c14:	4b4f      	ldr	r3, [pc, #316]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c1e:	4b4d      	ldr	r3, [pc, #308]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d028      	beq.n	8005c7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c2a:	4b4a      	ldr	r3, [pc, #296]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	099b      	lsrs	r3, r3, #6
 8005c30:	2200      	movs	r2, #0
 8005c32:	623b      	str	r3, [r7, #32]
 8005c34:	627a      	str	r2, [r7, #36]	; 0x24
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4b47      	ldr	r3, [pc, #284]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8005c40:	fb03 f201 	mul.w	r2, r3, r1
 8005c44:	2300      	movs	r3, #0
 8005c46:	fb00 f303 	mul.w	r3, r0, r3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	4a43      	ldr	r2, [pc, #268]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8005c4e:	fba0 1202 	umull	r1, r2, r0, r2
 8005c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c54:	460a      	mov	r2, r1
 8005c56:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5a:	4413      	add	r3, r2
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c60:	2200      	movs	r2, #0
 8005c62:	61bb      	str	r3, [r7, #24]
 8005c64:	61fa      	str	r2, [r7, #28]
 8005c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005c6e:	f7fa fb0f 	bl	8000290 <__aeabi_uldivmod>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4613      	mov	r3, r2
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c7a:	e053      	b.n	8005d24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c7c:	4b35      	ldr	r3, [pc, #212]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	099b      	lsrs	r3, r3, #6
 8005c82:	2200      	movs	r2, #0
 8005c84:	613b      	str	r3, [r7, #16]
 8005c86:	617a      	str	r2, [r7, #20]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c8e:	f04f 0b00 	mov.w	fp, #0
 8005c92:	4652      	mov	r2, sl
 8005c94:	465b      	mov	r3, fp
 8005c96:	f04f 0000 	mov.w	r0, #0
 8005c9a:	f04f 0100 	mov.w	r1, #0
 8005c9e:	0159      	lsls	r1, r3, #5
 8005ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ca4:	0150      	lsls	r0, r2, #5
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	ebb2 080a 	subs.w	r8, r2, sl
 8005cae:	eb63 090b 	sbc.w	r9, r3, fp
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	f04f 0300 	mov.w	r3, #0
 8005cba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005cbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005cc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005cc6:	ebb2 0408 	subs.w	r4, r2, r8
 8005cca:	eb63 0509 	sbc.w	r5, r3, r9
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	f04f 0300 	mov.w	r3, #0
 8005cd6:	00eb      	lsls	r3, r5, #3
 8005cd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cdc:	00e2      	lsls	r2, r4, #3
 8005cde:	4614      	mov	r4, r2
 8005ce0:	461d      	mov	r5, r3
 8005ce2:	eb14 030a 	adds.w	r3, r4, sl
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	eb45 030b 	adc.w	r3, r5, fp
 8005cec:	607b      	str	r3, [r7, #4]
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	f04f 0300 	mov.w	r3, #0
 8005cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	028b      	lsls	r3, r1, #10
 8005cfe:	4621      	mov	r1, r4
 8005d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d04:	4621      	mov	r1, r4
 8005d06:	028a      	lsls	r2, r1, #10
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0e:	2200      	movs	r2, #0
 8005d10:	60bb      	str	r3, [r7, #8]
 8005d12:	60fa      	str	r2, [r7, #12]
 8005d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d18:	f7fa faba 	bl	8000290 <__aeabi_uldivmod>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4613      	mov	r3, r2
 8005d22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d24:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	0c1b      	lsrs	r3, r3, #16
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	3301      	adds	r3, #1
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d3e:	e002      	b.n	8005d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3740      	adds	r7, #64	; 0x40
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d52:	bf00      	nop
 8005d54:	40023800 	.word	0x40023800
 8005d58:	00f42400 	.word	0x00f42400
 8005d5c:	017d7840 	.word	0x017d7840

08005d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d64:	4b03      	ldr	r3, [pc, #12]	; (8005d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d66:	681b      	ldr	r3, [r3, #0]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20000000 	.word	0x20000000

08005d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d7c:	f7ff fff0 	bl	8005d60 <HAL_RCC_GetHCLKFreq>
 8005d80:	4602      	mov	r2, r0
 8005d82:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	0a9b      	lsrs	r3, r3, #10
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	4903      	ldr	r1, [pc, #12]	; (8005d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d8e:	5ccb      	ldrb	r3, [r1, r3]
 8005d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	080087ac 	.word	0x080087ac

08005da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005da4:	f7ff ffdc 	bl	8005d60 <HAL_RCC_GetHCLKFreq>
 8005da8:	4602      	mov	r2, r0
 8005daa:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	0b5b      	lsrs	r3, r3, #13
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	4903      	ldr	r1, [pc, #12]	; (8005dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005db6:	5ccb      	ldrb	r3, [r1, r3]
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	080087ac 	.word	0x080087ac

08005dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e041      	b.n	8005e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fb fe9c 	bl	8001b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f000 fb1a 	bl	8006440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b082      	sub	sp, #8
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e041      	b.n	8005efc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7fb fde9 	bl	8001a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f000 facb 	bl	8006440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <HAL_TIM_PWM_Start+0x24>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	bf14      	ite	ne
 8005f20:	2301      	movne	r3, #1
 8005f22:	2300      	moveq	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	e022      	b.n	8005f6e <HAL_TIM_PWM_Start+0x6a>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d109      	bne.n	8005f42 <HAL_TIM_PWM_Start+0x3e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	bf14      	ite	ne
 8005f3a:	2301      	movne	r3, #1
 8005f3c:	2300      	moveq	r3, #0
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	e015      	b.n	8005f6e <HAL_TIM_PWM_Start+0x6a>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d109      	bne.n	8005f5c <HAL_TIM_PWM_Start+0x58>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	bf14      	ite	ne
 8005f54:	2301      	movne	r3, #1
 8005f56:	2300      	moveq	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	e008      	b.n	8005f6e <HAL_TIM_PWM_Start+0x6a>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	bf14      	ite	ne
 8005f68:	2301      	movne	r3, #1
 8005f6a:	2300      	moveq	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e068      	b.n	8006048 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d104      	bne.n	8005f86 <HAL_TIM_PWM_Start+0x82>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f84:	e013      	b.n	8005fae <HAL_TIM_PWM_Start+0xaa>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_PWM_Start+0x92>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f94:	e00b      	b.n	8005fae <HAL_TIM_PWM_Start+0xaa>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d104      	bne.n	8005fa6 <HAL_TIM_PWM_Start+0xa2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fa4:	e003      	b.n	8005fae <HAL_TIM_PWM_Start+0xaa>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fce8 	bl	800698c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a23      	ldr	r2, [pc, #140]	; (8006050 <HAL_TIM_PWM_Start+0x14c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d107      	bne.n	8005fd6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1d      	ldr	r2, [pc, #116]	; (8006050 <HAL_TIM_PWM_Start+0x14c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d018      	beq.n	8006012 <HAL_TIM_PWM_Start+0x10e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe8:	d013      	beq.n	8006012 <HAL_TIM_PWM_Start+0x10e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a19      	ldr	r2, [pc, #100]	; (8006054 <HAL_TIM_PWM_Start+0x150>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00e      	beq.n	8006012 <HAL_TIM_PWM_Start+0x10e>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a17      	ldr	r2, [pc, #92]	; (8006058 <HAL_TIM_PWM_Start+0x154>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_TIM_PWM_Start+0x10e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a16      	ldr	r2, [pc, #88]	; (800605c <HAL_TIM_PWM_Start+0x158>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_TIM_PWM_Start+0x10e>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a14      	ldr	r2, [pc, #80]	; (8006060 <HAL_TIM_PWM_Start+0x15c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d111      	bne.n	8006036 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b06      	cmp	r3, #6
 8006022:	d010      	beq.n	8006046 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006034:	e007      	b.n	8006046 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0201 	orr.w	r2, r2, #1
 8006044:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40010000 	.word	0x40010000
 8006054:	40000400 	.word	0x40000400
 8006058:	40000800 	.word	0x40000800
 800605c:	40000c00 	.word	0x40000c00
 8006060:	40014000 	.word	0x40014000

08006064 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fc88 	bl	800698c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a29      	ldr	r2, [pc, #164]	; (8006128 <HAL_TIM_PWM_Stop+0xc4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d117      	bne.n	80060b6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6a1a      	ldr	r2, [r3, #32]
 800608c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10f      	bne.n	80060b6 <HAL_TIM_PWM_Stop+0x52>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6a1a      	ldr	r2, [r3, #32]
 800609c:	f240 4344 	movw	r3, #1092	; 0x444
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d107      	bne.n	80060b6 <HAL_TIM_PWM_Stop+0x52>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6a1a      	ldr	r2, [r3, #32]
 80060bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10f      	bne.n	80060e6 <HAL_TIM_PWM_Stop+0x82>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6a1a      	ldr	r2, [r3, #32]
 80060cc:	f240 4344 	movw	r3, #1092	; 0x444
 80060d0:	4013      	ands	r3, r2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d107      	bne.n	80060e6 <HAL_TIM_PWM_Stop+0x82>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0201 	bic.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d104      	bne.n	80060f6 <HAL_TIM_PWM_Stop+0x92>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f4:	e013      	b.n	800611e <HAL_TIM_PWM_Stop+0xba>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	d104      	bne.n	8006106 <HAL_TIM_PWM_Stop+0xa2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006104:	e00b      	b.n	800611e <HAL_TIM_PWM_Stop+0xba>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b08      	cmp	r3, #8
 800610a:	d104      	bne.n	8006116 <HAL_TIM_PWM_Stop+0xb2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006114:	e003      	b.n	800611e <HAL_TIM_PWM_Stop+0xba>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40010000 	.word	0x40010000

0800612c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006146:	2302      	movs	r3, #2
 8006148:	e0ae      	b.n	80062a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b0c      	cmp	r3, #12
 8006156:	f200 809f 	bhi.w	8006298 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	08006195 	.word	0x08006195
 8006164:	08006299 	.word	0x08006299
 8006168:	08006299 	.word	0x08006299
 800616c:	08006299 	.word	0x08006299
 8006170:	080061d5 	.word	0x080061d5
 8006174:	08006299 	.word	0x08006299
 8006178:	08006299 	.word	0x08006299
 800617c:	08006299 	.word	0x08006299
 8006180:	08006217 	.word	0x08006217
 8006184:	08006299 	.word	0x08006299
 8006188:	08006299 	.word	0x08006299
 800618c:	08006299 	.word	0x08006299
 8006190:	08006257 	.word	0x08006257
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f9d0 	bl	8006540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0208 	orr.w	r2, r2, #8
 80061ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0204 	bic.w	r2, r2, #4
 80061be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6999      	ldr	r1, [r3, #24]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	619a      	str	r2, [r3, #24]
      break;
 80061d2:	e064      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fa16 	bl	800660c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6999      	ldr	r1, [r3, #24]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	021a      	lsls	r2, r3, #8
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	619a      	str	r2, [r3, #24]
      break;
 8006214:	e043      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fa61 	bl	80066e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0208 	orr.w	r2, r2, #8
 8006230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0204 	bic.w	r2, r2, #4
 8006240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69d9      	ldr	r1, [r3, #28]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	61da      	str	r2, [r3, #28]
      break;
 8006254:	e023      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 faab 	bl	80067b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69d9      	ldr	r1, [r3, #28]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	021a      	lsls	r2, r3, #8
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	61da      	str	r2, [r3, #28]
      break;
 8006296:	e002      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	75fb      	strb	r3, [r7, #23]
      break;
 800629c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_TIM_ConfigClockSource+0x1c>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e0b4      	b.n	8006436 <HAL_TIM_ConfigClockSource+0x186>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006304:	d03e      	beq.n	8006384 <HAL_TIM_ConfigClockSource+0xd4>
 8006306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800630a:	f200 8087 	bhi.w	800641c <HAL_TIM_ConfigClockSource+0x16c>
 800630e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006312:	f000 8086 	beq.w	8006422 <HAL_TIM_ConfigClockSource+0x172>
 8006316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631a:	d87f      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 800631c:	2b70      	cmp	r3, #112	; 0x70
 800631e:	d01a      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0xa6>
 8006320:	2b70      	cmp	r3, #112	; 0x70
 8006322:	d87b      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 8006324:	2b60      	cmp	r3, #96	; 0x60
 8006326:	d050      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x11a>
 8006328:	2b60      	cmp	r3, #96	; 0x60
 800632a:	d877      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 800632c:	2b50      	cmp	r3, #80	; 0x50
 800632e:	d03c      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0xfa>
 8006330:	2b50      	cmp	r3, #80	; 0x50
 8006332:	d873      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 8006334:	2b40      	cmp	r3, #64	; 0x40
 8006336:	d058      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x13a>
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	d86f      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 800633c:	2b30      	cmp	r3, #48	; 0x30
 800633e:	d064      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x15a>
 8006340:	2b30      	cmp	r3, #48	; 0x30
 8006342:	d86b      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 8006344:	2b20      	cmp	r3, #32
 8006346:	d060      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x15a>
 8006348:	2b20      	cmp	r3, #32
 800634a:	d867      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d05c      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x15a>
 8006350:	2b10      	cmp	r3, #16
 8006352:	d05a      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x15a>
 8006354:	e062      	b.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	6899      	ldr	r1, [r3, #8]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f000 faf1 	bl	800694c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	609a      	str	r2, [r3, #8]
      break;
 8006382:	e04f      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	6899      	ldr	r1, [r3, #8]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f000 fada 	bl	800694c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063a6:	609a      	str	r2, [r3, #8]
      break;
 80063a8:	e03c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 fa4e 	bl	8006858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2150      	movs	r1, #80	; 0x50
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 faa7 	bl	8006916 <TIM_ITRx_SetConfig>
      break;
 80063c8:	e02c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f000 fa6d 	bl	80068b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2160      	movs	r1, #96	; 0x60
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fa97 	bl	8006916 <TIM_ITRx_SetConfig>
      break;
 80063e8:	e01c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f000 fa2e 	bl	8006858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2140      	movs	r1, #64	; 0x40
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fa87 	bl	8006916 <TIM_ITRx_SetConfig>
      break;
 8006408:	e00c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4619      	mov	r1, r3
 8006414:	4610      	mov	r0, r2
 8006416:	f000 fa7e 	bl	8006916 <TIM_ITRx_SetConfig>
      break;
 800641a:	e003      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
      break;
 8006420:	e000      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a34      	ldr	r2, [pc, #208]	; (8006524 <TIM_Base_SetConfig+0xe4>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00f      	beq.n	8006478 <TIM_Base_SetConfig+0x38>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645e:	d00b      	beq.n	8006478 <TIM_Base_SetConfig+0x38>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a31      	ldr	r2, [pc, #196]	; (8006528 <TIM_Base_SetConfig+0xe8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d007      	beq.n	8006478 <TIM_Base_SetConfig+0x38>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a30      	ldr	r2, [pc, #192]	; (800652c <TIM_Base_SetConfig+0xec>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d003      	beq.n	8006478 <TIM_Base_SetConfig+0x38>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a2f      	ldr	r2, [pc, #188]	; (8006530 <TIM_Base_SetConfig+0xf0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d108      	bne.n	800648a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a25      	ldr	r2, [pc, #148]	; (8006524 <TIM_Base_SetConfig+0xe4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d01b      	beq.n	80064ca <TIM_Base_SetConfig+0x8a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006498:	d017      	beq.n	80064ca <TIM_Base_SetConfig+0x8a>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a22      	ldr	r2, [pc, #136]	; (8006528 <TIM_Base_SetConfig+0xe8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d013      	beq.n	80064ca <TIM_Base_SetConfig+0x8a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a21      	ldr	r2, [pc, #132]	; (800652c <TIM_Base_SetConfig+0xec>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00f      	beq.n	80064ca <TIM_Base_SetConfig+0x8a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a20      	ldr	r2, [pc, #128]	; (8006530 <TIM_Base_SetConfig+0xf0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00b      	beq.n	80064ca <TIM_Base_SetConfig+0x8a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a1f      	ldr	r2, [pc, #124]	; (8006534 <TIM_Base_SetConfig+0xf4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d007      	beq.n	80064ca <TIM_Base_SetConfig+0x8a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a1e      	ldr	r2, [pc, #120]	; (8006538 <TIM_Base_SetConfig+0xf8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d003      	beq.n	80064ca <TIM_Base_SetConfig+0x8a>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a1d      	ldr	r2, [pc, #116]	; (800653c <TIM_Base_SetConfig+0xfc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d108      	bne.n	80064dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a08      	ldr	r2, [pc, #32]	; (8006524 <TIM_Base_SetConfig+0xe4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d103      	bne.n	8006510 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	615a      	str	r2, [r3, #20]
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40010000 	.word	0x40010000
 8006528:	40000400 	.word	0x40000400
 800652c:	40000800 	.word	0x40000800
 8006530:	40000c00 	.word	0x40000c00
 8006534:	40014000 	.word	0x40014000
 8006538:	40014400 	.word	0x40014400
 800653c:	40014800 	.word	0x40014800

08006540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f023 0201 	bic.w	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0303 	bic.w	r3, r3, #3
 8006576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f023 0302 	bic.w	r3, r3, #2
 8006588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	4313      	orrs	r3, r2
 8006592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a1c      	ldr	r2, [pc, #112]	; (8006608 <TIM_OC1_SetConfig+0xc8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d10c      	bne.n	80065b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f023 0308 	bic.w	r3, r3, #8
 80065a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f023 0304 	bic.w	r3, r3, #4
 80065b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a13      	ldr	r2, [pc, #76]	; (8006608 <TIM_OC1_SetConfig+0xc8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d111      	bne.n	80065e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	621a      	str	r2, [r3, #32]
}
 80065fc:	bf00      	nop
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40010000 	.word	0x40010000

0800660c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	f023 0210 	bic.w	r2, r3, #16
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0320 	bic.w	r3, r3, #32
 8006656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a1e      	ldr	r2, [pc, #120]	; (80066e0 <TIM_OC2_SetConfig+0xd4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d10d      	bne.n	8006688 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006686:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <TIM_OC2_SetConfig+0xd4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d113      	bne.n	80066b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800669e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40010000 	.word	0x40010000

080066e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0303 	bic.w	r3, r3, #3
 800671a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800672c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a1d      	ldr	r2, [pc, #116]	; (80067b4 <TIM_OC3_SetConfig+0xd0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d10d      	bne.n	800675e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800675c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a14      	ldr	r2, [pc, #80]	; (80067b4 <TIM_OC3_SetConfig+0xd0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d113      	bne.n	800678e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800676c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	621a      	str	r2, [r3, #32]
}
 80067a8:	bf00      	nop
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	40010000 	.word	0x40010000

080067b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	031b      	lsls	r3, r3, #12
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a10      	ldr	r2, [pc, #64]	; (8006854 <TIM_OC4_SetConfig+0x9c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d109      	bne.n	800682c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800681e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	019b      	lsls	r3, r3, #6
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	621a      	str	r2, [r3, #32]
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40010000 	.word	0x40010000

08006858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f023 0201 	bic.w	r2, r3, #1
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f023 030a 	bic.w	r3, r3, #10
 8006894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	621a      	str	r2, [r3, #32]
}
 80068aa:	bf00      	nop
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b087      	sub	sp, #28
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f023 0210 	bic.w	r2, r3, #16
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	031b      	lsls	r3, r3, #12
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006916:	b480      	push	{r7}
 8006918:	b085      	sub	sp, #20
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	f043 0307 	orr.w	r3, r3, #7
 8006938:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	609a      	str	r2, [r3, #8]
}
 8006940:	bf00      	nop
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	021a      	lsls	r2, r3, #8
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	431a      	orrs	r2, r3
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4313      	orrs	r3, r2
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	609a      	str	r2, [r3, #8]
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f003 031f 	and.w	r3, r3, #31
 800699e:	2201      	movs	r2, #1
 80069a0:	fa02 f303 	lsl.w	r3, r2, r3
 80069a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a1a      	ldr	r2, [r3, #32]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	43db      	mvns	r3, r3
 80069ae:	401a      	ands	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a1a      	ldr	r2, [r3, #32]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	fa01 f303 	lsl.w	r3, r1, r3
 80069c4:	431a      	orrs	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	621a      	str	r2, [r3, #32]
}
 80069ca:	bf00      	nop
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
	...

080069d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e050      	b.n	8006a92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1c      	ldr	r2, [pc, #112]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d018      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3c:	d013      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a18      	ldr	r2, [pc, #96]	; (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00e      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a16      	ldr	r2, [pc, #88]	; (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d009      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a15      	ldr	r2, [pc, #84]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d004      	beq.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a13      	ldr	r2, [pc, #76]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d10c      	bne.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	40010000 	.word	0x40010000
 8006aa4:	40000400 	.word	0x40000400
 8006aa8:	40000800 	.word	0x40000800
 8006aac:	40000c00 	.word	0x40000c00
 8006ab0:	40014000 	.word	0x40014000

08006ab4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e03d      	b.n	8006b4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e03f      	b.n	8006bea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fb f8e6 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2224      	movs	r2, #36	; 0x24
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fcdf 	bl	8007560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695a      	ldr	r2, [r3, #20]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d11d      	bne.n	8006c48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <HAL_UART_Receive_IT+0x26>
 8006c12:	88fb      	ldrh	r3, [r7, #6]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e016      	b.n	8006c4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <HAL_UART_Receive_IT+0x38>
 8006c26:	2302      	movs	r3, #2
 8006c28:	e00f      	b.n	8006c4a <HAL_UART_Receive_IT+0x58>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c38:	88fb      	ldrh	r3, [r7, #6]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 fab6 	bl	80071b0 <UART_Start_Receive_IT>
 8006c44:	4603      	mov	r3, r0
 8006c46:	e000      	b.n	8006c4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c48:	2302      	movs	r3, #2
  }
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b0ba      	sub	sp, #232	; 0xe8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10f      	bne.n	8006cba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9e:	f003 0320 	and.w	r3, r3, #32
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d009      	beq.n	8006cba <HAL_UART_IRQHandler+0x66>
 8006ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fb99 	bl	80073ea <UART_Receive_IT>
      return;
 8006cb8:	e256      	b.n	8007168 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 80de 	beq.w	8006e80 <HAL_UART_IRQHandler+0x22c>
 8006cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d106      	bne.n	8006cde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 80d1 	beq.w	8006e80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <HAL_UART_IRQHandler+0xae>
 8006cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f043 0201 	orr.w	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00b      	beq.n	8006d26 <HAL_UART_IRQHandler+0xd2>
 8006d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	f043 0202 	orr.w	r2, r3, #2
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00b      	beq.n	8006d4a <HAL_UART_IRQHandler+0xf6>
 8006d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	f043 0204 	orr.w	r2, r3, #4
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4e:	f003 0308 	and.w	r3, r3, #8
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d011      	beq.n	8006d7a <HAL_UART_IRQHandler+0x126>
 8006d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d105      	bne.n	8006d6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	f043 0208 	orr.w	r2, r3, #8
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 81ed 	beq.w	800715e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d88:	f003 0320 	and.w	r3, r3, #32
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d008      	beq.n	8006da2 <HAL_UART_IRQHandler+0x14e>
 8006d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d94:	f003 0320 	and.w	r3, r3, #32
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fb24 	bl	80073ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dac:	2b40      	cmp	r3, #64	; 0x40
 8006dae:	bf0c      	ite	eq
 8006db0:	2301      	moveq	r3, #1
 8006db2:	2300      	movne	r3, #0
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <HAL_UART_IRQHandler+0x17a>
 8006dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d04f      	beq.n	8006e6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fa2c 	bl	800722c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d141      	bne.n	8006e66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3314      	adds	r3, #20
 8006de8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3314      	adds	r3, #20
 8006e0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1d9      	bne.n	8006de2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d013      	beq.n	8006e5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	4a7d      	ldr	r2, [pc, #500]	; (8007030 <HAL_UART_IRQHandler+0x3dc>)
 8006e3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fb ffcd 	bl	8002de2 <HAL_DMA_Abort_IT>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d016      	beq.n	8006e7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5c:	e00e      	b.n	8006e7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f990 	bl	8007184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e64:	e00a      	b.n	8006e7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f98c 	bl	8007184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e6c:	e006      	b.n	8006e7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f988 	bl	8007184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006e7a:	e170      	b.n	800715e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7c:	bf00      	nop
    return;
 8006e7e:	e16e      	b.n	800715e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	f040 814a 	bne.w	800711e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8e:	f003 0310 	and.w	r3, r3, #16
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8143 	beq.w	800711e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 813c 	beq.w	800711e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60bb      	str	r3, [r7, #8]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	60bb      	str	r3, [r7, #8]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	60bb      	str	r3, [r7, #8]
 8006eba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec6:	2b40      	cmp	r3, #64	; 0x40
 8006ec8:	f040 80b4 	bne.w	8007034 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ed8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8140 	beq.w	8007162 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eea:	429a      	cmp	r2, r3
 8006eec:	f080 8139 	bcs.w	8007162 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ef6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f02:	f000 8088 	beq.w	8007016 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	330c      	adds	r3, #12
 8006f0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1d9      	bne.n	8006f06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3314      	adds	r3, #20
 8006f58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f64:	f023 0301 	bic.w	r3, r3, #1
 8006f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3314      	adds	r3, #20
 8006f72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e1      	bne.n	8006f52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3314      	adds	r3, #20
 8006f94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3314      	adds	r3, #20
 8006fae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e3      	bne.n	8006f8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	330c      	adds	r3, #12
 8006fda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe6:	f023 0310 	bic.w	r3, r3, #16
 8006fea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	330c      	adds	r3, #12
 8006ff4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ff8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ffa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ffe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e3      	bne.n	8006fd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	4618      	mov	r0, r3
 8007012:	f7fb fe76 	bl	8002d02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800701e:	b29b      	uxth	r3, r3
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	b29b      	uxth	r3, r3
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f8b6 	bl	8007198 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800702c:	e099      	b.n	8007162 <HAL_UART_IRQHandler+0x50e>
 800702e:	bf00      	nop
 8007030:	080072f3 	.word	0x080072f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800703c:	b29b      	uxth	r3, r3
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 808b 	beq.w	8007166 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 8086 	beq.w	8007166 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	330c      	adds	r3, #12
 8007060:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800706a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007070:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	330c      	adds	r3, #12
 800707a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800707e:	647a      	str	r2, [r7, #68]	; 0x44
 8007080:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800708c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e3      	bne.n	800705a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3314      	adds	r3, #20
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	623b      	str	r3, [r7, #32]
   return(result);
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	f023 0301 	bic.w	r3, r3, #1
 80070a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3314      	adds	r3, #20
 80070b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070b6:	633a      	str	r2, [r7, #48]	; 0x30
 80070b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e3      	bne.n	8007092 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	330c      	adds	r3, #12
 80070de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0310 	bic.w	r3, r3, #16
 80070ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	330c      	adds	r3, #12
 80070f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80070fc:	61fa      	str	r2, [r7, #28]
 80070fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	69b9      	ldr	r1, [r7, #24]
 8007102:	69fa      	ldr	r2, [r7, #28]
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	617b      	str	r3, [r7, #20]
   return(result);
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e3      	bne.n	80070d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f83e 	bl	8007198 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800711c:	e023      	b.n	8007166 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007126:	2b00      	cmp	r3, #0
 8007128:	d009      	beq.n	800713e <HAL_UART_IRQHandler+0x4ea>
 800712a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f8ef 	bl	800731a <UART_Transmit_IT>
    return;
 800713c:	e014      	b.n	8007168 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00e      	beq.n	8007168 <HAL_UART_IRQHandler+0x514>
 800714a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800714e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007152:	2b00      	cmp	r3, #0
 8007154:	d008      	beq.n	8007168 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f92f 	bl	80073ba <UART_EndTransmit_IT>
    return;
 800715c:	e004      	b.n	8007168 <HAL_UART_IRQHandler+0x514>
    return;
 800715e:	bf00      	nop
 8007160:	e002      	b.n	8007168 <HAL_UART_IRQHandler+0x514>
      return;
 8007162:	bf00      	nop
 8007164:	e000      	b.n	8007168 <HAL_UART_IRQHandler+0x514>
      return;
 8007166:	bf00      	nop
  }
}
 8007168:	37e8      	adds	r7, #232	; 0xe8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop

08007170 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	4613      	mov	r3, r2
 80071bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	88fa      	ldrh	r2, [r7, #6]
 80071c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	88fa      	ldrh	r2, [r7, #6]
 80071ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2222      	movs	r2, #34	; 0x22
 80071da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d007      	beq.n	80071fe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	695a      	ldr	r2, [r3, #20]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0201 	orr.w	r2, r2, #1
 800720c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68da      	ldr	r2, [r3, #12]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0220 	orr.w	r2, r2, #32
 800721c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800722c:	b480      	push	{r7}
 800722e:	b095      	sub	sp, #84	; 0x54
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	330c      	adds	r3, #12
 800723a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800724a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007254:	643a      	str	r2, [r7, #64]	; 0x40
 8007256:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800725a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e5      	bne.n	8007234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3314      	adds	r3, #20
 800726e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	61fb      	str	r3, [r7, #28]
   return(result);
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	f023 0301 	bic.w	r3, r3, #1
 800727e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3314      	adds	r3, #20
 8007286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007288:	62fa      	str	r2, [r7, #44]	; 0x2c
 800728a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800728e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e5      	bne.n	8007268 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d119      	bne.n	80072d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	330c      	adds	r3, #12
 80072aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	e853 3f00 	ldrex	r3, [r3]
 80072b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f023 0310 	bic.w	r3, r3, #16
 80072ba:	647b      	str	r3, [r7, #68]	; 0x44
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	330c      	adds	r3, #12
 80072c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072c4:	61ba      	str	r2, [r7, #24]
 80072c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c8:	6979      	ldr	r1, [r7, #20]
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	e841 2300 	strex	r3, r2, [r1]
 80072d0:	613b      	str	r3, [r7, #16]
   return(result);
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1e5      	bne.n	80072a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2220      	movs	r2, #32
 80072dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80072e6:	bf00      	nop
 80072e8:	3754      	adds	r7, #84	; 0x54
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7ff ff39 	bl	8007184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007312:	bf00      	nop
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800731a:	b480      	push	{r7}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b21      	cmp	r3, #33	; 0x21
 800732c:	d13e      	bne.n	80073ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007336:	d114      	bne.n	8007362 <UART_Transmit_IT+0x48>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d110      	bne.n	8007362 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007354:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	1c9a      	adds	r2, r3, #2
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	621a      	str	r2, [r3, #32]
 8007360:	e008      	b.n	8007374 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	1c59      	adds	r1, r3, #1
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6211      	str	r1, [r2, #32]
 800736c:	781a      	ldrb	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29b      	uxth	r3, r3
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	4619      	mov	r1, r3
 8007382:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10f      	bne.n	80073a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007396:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	e000      	b.n	80073ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073ac:	2302      	movs	r3, #2
  }
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2220      	movs	r2, #32
 80073d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff fec8 	bl	8007170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b08c      	sub	sp, #48	; 0x30
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b22      	cmp	r3, #34	; 0x22
 80073fc:	f040 80ab 	bne.w	8007556 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007408:	d117      	bne.n	800743a <UART_Receive_IT+0x50>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d113      	bne.n	800743a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007412:	2300      	movs	r3, #0
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	b29b      	uxth	r3, r3
 8007424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007428:	b29a      	uxth	r2, r3
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	1c9a      	adds	r2, r3, #2
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	629a      	str	r2, [r3, #40]	; 0x28
 8007438:	e026      	b.n	8007488 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007440:	2300      	movs	r3, #0
 8007442:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744c:	d007      	beq.n	800745e <UART_Receive_IT+0x74>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10a      	bne.n	800746c <UART_Receive_IT+0x82>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d106      	bne.n	800746c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	b2da      	uxtb	r2, r3
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	e008      	b.n	800747e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007478:	b2da      	uxtb	r2, r3
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800748c:	b29b      	uxth	r3, r3
 800748e:	3b01      	subs	r3, #1
 8007490:	b29b      	uxth	r3, r3
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	4619      	mov	r1, r3
 8007496:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007498:	2b00      	cmp	r3, #0
 800749a:	d15a      	bne.n	8007552 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0220 	bic.w	r2, r2, #32
 80074aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695a      	ldr	r2, [r3, #20]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0201 	bic.w	r2, r2, #1
 80074ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d135      	bne.n	8007548 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	330c      	adds	r3, #12
 80074e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	613b      	str	r3, [r7, #16]
   return(result);
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f023 0310 	bic.w	r3, r3, #16
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	330c      	adds	r3, #12
 8007500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007502:	623a      	str	r2, [r7, #32]
 8007504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	69f9      	ldr	r1, [r7, #28]
 8007508:	6a3a      	ldr	r2, [r7, #32]
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e5      	bne.n	80074e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0310 	and.w	r3, r3, #16
 8007520:	2b10      	cmp	r3, #16
 8007522:	d10a      	bne.n	800753a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff fe29 	bl	8007198 <HAL_UARTEx_RxEventCallback>
 8007546:	e002      	b.n	800754e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7f9 fec5 	bl	80012d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	e002      	b.n	8007558 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	e000      	b.n	8007558 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007556:	2302      	movs	r3, #2
  }
}
 8007558:	4618      	mov	r0, r3
 800755a:	3730      	adds	r7, #48	; 0x30
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007564:	b0c0      	sub	sp, #256	; 0x100
 8007566:	af00      	add	r7, sp, #0
 8007568:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800756c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757c:	68d9      	ldr	r1, [r3, #12]
 800757e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	ea40 0301 	orr.w	r3, r0, r1
 8007588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800758a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	431a      	orrs	r2, r3
 8007598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	431a      	orrs	r2, r3
 80075a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80075ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075b8:	f021 010c 	bic.w	r1, r1, #12
 80075bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075c6:	430b      	orrs	r3, r1
 80075c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075da:	6999      	ldr	r1, [r3, #24]
 80075dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	ea40 0301 	orr.w	r3, r0, r1
 80075e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4b8f      	ldr	r3, [pc, #572]	; (800782c <UART_SetConfig+0x2cc>)
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d005      	beq.n	8007600 <UART_SetConfig+0xa0>
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	4b8d      	ldr	r3, [pc, #564]	; (8007830 <UART_SetConfig+0x2d0>)
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d104      	bne.n	800760a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007600:	f7fe fbce 	bl	8005da0 <HAL_RCC_GetPCLK2Freq>
 8007604:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007608:	e003      	b.n	8007612 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800760a:	f7fe fbb5 	bl	8005d78 <HAL_RCC_GetPCLK1Freq>
 800760e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800761c:	f040 810c 	bne.w	8007838 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007624:	2200      	movs	r2, #0
 8007626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800762a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800762e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007632:	4622      	mov	r2, r4
 8007634:	462b      	mov	r3, r5
 8007636:	1891      	adds	r1, r2, r2
 8007638:	65b9      	str	r1, [r7, #88]	; 0x58
 800763a:	415b      	adcs	r3, r3
 800763c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800763e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007642:	4621      	mov	r1, r4
 8007644:	eb12 0801 	adds.w	r8, r2, r1
 8007648:	4629      	mov	r1, r5
 800764a:	eb43 0901 	adc.w	r9, r3, r1
 800764e:	f04f 0200 	mov.w	r2, #0
 8007652:	f04f 0300 	mov.w	r3, #0
 8007656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800765a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800765e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007662:	4690      	mov	r8, r2
 8007664:	4699      	mov	r9, r3
 8007666:	4623      	mov	r3, r4
 8007668:	eb18 0303 	adds.w	r3, r8, r3
 800766c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007670:	462b      	mov	r3, r5
 8007672:	eb49 0303 	adc.w	r3, r9, r3
 8007676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800767a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007686:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800768a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800768e:	460b      	mov	r3, r1
 8007690:	18db      	adds	r3, r3, r3
 8007692:	653b      	str	r3, [r7, #80]	; 0x50
 8007694:	4613      	mov	r3, r2
 8007696:	eb42 0303 	adc.w	r3, r2, r3
 800769a:	657b      	str	r3, [r7, #84]	; 0x54
 800769c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076a4:	f7f8 fdf4 	bl	8000290 <__aeabi_uldivmod>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4b61      	ldr	r3, [pc, #388]	; (8007834 <UART_SetConfig+0x2d4>)
 80076ae:	fba3 2302 	umull	r2, r3, r3, r2
 80076b2:	095b      	lsrs	r3, r3, #5
 80076b4:	011c      	lsls	r4, r3, #4
 80076b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076ba:	2200      	movs	r2, #0
 80076bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80076c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80076c8:	4642      	mov	r2, r8
 80076ca:	464b      	mov	r3, r9
 80076cc:	1891      	adds	r1, r2, r2
 80076ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80076d0:	415b      	adcs	r3, r3
 80076d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80076d8:	4641      	mov	r1, r8
 80076da:	eb12 0a01 	adds.w	sl, r2, r1
 80076de:	4649      	mov	r1, r9
 80076e0:	eb43 0b01 	adc.w	fp, r3, r1
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	f04f 0300 	mov.w	r3, #0
 80076ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80076f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80076f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076f8:	4692      	mov	sl, r2
 80076fa:	469b      	mov	fp, r3
 80076fc:	4643      	mov	r3, r8
 80076fe:	eb1a 0303 	adds.w	r3, sl, r3
 8007702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007706:	464b      	mov	r3, r9
 8007708:	eb4b 0303 	adc.w	r3, fp, r3
 800770c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800771c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007724:	460b      	mov	r3, r1
 8007726:	18db      	adds	r3, r3, r3
 8007728:	643b      	str	r3, [r7, #64]	; 0x40
 800772a:	4613      	mov	r3, r2
 800772c:	eb42 0303 	adc.w	r3, r2, r3
 8007730:	647b      	str	r3, [r7, #68]	; 0x44
 8007732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800773a:	f7f8 fda9 	bl	8000290 <__aeabi_uldivmod>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	4611      	mov	r1, r2
 8007744:	4b3b      	ldr	r3, [pc, #236]	; (8007834 <UART_SetConfig+0x2d4>)
 8007746:	fba3 2301 	umull	r2, r3, r3, r1
 800774a:	095b      	lsrs	r3, r3, #5
 800774c:	2264      	movs	r2, #100	; 0x64
 800774e:	fb02 f303 	mul.w	r3, r2, r3
 8007752:	1acb      	subs	r3, r1, r3
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800775a:	4b36      	ldr	r3, [pc, #216]	; (8007834 <UART_SetConfig+0x2d4>)
 800775c:	fba3 2302 	umull	r2, r3, r3, r2
 8007760:	095b      	lsrs	r3, r3, #5
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007768:	441c      	add	r4, r3
 800776a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800776e:	2200      	movs	r2, #0
 8007770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007774:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800777c:	4642      	mov	r2, r8
 800777e:	464b      	mov	r3, r9
 8007780:	1891      	adds	r1, r2, r2
 8007782:	63b9      	str	r1, [r7, #56]	; 0x38
 8007784:	415b      	adcs	r3, r3
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800778c:	4641      	mov	r1, r8
 800778e:	1851      	adds	r1, r2, r1
 8007790:	6339      	str	r1, [r7, #48]	; 0x30
 8007792:	4649      	mov	r1, r9
 8007794:	414b      	adcs	r3, r1
 8007796:	637b      	str	r3, [r7, #52]	; 0x34
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	f04f 0300 	mov.w	r3, #0
 80077a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80077a4:	4659      	mov	r1, fp
 80077a6:	00cb      	lsls	r3, r1, #3
 80077a8:	4651      	mov	r1, sl
 80077aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077ae:	4651      	mov	r1, sl
 80077b0:	00ca      	lsls	r2, r1, #3
 80077b2:	4610      	mov	r0, r2
 80077b4:	4619      	mov	r1, r3
 80077b6:	4603      	mov	r3, r0
 80077b8:	4642      	mov	r2, r8
 80077ba:	189b      	adds	r3, r3, r2
 80077bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077c0:	464b      	mov	r3, r9
 80077c2:	460a      	mov	r2, r1
 80077c4:	eb42 0303 	adc.w	r3, r2, r3
 80077c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80077dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80077e0:	460b      	mov	r3, r1
 80077e2:	18db      	adds	r3, r3, r3
 80077e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80077e6:	4613      	mov	r3, r2
 80077e8:	eb42 0303 	adc.w	r3, r2, r3
 80077ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80077f6:	f7f8 fd4b 	bl	8000290 <__aeabi_uldivmod>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <UART_SetConfig+0x2d4>)
 8007800:	fba3 1302 	umull	r1, r3, r3, r2
 8007804:	095b      	lsrs	r3, r3, #5
 8007806:	2164      	movs	r1, #100	; 0x64
 8007808:	fb01 f303 	mul.w	r3, r1, r3
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	3332      	adds	r3, #50	; 0x32
 8007812:	4a08      	ldr	r2, [pc, #32]	; (8007834 <UART_SetConfig+0x2d4>)
 8007814:	fba2 2303 	umull	r2, r3, r2, r3
 8007818:	095b      	lsrs	r3, r3, #5
 800781a:	f003 0207 	and.w	r2, r3, #7
 800781e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4422      	add	r2, r4
 8007826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007828:	e105      	b.n	8007a36 <UART_SetConfig+0x4d6>
 800782a:	bf00      	nop
 800782c:	40011000 	.word	0x40011000
 8007830:	40011400 	.word	0x40011400
 8007834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800783c:	2200      	movs	r2, #0
 800783e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007842:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800784a:	4642      	mov	r2, r8
 800784c:	464b      	mov	r3, r9
 800784e:	1891      	adds	r1, r2, r2
 8007850:	6239      	str	r1, [r7, #32]
 8007852:	415b      	adcs	r3, r3
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
 8007856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800785a:	4641      	mov	r1, r8
 800785c:	1854      	adds	r4, r2, r1
 800785e:	4649      	mov	r1, r9
 8007860:	eb43 0501 	adc.w	r5, r3, r1
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	00eb      	lsls	r3, r5, #3
 800786e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007872:	00e2      	lsls	r2, r4, #3
 8007874:	4614      	mov	r4, r2
 8007876:	461d      	mov	r5, r3
 8007878:	4643      	mov	r3, r8
 800787a:	18e3      	adds	r3, r4, r3
 800787c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007880:	464b      	mov	r3, r9
 8007882:	eb45 0303 	adc.w	r3, r5, r3
 8007886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800788a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800789a:	f04f 0200 	mov.w	r2, #0
 800789e:	f04f 0300 	mov.w	r3, #0
 80078a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80078a6:	4629      	mov	r1, r5
 80078a8:	008b      	lsls	r3, r1, #2
 80078aa:	4621      	mov	r1, r4
 80078ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078b0:	4621      	mov	r1, r4
 80078b2:	008a      	lsls	r2, r1, #2
 80078b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80078b8:	f7f8 fcea 	bl	8000290 <__aeabi_uldivmod>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4b60      	ldr	r3, [pc, #384]	; (8007a44 <UART_SetConfig+0x4e4>)
 80078c2:	fba3 2302 	umull	r2, r3, r3, r2
 80078c6:	095b      	lsrs	r3, r3, #5
 80078c8:	011c      	lsls	r4, r3, #4
 80078ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80078d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80078dc:	4642      	mov	r2, r8
 80078de:	464b      	mov	r3, r9
 80078e0:	1891      	adds	r1, r2, r2
 80078e2:	61b9      	str	r1, [r7, #24]
 80078e4:	415b      	adcs	r3, r3
 80078e6:	61fb      	str	r3, [r7, #28]
 80078e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078ec:	4641      	mov	r1, r8
 80078ee:	1851      	adds	r1, r2, r1
 80078f0:	6139      	str	r1, [r7, #16]
 80078f2:	4649      	mov	r1, r9
 80078f4:	414b      	adcs	r3, r1
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	f04f 0200 	mov.w	r2, #0
 80078fc:	f04f 0300 	mov.w	r3, #0
 8007900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007904:	4659      	mov	r1, fp
 8007906:	00cb      	lsls	r3, r1, #3
 8007908:	4651      	mov	r1, sl
 800790a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800790e:	4651      	mov	r1, sl
 8007910:	00ca      	lsls	r2, r1, #3
 8007912:	4610      	mov	r0, r2
 8007914:	4619      	mov	r1, r3
 8007916:	4603      	mov	r3, r0
 8007918:	4642      	mov	r2, r8
 800791a:	189b      	adds	r3, r3, r2
 800791c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007920:	464b      	mov	r3, r9
 8007922:	460a      	mov	r2, r1
 8007924:	eb42 0303 	adc.w	r3, r2, r3
 8007928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800792c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	67bb      	str	r3, [r7, #120]	; 0x78
 8007936:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007938:	f04f 0200 	mov.w	r2, #0
 800793c:	f04f 0300 	mov.w	r3, #0
 8007940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007944:	4649      	mov	r1, r9
 8007946:	008b      	lsls	r3, r1, #2
 8007948:	4641      	mov	r1, r8
 800794a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800794e:	4641      	mov	r1, r8
 8007950:	008a      	lsls	r2, r1, #2
 8007952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007956:	f7f8 fc9b 	bl	8000290 <__aeabi_uldivmod>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	4b39      	ldr	r3, [pc, #228]	; (8007a44 <UART_SetConfig+0x4e4>)
 8007960:	fba3 1302 	umull	r1, r3, r3, r2
 8007964:	095b      	lsrs	r3, r3, #5
 8007966:	2164      	movs	r1, #100	; 0x64
 8007968:	fb01 f303 	mul.w	r3, r1, r3
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	011b      	lsls	r3, r3, #4
 8007970:	3332      	adds	r3, #50	; 0x32
 8007972:	4a34      	ldr	r2, [pc, #208]	; (8007a44 <UART_SetConfig+0x4e4>)
 8007974:	fba2 2303 	umull	r2, r3, r2, r3
 8007978:	095b      	lsrs	r3, r3, #5
 800797a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800797e:	441c      	add	r4, r3
 8007980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007984:	2200      	movs	r2, #0
 8007986:	673b      	str	r3, [r7, #112]	; 0x70
 8007988:	677a      	str	r2, [r7, #116]	; 0x74
 800798a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800798e:	4642      	mov	r2, r8
 8007990:	464b      	mov	r3, r9
 8007992:	1891      	adds	r1, r2, r2
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	415b      	adcs	r3, r3
 8007998:	60fb      	str	r3, [r7, #12]
 800799a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800799e:	4641      	mov	r1, r8
 80079a0:	1851      	adds	r1, r2, r1
 80079a2:	6039      	str	r1, [r7, #0]
 80079a4:	4649      	mov	r1, r9
 80079a6:	414b      	adcs	r3, r1
 80079a8:	607b      	str	r3, [r7, #4]
 80079aa:	f04f 0200 	mov.w	r2, #0
 80079ae:	f04f 0300 	mov.w	r3, #0
 80079b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80079b6:	4659      	mov	r1, fp
 80079b8:	00cb      	lsls	r3, r1, #3
 80079ba:	4651      	mov	r1, sl
 80079bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079c0:	4651      	mov	r1, sl
 80079c2:	00ca      	lsls	r2, r1, #3
 80079c4:	4610      	mov	r0, r2
 80079c6:	4619      	mov	r1, r3
 80079c8:	4603      	mov	r3, r0
 80079ca:	4642      	mov	r2, r8
 80079cc:	189b      	adds	r3, r3, r2
 80079ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80079d0:	464b      	mov	r3, r9
 80079d2:	460a      	mov	r2, r1
 80079d4:	eb42 0303 	adc.w	r3, r2, r3
 80079d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	663b      	str	r3, [r7, #96]	; 0x60
 80079e4:	667a      	str	r2, [r7, #100]	; 0x64
 80079e6:	f04f 0200 	mov.w	r2, #0
 80079ea:	f04f 0300 	mov.w	r3, #0
 80079ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80079f2:	4649      	mov	r1, r9
 80079f4:	008b      	lsls	r3, r1, #2
 80079f6:	4641      	mov	r1, r8
 80079f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079fc:	4641      	mov	r1, r8
 80079fe:	008a      	lsls	r2, r1, #2
 8007a00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a04:	f7f8 fc44 	bl	8000290 <__aeabi_uldivmod>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <UART_SetConfig+0x4e4>)
 8007a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8007a12:	095b      	lsrs	r3, r3, #5
 8007a14:	2164      	movs	r1, #100	; 0x64
 8007a16:	fb01 f303 	mul.w	r3, r1, r3
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	3332      	adds	r3, #50	; 0x32
 8007a20:	4a08      	ldr	r2, [pc, #32]	; (8007a44 <UART_SetConfig+0x4e4>)
 8007a22:	fba2 2303 	umull	r2, r3, r2, r3
 8007a26:	095b      	lsrs	r3, r3, #5
 8007a28:	f003 020f 	and.w	r2, r3, #15
 8007a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4422      	add	r2, r4
 8007a34:	609a      	str	r2, [r3, #8]
}
 8007a36:	bf00      	nop
 8007a38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a42:	bf00      	nop
 8007a44:	51eb851f 	.word	0x51eb851f

08007a48 <_ZNSaIcEC1Ev>:
 8007a48:	4770      	bx	lr

08007a4a <_ZNSaIcED1Ev>:
 8007a4a:	4770      	bx	lr

08007a4c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8007a4c:	b10a      	cbz	r2, 8007a52 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8007a4e:	f000 b90d 	b.w	8007c6c <memcpy>
 8007a52:	4770      	bx	lr

08007a54 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8007a54:	b10a      	cbz	r2, 8007a5a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8007a56:	f000 b8f9 	b.w	8007c4c <memcmp>
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	4770      	bx	lr
	...

08007a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8007a60:	b508      	push	{r3, lr}
 8007a62:	680b      	ldr	r3, [r1, #0]
 8007a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a68:	d302      	bcc.n	8007a70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8007a6a:	480d      	ldr	r0, [pc, #52]	; (8007aa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8007a6c:	f000 f8a0 	bl	8007bb0 <_ZSt20__throw_length_errorPKc>
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d90b      	bls.n	8007a8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8007a74:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8007a78:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8007a7c:	d206      	bcs.n	8007a8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8007a7e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007a82:	bf2a      	itet	cs
 8007a84:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8007a88:	6008      	strcc	r0, [r1, #0]
 8007a8a:	600b      	strcs	r3, [r1, #0]
 8007a8c:	6808      	ldr	r0, [r1, #0]
 8007a8e:	3001      	adds	r0, #1
 8007a90:	d501      	bpl.n	8007a96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8007a92:	f000 f887 	bl	8007ba4 <_ZSt17__throw_bad_allocv>
 8007a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a9a:	f000 b872 	b.w	8007b82 <_Znwj>
 8007a9e:	bf00      	nop
 8007aa0:	080087b4 	.word	0x080087b4

08007aa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8007aa4:	f850 3b08 	ldr.w	r3, [r0], #8
 8007aa8:	4283      	cmp	r3, r0
 8007aaa:	d002      	beq.n	8007ab2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 b866 	b.w	8007b7e <_ZdlPv>
 8007ab2:	4770      	bx	lr

08007ab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8007ab4:	2a01      	cmp	r2, #1
 8007ab6:	b410      	push	{r4}
 8007ab8:	d104      	bne.n	8007ac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8007aba:	780a      	ldrb	r2, [r1, #0]
 8007abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ac0:	7002      	strb	r2, [r0, #0]
 8007ac2:	4770      	bx	lr
 8007ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ac8:	f7ff bfc0 	b.w	8007a4c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08007acc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8007acc:	b508      	push	{r3, lr}
 8007ace:	1a52      	subs	r2, r2, r1
 8007ad0:	f7ff fff0 	bl	8007ab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007ad4:	bd08      	pop	{r3, pc}

08007ad6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8007ad6:	b510      	push	{r4, lr}
 8007ad8:	4604      	mov	r4, r0
 8007ada:	f7ff ffe3 	bl	8007aa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007ade:	4620      	mov	r0, r4
 8007ae0:	bd10      	pop	{r4, pc}

08007ae2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8007ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ae4:	6846      	ldr	r6, [r0, #4]
 8007ae6:	9101      	str	r1, [sp, #4]
 8007ae8:	4605      	mov	r5, r0
 8007aea:	4608      	mov	r0, r1
 8007aec:	f7f8 fbc8 	bl	8000280 <strlen>
 8007af0:	4286      	cmp	r6, r0
 8007af2:	4604      	mov	r4, r0
 8007af4:	4632      	mov	r2, r6
 8007af6:	9901      	ldr	r1, [sp, #4]
 8007af8:	bf28      	it	cs
 8007afa:	4602      	movcs	r2, r0
 8007afc:	6828      	ldr	r0, [r5, #0]
 8007afe:	f7ff ffa9 	bl	8007a54 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8007b02:	b900      	cbnz	r0, 8007b06 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8007b04:	1b30      	subs	r0, r6, r4
 8007b06:	b002      	add	sp, #8
 8007b08:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8007b0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4616      	mov	r6, r2
 8007b12:	460d      	mov	r5, r1
 8007b14:	b919      	cbnz	r1, 8007b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8007b16:	b112      	cbz	r2, 8007b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8007b18:	480d      	ldr	r0, [pc, #52]	; (8007b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8007b1a:	f000 f846 	bl	8007baa <_ZSt19__throw_logic_errorPKc>
 8007b1e:	1b73      	subs	r3, r6, r5
 8007b20:	2b0f      	cmp	r3, #15
 8007b22:	9301      	str	r3, [sp, #4]
 8007b24:	d907      	bls.n	8007b36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8007b26:	2200      	movs	r2, #0
 8007b28:	a901      	add	r1, sp, #4
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f7ff ff98 	bl	8007a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007b30:	9b01      	ldr	r3, [sp, #4]
 8007b32:	6020      	str	r0, [r4, #0]
 8007b34:	60a3      	str	r3, [r4, #8]
 8007b36:	4632      	mov	r2, r6
 8007b38:	4629      	mov	r1, r5
 8007b3a:	6820      	ldr	r0, [r4, #0]
 8007b3c:	f7ff ffc6 	bl	8007acc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8007b40:	9b01      	ldr	r3, [sp, #4]
 8007b42:	6822      	ldr	r2, [r4, #0]
 8007b44:	6063      	str	r3, [r4, #4]
 8007b46:	2100      	movs	r1, #0
 8007b48:	54d1      	strb	r1, [r2, r3]
 8007b4a:	b002      	add	sp, #8
 8007b4c:	bd70      	pop	{r4, r5, r6, pc}
 8007b4e:	bf00      	nop
 8007b50:	080087cc 	.word	0x080087cc

08007b54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	f100 0308 	add.w	r3, r0, #8
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	6003      	str	r3, [r0, #0]
 8007b5e:	460d      	mov	r5, r1
 8007b60:	b159      	cbz	r1, 8007b7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8007b62:	4608      	mov	r0, r1
 8007b64:	f7f8 fb8c 	bl	8000280 <strlen>
 8007b68:	182a      	adds	r2, r5, r0
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f04f 0300 	mov.w	r3, #0
 8007b70:	4629      	mov	r1, r5
 8007b72:	f7ff ffcb 	bl	8007b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007b76:	4620      	mov	r0, r4
 8007b78:	bd38      	pop	{r3, r4, r5, pc}
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	e7f5      	b.n	8007b6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08007b7e <_ZdlPv>:
 8007b7e:	f000 b85d 	b.w	8007c3c <free>

08007b82 <_Znwj>:
 8007b82:	2801      	cmp	r0, #1
 8007b84:	bf38      	it	cc
 8007b86:	2001      	movcc	r0, #1
 8007b88:	b510      	push	{r4, lr}
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 f84d 	bl	8007c2c <malloc>
 8007b92:	b930      	cbnz	r0, 8007ba2 <_Znwj+0x20>
 8007b94:	f000 f810 	bl	8007bb8 <_ZSt15get_new_handlerv>
 8007b98:	b908      	cbnz	r0, 8007b9e <_Znwj+0x1c>
 8007b9a:	f000 f815 	bl	8007bc8 <abort>
 8007b9e:	4780      	blx	r0
 8007ba0:	e7f4      	b.n	8007b8c <_Znwj+0xa>
 8007ba2:	bd10      	pop	{r4, pc}

08007ba4 <_ZSt17__throw_bad_allocv>:
 8007ba4:	b508      	push	{r3, lr}
 8007ba6:	f000 f80f 	bl	8007bc8 <abort>

08007baa <_ZSt19__throw_logic_errorPKc>:
 8007baa:	b508      	push	{r3, lr}
 8007bac:	f000 f80c 	bl	8007bc8 <abort>

08007bb0 <_ZSt20__throw_length_errorPKc>:
 8007bb0:	b508      	push	{r3, lr}
 8007bb2:	f000 f809 	bl	8007bc8 <abort>
	...

08007bb8 <_ZSt15get_new_handlerv>:
 8007bb8:	4b02      	ldr	r3, [pc, #8]	; (8007bc4 <_ZSt15get_new_handlerv+0xc>)
 8007bba:	6818      	ldr	r0, [r3, #0]
 8007bbc:	f3bf 8f5b 	dmb	ish
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	200003c0 	.word	0x200003c0

08007bc8 <abort>:
 8007bc8:	b508      	push	{r3, lr}
 8007bca:	2006      	movs	r0, #6
 8007bcc:	f000 f996 	bl	8007efc <raise>
 8007bd0:	2001      	movs	r0, #1
 8007bd2:	f7fa f97d 	bl	8001ed0 <_exit>
	...

08007bd8 <__errno>:
 8007bd8:	4b01      	ldr	r3, [pc, #4]	; (8007be0 <__errno+0x8>)
 8007bda:	6818      	ldr	r0, [r3, #0]
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	2000000c 	.word	0x2000000c

08007be4 <__libc_init_array>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	4d0d      	ldr	r5, [pc, #52]	; (8007c1c <__libc_init_array+0x38>)
 8007be8:	4c0d      	ldr	r4, [pc, #52]	; (8007c20 <__libc_init_array+0x3c>)
 8007bea:	1b64      	subs	r4, r4, r5
 8007bec:	10a4      	asrs	r4, r4, #2
 8007bee:	2600      	movs	r6, #0
 8007bf0:	42a6      	cmp	r6, r4
 8007bf2:	d109      	bne.n	8007c08 <__libc_init_array+0x24>
 8007bf4:	4d0b      	ldr	r5, [pc, #44]	; (8007c24 <__libc_init_array+0x40>)
 8007bf6:	4c0c      	ldr	r4, [pc, #48]	; (8007c28 <__libc_init_array+0x44>)
 8007bf8:	f000 fd7e 	bl	80086f8 <_init>
 8007bfc:	1b64      	subs	r4, r4, r5
 8007bfe:	10a4      	asrs	r4, r4, #2
 8007c00:	2600      	movs	r6, #0
 8007c02:	42a6      	cmp	r6, r4
 8007c04:	d105      	bne.n	8007c12 <__libc_init_array+0x2e>
 8007c06:	bd70      	pop	{r4, r5, r6, pc}
 8007c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0c:	4798      	blx	r3
 8007c0e:	3601      	adds	r6, #1
 8007c10:	e7ee      	b.n	8007bf0 <__libc_init_array+0xc>
 8007c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c16:	4798      	blx	r3
 8007c18:	3601      	adds	r6, #1
 8007c1a:	e7f2      	b.n	8007c02 <__libc_init_array+0x1e>
 8007c1c:	08008934 	.word	0x08008934
 8007c20:	08008934 	.word	0x08008934
 8007c24:	08008934 	.word	0x08008934
 8007c28:	0800893c 	.word	0x0800893c

08007c2c <malloc>:
 8007c2c:	4b02      	ldr	r3, [pc, #8]	; (8007c38 <malloc+0xc>)
 8007c2e:	4601      	mov	r1, r0
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	f000 b8b7 	b.w	8007da4 <_malloc_r>
 8007c36:	bf00      	nop
 8007c38:	2000000c 	.word	0x2000000c

08007c3c <free>:
 8007c3c:	4b02      	ldr	r3, [pc, #8]	; (8007c48 <free+0xc>)
 8007c3e:	4601      	mov	r1, r0
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	f000 b843 	b.w	8007ccc <_free_r>
 8007c46:	bf00      	nop
 8007c48:	2000000c 	.word	0x2000000c

08007c4c <memcmp>:
 8007c4c:	b510      	push	{r4, lr}
 8007c4e:	3901      	subs	r1, #1
 8007c50:	4402      	add	r2, r0
 8007c52:	4290      	cmp	r0, r2
 8007c54:	d101      	bne.n	8007c5a <memcmp+0xe>
 8007c56:	2000      	movs	r0, #0
 8007c58:	e005      	b.n	8007c66 <memcmp+0x1a>
 8007c5a:	7803      	ldrb	r3, [r0, #0]
 8007c5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c60:	42a3      	cmp	r3, r4
 8007c62:	d001      	beq.n	8007c68 <memcmp+0x1c>
 8007c64:	1b18      	subs	r0, r3, r4
 8007c66:	bd10      	pop	{r4, pc}
 8007c68:	3001      	adds	r0, #1
 8007c6a:	e7f2      	b.n	8007c52 <memcmp+0x6>

08007c6c <memcpy>:
 8007c6c:	440a      	add	r2, r1
 8007c6e:	4291      	cmp	r1, r2
 8007c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c74:	d100      	bne.n	8007c78 <memcpy+0xc>
 8007c76:	4770      	bx	lr
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c82:	4291      	cmp	r1, r2
 8007c84:	d1f9      	bne.n	8007c7a <memcpy+0xe>
 8007c86:	bd10      	pop	{r4, pc}

08007c88 <memmove>:
 8007c88:	4288      	cmp	r0, r1
 8007c8a:	b510      	push	{r4, lr}
 8007c8c:	eb01 0402 	add.w	r4, r1, r2
 8007c90:	d902      	bls.n	8007c98 <memmove+0x10>
 8007c92:	4284      	cmp	r4, r0
 8007c94:	4623      	mov	r3, r4
 8007c96:	d807      	bhi.n	8007ca8 <memmove+0x20>
 8007c98:	1e43      	subs	r3, r0, #1
 8007c9a:	42a1      	cmp	r1, r4
 8007c9c:	d008      	beq.n	8007cb0 <memmove+0x28>
 8007c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ca6:	e7f8      	b.n	8007c9a <memmove+0x12>
 8007ca8:	4402      	add	r2, r0
 8007caa:	4601      	mov	r1, r0
 8007cac:	428a      	cmp	r2, r1
 8007cae:	d100      	bne.n	8007cb2 <memmove+0x2a>
 8007cb0:	bd10      	pop	{r4, pc}
 8007cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cba:	e7f7      	b.n	8007cac <memmove+0x24>

08007cbc <memset>:
 8007cbc:	4402      	add	r2, r0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d100      	bne.n	8007cc6 <memset+0xa>
 8007cc4:	4770      	bx	lr
 8007cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8007cca:	e7f9      	b.n	8007cc0 <memset+0x4>

08007ccc <_free_r>:
 8007ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cce:	2900      	cmp	r1, #0
 8007cd0:	d044      	beq.n	8007d5c <_free_r+0x90>
 8007cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cd6:	9001      	str	r0, [sp, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f1a1 0404 	sub.w	r4, r1, #4
 8007cde:	bfb8      	it	lt
 8007ce0:	18e4      	addlt	r4, r4, r3
 8007ce2:	f000 f9d3 	bl	800808c <__malloc_lock>
 8007ce6:	4a1e      	ldr	r2, [pc, #120]	; (8007d60 <_free_r+0x94>)
 8007ce8:	9801      	ldr	r0, [sp, #4]
 8007cea:	6813      	ldr	r3, [r2, #0]
 8007cec:	b933      	cbnz	r3, 8007cfc <_free_r+0x30>
 8007cee:	6063      	str	r3, [r4, #4]
 8007cf0:	6014      	str	r4, [r2, #0]
 8007cf2:	b003      	add	sp, #12
 8007cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cf8:	f000 b9ce 	b.w	8008098 <__malloc_unlock>
 8007cfc:	42a3      	cmp	r3, r4
 8007cfe:	d908      	bls.n	8007d12 <_free_r+0x46>
 8007d00:	6825      	ldr	r5, [r4, #0]
 8007d02:	1961      	adds	r1, r4, r5
 8007d04:	428b      	cmp	r3, r1
 8007d06:	bf01      	itttt	eq
 8007d08:	6819      	ldreq	r1, [r3, #0]
 8007d0a:	685b      	ldreq	r3, [r3, #4]
 8007d0c:	1949      	addeq	r1, r1, r5
 8007d0e:	6021      	streq	r1, [r4, #0]
 8007d10:	e7ed      	b.n	8007cee <_free_r+0x22>
 8007d12:	461a      	mov	r2, r3
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	b10b      	cbz	r3, 8007d1c <_free_r+0x50>
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	d9fa      	bls.n	8007d12 <_free_r+0x46>
 8007d1c:	6811      	ldr	r1, [r2, #0]
 8007d1e:	1855      	adds	r5, r2, r1
 8007d20:	42a5      	cmp	r5, r4
 8007d22:	d10b      	bne.n	8007d3c <_free_r+0x70>
 8007d24:	6824      	ldr	r4, [r4, #0]
 8007d26:	4421      	add	r1, r4
 8007d28:	1854      	adds	r4, r2, r1
 8007d2a:	42a3      	cmp	r3, r4
 8007d2c:	6011      	str	r1, [r2, #0]
 8007d2e:	d1e0      	bne.n	8007cf2 <_free_r+0x26>
 8007d30:	681c      	ldr	r4, [r3, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	6053      	str	r3, [r2, #4]
 8007d36:	4421      	add	r1, r4
 8007d38:	6011      	str	r1, [r2, #0]
 8007d3a:	e7da      	b.n	8007cf2 <_free_r+0x26>
 8007d3c:	d902      	bls.n	8007d44 <_free_r+0x78>
 8007d3e:	230c      	movs	r3, #12
 8007d40:	6003      	str	r3, [r0, #0]
 8007d42:	e7d6      	b.n	8007cf2 <_free_r+0x26>
 8007d44:	6825      	ldr	r5, [r4, #0]
 8007d46:	1961      	adds	r1, r4, r5
 8007d48:	428b      	cmp	r3, r1
 8007d4a:	bf04      	itt	eq
 8007d4c:	6819      	ldreq	r1, [r3, #0]
 8007d4e:	685b      	ldreq	r3, [r3, #4]
 8007d50:	6063      	str	r3, [r4, #4]
 8007d52:	bf04      	itt	eq
 8007d54:	1949      	addeq	r1, r1, r5
 8007d56:	6021      	streq	r1, [r4, #0]
 8007d58:	6054      	str	r4, [r2, #4]
 8007d5a:	e7ca      	b.n	8007cf2 <_free_r+0x26>
 8007d5c:	b003      	add	sp, #12
 8007d5e:	bd30      	pop	{r4, r5, pc}
 8007d60:	200003c4 	.word	0x200003c4

08007d64 <sbrk_aligned>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	4e0e      	ldr	r6, [pc, #56]	; (8007da0 <sbrk_aligned+0x3c>)
 8007d68:	460c      	mov	r4, r1
 8007d6a:	6831      	ldr	r1, [r6, #0]
 8007d6c:	4605      	mov	r5, r0
 8007d6e:	b911      	cbnz	r1, 8007d76 <sbrk_aligned+0x12>
 8007d70:	f000 f88c 	bl	8007e8c <_sbrk_r>
 8007d74:	6030      	str	r0, [r6, #0]
 8007d76:	4621      	mov	r1, r4
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f000 f887 	bl	8007e8c <_sbrk_r>
 8007d7e:	1c43      	adds	r3, r0, #1
 8007d80:	d00a      	beq.n	8007d98 <sbrk_aligned+0x34>
 8007d82:	1cc4      	adds	r4, r0, #3
 8007d84:	f024 0403 	bic.w	r4, r4, #3
 8007d88:	42a0      	cmp	r0, r4
 8007d8a:	d007      	beq.n	8007d9c <sbrk_aligned+0x38>
 8007d8c:	1a21      	subs	r1, r4, r0
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f000 f87c 	bl	8007e8c <_sbrk_r>
 8007d94:	3001      	adds	r0, #1
 8007d96:	d101      	bne.n	8007d9c <sbrk_aligned+0x38>
 8007d98:	f04f 34ff 	mov.w	r4, #4294967295
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}
 8007da0:	200003c8 	.word	0x200003c8

08007da4 <_malloc_r>:
 8007da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da8:	1ccd      	adds	r5, r1, #3
 8007daa:	f025 0503 	bic.w	r5, r5, #3
 8007dae:	3508      	adds	r5, #8
 8007db0:	2d0c      	cmp	r5, #12
 8007db2:	bf38      	it	cc
 8007db4:	250c      	movcc	r5, #12
 8007db6:	2d00      	cmp	r5, #0
 8007db8:	4607      	mov	r7, r0
 8007dba:	db01      	blt.n	8007dc0 <_malloc_r+0x1c>
 8007dbc:	42a9      	cmp	r1, r5
 8007dbe:	d905      	bls.n	8007dcc <_malloc_r+0x28>
 8007dc0:	230c      	movs	r3, #12
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	2600      	movs	r6, #0
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dcc:	4e2e      	ldr	r6, [pc, #184]	; (8007e88 <_malloc_r+0xe4>)
 8007dce:	f000 f95d 	bl	800808c <__malloc_lock>
 8007dd2:	6833      	ldr	r3, [r6, #0]
 8007dd4:	461c      	mov	r4, r3
 8007dd6:	bb34      	cbnz	r4, 8007e26 <_malloc_r+0x82>
 8007dd8:	4629      	mov	r1, r5
 8007dda:	4638      	mov	r0, r7
 8007ddc:	f7ff ffc2 	bl	8007d64 <sbrk_aligned>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	4604      	mov	r4, r0
 8007de4:	d14d      	bne.n	8007e82 <_malloc_r+0xde>
 8007de6:	6834      	ldr	r4, [r6, #0]
 8007de8:	4626      	mov	r6, r4
 8007dea:	2e00      	cmp	r6, #0
 8007dec:	d140      	bne.n	8007e70 <_malloc_r+0xcc>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	4631      	mov	r1, r6
 8007df2:	4638      	mov	r0, r7
 8007df4:	eb04 0803 	add.w	r8, r4, r3
 8007df8:	f000 f848 	bl	8007e8c <_sbrk_r>
 8007dfc:	4580      	cmp	r8, r0
 8007dfe:	d13a      	bne.n	8007e76 <_malloc_r+0xd2>
 8007e00:	6821      	ldr	r1, [r4, #0]
 8007e02:	3503      	adds	r5, #3
 8007e04:	1a6d      	subs	r5, r5, r1
 8007e06:	f025 0503 	bic.w	r5, r5, #3
 8007e0a:	3508      	adds	r5, #8
 8007e0c:	2d0c      	cmp	r5, #12
 8007e0e:	bf38      	it	cc
 8007e10:	250c      	movcc	r5, #12
 8007e12:	4629      	mov	r1, r5
 8007e14:	4638      	mov	r0, r7
 8007e16:	f7ff ffa5 	bl	8007d64 <sbrk_aligned>
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	d02b      	beq.n	8007e76 <_malloc_r+0xd2>
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	442b      	add	r3, r5
 8007e22:	6023      	str	r3, [r4, #0]
 8007e24:	e00e      	b.n	8007e44 <_malloc_r+0xa0>
 8007e26:	6822      	ldr	r2, [r4, #0]
 8007e28:	1b52      	subs	r2, r2, r5
 8007e2a:	d41e      	bmi.n	8007e6a <_malloc_r+0xc6>
 8007e2c:	2a0b      	cmp	r2, #11
 8007e2e:	d916      	bls.n	8007e5e <_malloc_r+0xba>
 8007e30:	1961      	adds	r1, r4, r5
 8007e32:	42a3      	cmp	r3, r4
 8007e34:	6025      	str	r5, [r4, #0]
 8007e36:	bf18      	it	ne
 8007e38:	6059      	strne	r1, [r3, #4]
 8007e3a:	6863      	ldr	r3, [r4, #4]
 8007e3c:	bf08      	it	eq
 8007e3e:	6031      	streq	r1, [r6, #0]
 8007e40:	5162      	str	r2, [r4, r5]
 8007e42:	604b      	str	r3, [r1, #4]
 8007e44:	4638      	mov	r0, r7
 8007e46:	f104 060b 	add.w	r6, r4, #11
 8007e4a:	f000 f925 	bl	8008098 <__malloc_unlock>
 8007e4e:	f026 0607 	bic.w	r6, r6, #7
 8007e52:	1d23      	adds	r3, r4, #4
 8007e54:	1af2      	subs	r2, r6, r3
 8007e56:	d0b6      	beq.n	8007dc6 <_malloc_r+0x22>
 8007e58:	1b9b      	subs	r3, r3, r6
 8007e5a:	50a3      	str	r3, [r4, r2]
 8007e5c:	e7b3      	b.n	8007dc6 <_malloc_r+0x22>
 8007e5e:	6862      	ldr	r2, [r4, #4]
 8007e60:	42a3      	cmp	r3, r4
 8007e62:	bf0c      	ite	eq
 8007e64:	6032      	streq	r2, [r6, #0]
 8007e66:	605a      	strne	r2, [r3, #4]
 8007e68:	e7ec      	b.n	8007e44 <_malloc_r+0xa0>
 8007e6a:	4623      	mov	r3, r4
 8007e6c:	6864      	ldr	r4, [r4, #4]
 8007e6e:	e7b2      	b.n	8007dd6 <_malloc_r+0x32>
 8007e70:	4634      	mov	r4, r6
 8007e72:	6876      	ldr	r6, [r6, #4]
 8007e74:	e7b9      	b.n	8007dea <_malloc_r+0x46>
 8007e76:	230c      	movs	r3, #12
 8007e78:	603b      	str	r3, [r7, #0]
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	f000 f90c 	bl	8008098 <__malloc_unlock>
 8007e80:	e7a1      	b.n	8007dc6 <_malloc_r+0x22>
 8007e82:	6025      	str	r5, [r4, #0]
 8007e84:	e7de      	b.n	8007e44 <_malloc_r+0xa0>
 8007e86:	bf00      	nop
 8007e88:	200003c4 	.word	0x200003c4

08007e8c <_sbrk_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4d06      	ldr	r5, [pc, #24]	; (8007ea8 <_sbrk_r+0x1c>)
 8007e90:	2300      	movs	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	602b      	str	r3, [r5, #0]
 8007e98:	f7fa f824 	bl	8001ee4 <_sbrk>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d102      	bne.n	8007ea6 <_sbrk_r+0x1a>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b103      	cbz	r3, 8007ea6 <_sbrk_r+0x1a>
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	200003cc 	.word	0x200003cc

08007eac <_raise_r>:
 8007eac:	291f      	cmp	r1, #31
 8007eae:	b538      	push	{r3, r4, r5, lr}
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	d904      	bls.n	8007ec0 <_raise_r+0x14>
 8007eb6:	2316      	movs	r3, #22
 8007eb8:	6003      	str	r3, [r0, #0]
 8007eba:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebe:	bd38      	pop	{r3, r4, r5, pc}
 8007ec0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ec2:	b112      	cbz	r2, 8007eca <_raise_r+0x1e>
 8007ec4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ec8:	b94b      	cbnz	r3, 8007ede <_raise_r+0x32>
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 f830 	bl	8007f30 <_getpid_r>
 8007ed0:	462a      	mov	r2, r5
 8007ed2:	4601      	mov	r1, r0
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eda:	f000 b817 	b.w	8007f0c <_kill_r>
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d00a      	beq.n	8007ef8 <_raise_r+0x4c>
 8007ee2:	1c59      	adds	r1, r3, #1
 8007ee4:	d103      	bne.n	8007eee <_raise_r+0x42>
 8007ee6:	2316      	movs	r3, #22
 8007ee8:	6003      	str	r3, [r0, #0]
 8007eea:	2001      	movs	r0, #1
 8007eec:	e7e7      	b.n	8007ebe <_raise_r+0x12>
 8007eee:	2400      	movs	r4, #0
 8007ef0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	4798      	blx	r3
 8007ef8:	2000      	movs	r0, #0
 8007efa:	e7e0      	b.n	8007ebe <_raise_r+0x12>

08007efc <raise>:
 8007efc:	4b02      	ldr	r3, [pc, #8]	; (8007f08 <raise+0xc>)
 8007efe:	4601      	mov	r1, r0
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	f7ff bfd3 	b.w	8007eac <_raise_r>
 8007f06:	bf00      	nop
 8007f08:	2000000c 	.word	0x2000000c

08007f0c <_kill_r>:
 8007f0c:	b538      	push	{r3, r4, r5, lr}
 8007f0e:	4d07      	ldr	r5, [pc, #28]	; (8007f2c <_kill_r+0x20>)
 8007f10:	2300      	movs	r3, #0
 8007f12:	4604      	mov	r4, r0
 8007f14:	4608      	mov	r0, r1
 8007f16:	4611      	mov	r1, r2
 8007f18:	602b      	str	r3, [r5, #0]
 8007f1a:	f7f9 ffc9 	bl	8001eb0 <_kill>
 8007f1e:	1c43      	adds	r3, r0, #1
 8007f20:	d102      	bne.n	8007f28 <_kill_r+0x1c>
 8007f22:	682b      	ldr	r3, [r5, #0]
 8007f24:	b103      	cbz	r3, 8007f28 <_kill_r+0x1c>
 8007f26:	6023      	str	r3, [r4, #0]
 8007f28:	bd38      	pop	{r3, r4, r5, pc}
 8007f2a:	bf00      	nop
 8007f2c:	200003cc 	.word	0x200003cc

08007f30 <_getpid_r>:
 8007f30:	f7f9 bfb6 	b.w	8001ea0 <_getpid>

08007f34 <siprintf>:
 8007f34:	b40e      	push	{r1, r2, r3}
 8007f36:	b500      	push	{lr}
 8007f38:	b09c      	sub	sp, #112	; 0x70
 8007f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8007f3c:	9002      	str	r0, [sp, #8]
 8007f3e:	9006      	str	r0, [sp, #24]
 8007f40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f44:	4809      	ldr	r0, [pc, #36]	; (8007f6c <siprintf+0x38>)
 8007f46:	9107      	str	r1, [sp, #28]
 8007f48:	9104      	str	r1, [sp, #16]
 8007f4a:	4909      	ldr	r1, [pc, #36]	; (8007f70 <siprintf+0x3c>)
 8007f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f50:	9105      	str	r1, [sp, #20]
 8007f52:	6800      	ldr	r0, [r0, #0]
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	a902      	add	r1, sp, #8
 8007f58:	f000 f900 	bl	800815c <_svfiprintf_r>
 8007f5c:	9b02      	ldr	r3, [sp, #8]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	701a      	strb	r2, [r3, #0]
 8007f62:	b01c      	add	sp, #112	; 0x70
 8007f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f68:	b003      	add	sp, #12
 8007f6a:	4770      	bx	lr
 8007f6c:	2000000c 	.word	0x2000000c
 8007f70:	ffff0208 	.word	0xffff0208

08007f74 <_strtol_l.constprop.0>:
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f7a:	d001      	beq.n	8007f80 <_strtol_l.constprop.0+0xc>
 8007f7c:	2b24      	cmp	r3, #36	; 0x24
 8007f7e:	d906      	bls.n	8007f8e <_strtol_l.constprop.0+0x1a>
 8007f80:	f7ff fe2a 	bl	8007bd8 <__errno>
 8007f84:	2316      	movs	r3, #22
 8007f86:	6003      	str	r3, [r0, #0]
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008074 <_strtol_l.constprop.0+0x100>
 8007f92:	460d      	mov	r5, r1
 8007f94:	462e      	mov	r6, r5
 8007f96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f9a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f9e:	f017 0708 	ands.w	r7, r7, #8
 8007fa2:	d1f7      	bne.n	8007f94 <_strtol_l.constprop.0+0x20>
 8007fa4:	2c2d      	cmp	r4, #45	; 0x2d
 8007fa6:	d132      	bne.n	800800e <_strtol_l.constprop.0+0x9a>
 8007fa8:	782c      	ldrb	r4, [r5, #0]
 8007faa:	2701      	movs	r7, #1
 8007fac:	1cb5      	adds	r5, r6, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d05b      	beq.n	800806a <_strtol_l.constprop.0+0xf6>
 8007fb2:	2b10      	cmp	r3, #16
 8007fb4:	d109      	bne.n	8007fca <_strtol_l.constprop.0+0x56>
 8007fb6:	2c30      	cmp	r4, #48	; 0x30
 8007fb8:	d107      	bne.n	8007fca <_strtol_l.constprop.0+0x56>
 8007fba:	782c      	ldrb	r4, [r5, #0]
 8007fbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007fc0:	2c58      	cmp	r4, #88	; 0x58
 8007fc2:	d14d      	bne.n	8008060 <_strtol_l.constprop.0+0xec>
 8007fc4:	786c      	ldrb	r4, [r5, #1]
 8007fc6:	2310      	movs	r3, #16
 8007fc8:	3502      	adds	r5, #2
 8007fca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007fce:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fd2:	f04f 0c00 	mov.w	ip, #0
 8007fd6:	fbb8 f9f3 	udiv	r9, r8, r3
 8007fda:	4666      	mov	r6, ip
 8007fdc:	fb03 8a19 	mls	sl, r3, r9, r8
 8007fe0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007fe4:	f1be 0f09 	cmp.w	lr, #9
 8007fe8:	d816      	bhi.n	8008018 <_strtol_l.constprop.0+0xa4>
 8007fea:	4674      	mov	r4, lr
 8007fec:	42a3      	cmp	r3, r4
 8007fee:	dd24      	ble.n	800803a <_strtol_l.constprop.0+0xc6>
 8007ff0:	f1bc 0f00 	cmp.w	ip, #0
 8007ff4:	db1e      	blt.n	8008034 <_strtol_l.constprop.0+0xc0>
 8007ff6:	45b1      	cmp	r9, r6
 8007ff8:	d31c      	bcc.n	8008034 <_strtol_l.constprop.0+0xc0>
 8007ffa:	d101      	bne.n	8008000 <_strtol_l.constprop.0+0x8c>
 8007ffc:	45a2      	cmp	sl, r4
 8007ffe:	db19      	blt.n	8008034 <_strtol_l.constprop.0+0xc0>
 8008000:	fb06 4603 	mla	r6, r6, r3, r4
 8008004:	f04f 0c01 	mov.w	ip, #1
 8008008:	f815 4b01 	ldrb.w	r4, [r5], #1
 800800c:	e7e8      	b.n	8007fe0 <_strtol_l.constprop.0+0x6c>
 800800e:	2c2b      	cmp	r4, #43	; 0x2b
 8008010:	bf04      	itt	eq
 8008012:	782c      	ldrbeq	r4, [r5, #0]
 8008014:	1cb5      	addeq	r5, r6, #2
 8008016:	e7ca      	b.n	8007fae <_strtol_l.constprop.0+0x3a>
 8008018:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800801c:	f1be 0f19 	cmp.w	lr, #25
 8008020:	d801      	bhi.n	8008026 <_strtol_l.constprop.0+0xb2>
 8008022:	3c37      	subs	r4, #55	; 0x37
 8008024:	e7e2      	b.n	8007fec <_strtol_l.constprop.0+0x78>
 8008026:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800802a:	f1be 0f19 	cmp.w	lr, #25
 800802e:	d804      	bhi.n	800803a <_strtol_l.constprop.0+0xc6>
 8008030:	3c57      	subs	r4, #87	; 0x57
 8008032:	e7db      	b.n	8007fec <_strtol_l.constprop.0+0x78>
 8008034:	f04f 3cff 	mov.w	ip, #4294967295
 8008038:	e7e6      	b.n	8008008 <_strtol_l.constprop.0+0x94>
 800803a:	f1bc 0f00 	cmp.w	ip, #0
 800803e:	da05      	bge.n	800804c <_strtol_l.constprop.0+0xd8>
 8008040:	2322      	movs	r3, #34	; 0x22
 8008042:	6003      	str	r3, [r0, #0]
 8008044:	4646      	mov	r6, r8
 8008046:	b942      	cbnz	r2, 800805a <_strtol_l.constprop.0+0xe6>
 8008048:	4630      	mov	r0, r6
 800804a:	e79e      	b.n	8007f8a <_strtol_l.constprop.0+0x16>
 800804c:	b107      	cbz	r7, 8008050 <_strtol_l.constprop.0+0xdc>
 800804e:	4276      	negs	r6, r6
 8008050:	2a00      	cmp	r2, #0
 8008052:	d0f9      	beq.n	8008048 <_strtol_l.constprop.0+0xd4>
 8008054:	f1bc 0f00 	cmp.w	ip, #0
 8008058:	d000      	beq.n	800805c <_strtol_l.constprop.0+0xe8>
 800805a:	1e69      	subs	r1, r5, #1
 800805c:	6011      	str	r1, [r2, #0]
 800805e:	e7f3      	b.n	8008048 <_strtol_l.constprop.0+0xd4>
 8008060:	2430      	movs	r4, #48	; 0x30
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1b1      	bne.n	8007fca <_strtol_l.constprop.0+0x56>
 8008066:	2308      	movs	r3, #8
 8008068:	e7af      	b.n	8007fca <_strtol_l.constprop.0+0x56>
 800806a:	2c30      	cmp	r4, #48	; 0x30
 800806c:	d0a5      	beq.n	8007fba <_strtol_l.constprop.0+0x46>
 800806e:	230a      	movs	r3, #10
 8008070:	e7ab      	b.n	8007fca <_strtol_l.constprop.0+0x56>
 8008072:	bf00      	nop
 8008074:	080087f7 	.word	0x080087f7

08008078 <strtol>:
 8008078:	4613      	mov	r3, r2
 800807a:	460a      	mov	r2, r1
 800807c:	4601      	mov	r1, r0
 800807e:	4802      	ldr	r0, [pc, #8]	; (8008088 <strtol+0x10>)
 8008080:	6800      	ldr	r0, [r0, #0]
 8008082:	f7ff bf77 	b.w	8007f74 <_strtol_l.constprop.0>
 8008086:	bf00      	nop
 8008088:	2000000c 	.word	0x2000000c

0800808c <__malloc_lock>:
 800808c:	4801      	ldr	r0, [pc, #4]	; (8008094 <__malloc_lock+0x8>)
 800808e:	f000 baf9 	b.w	8008684 <__retarget_lock_acquire_recursive>
 8008092:	bf00      	nop
 8008094:	200003d0 	.word	0x200003d0

08008098 <__malloc_unlock>:
 8008098:	4801      	ldr	r0, [pc, #4]	; (80080a0 <__malloc_unlock+0x8>)
 800809a:	f000 baf4 	b.w	8008686 <__retarget_lock_release_recursive>
 800809e:	bf00      	nop
 80080a0:	200003d0 	.word	0x200003d0

080080a4 <__ssputs_r>:
 80080a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	688e      	ldr	r6, [r1, #8]
 80080aa:	429e      	cmp	r6, r3
 80080ac:	4682      	mov	sl, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	4690      	mov	r8, r2
 80080b2:	461f      	mov	r7, r3
 80080b4:	d838      	bhi.n	8008128 <__ssputs_r+0x84>
 80080b6:	898a      	ldrh	r2, [r1, #12]
 80080b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080bc:	d032      	beq.n	8008124 <__ssputs_r+0x80>
 80080be:	6825      	ldr	r5, [r4, #0]
 80080c0:	6909      	ldr	r1, [r1, #16]
 80080c2:	eba5 0901 	sub.w	r9, r5, r1
 80080c6:	6965      	ldr	r5, [r4, #20]
 80080c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080d0:	3301      	adds	r3, #1
 80080d2:	444b      	add	r3, r9
 80080d4:	106d      	asrs	r5, r5, #1
 80080d6:	429d      	cmp	r5, r3
 80080d8:	bf38      	it	cc
 80080da:	461d      	movcc	r5, r3
 80080dc:	0553      	lsls	r3, r2, #21
 80080de:	d531      	bpl.n	8008144 <__ssputs_r+0xa0>
 80080e0:	4629      	mov	r1, r5
 80080e2:	f7ff fe5f 	bl	8007da4 <_malloc_r>
 80080e6:	4606      	mov	r6, r0
 80080e8:	b950      	cbnz	r0, 8008100 <__ssputs_r+0x5c>
 80080ea:	230c      	movs	r3, #12
 80080ec:	f8ca 3000 	str.w	r3, [sl]
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f6:	81a3      	strh	r3, [r4, #12]
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295
 80080fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008100:	6921      	ldr	r1, [r4, #16]
 8008102:	464a      	mov	r2, r9
 8008104:	f7ff fdb2 	bl	8007c6c <memcpy>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800810e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	6126      	str	r6, [r4, #16]
 8008116:	6165      	str	r5, [r4, #20]
 8008118:	444e      	add	r6, r9
 800811a:	eba5 0509 	sub.w	r5, r5, r9
 800811e:	6026      	str	r6, [r4, #0]
 8008120:	60a5      	str	r5, [r4, #8]
 8008122:	463e      	mov	r6, r7
 8008124:	42be      	cmp	r6, r7
 8008126:	d900      	bls.n	800812a <__ssputs_r+0x86>
 8008128:	463e      	mov	r6, r7
 800812a:	6820      	ldr	r0, [r4, #0]
 800812c:	4632      	mov	r2, r6
 800812e:	4641      	mov	r1, r8
 8008130:	f7ff fdaa 	bl	8007c88 <memmove>
 8008134:	68a3      	ldr	r3, [r4, #8]
 8008136:	1b9b      	subs	r3, r3, r6
 8008138:	60a3      	str	r3, [r4, #8]
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	4433      	add	r3, r6
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	2000      	movs	r0, #0
 8008142:	e7db      	b.n	80080fc <__ssputs_r+0x58>
 8008144:	462a      	mov	r2, r5
 8008146:	f000 fa9f 	bl	8008688 <_realloc_r>
 800814a:	4606      	mov	r6, r0
 800814c:	2800      	cmp	r0, #0
 800814e:	d1e1      	bne.n	8008114 <__ssputs_r+0x70>
 8008150:	6921      	ldr	r1, [r4, #16]
 8008152:	4650      	mov	r0, sl
 8008154:	f7ff fdba 	bl	8007ccc <_free_r>
 8008158:	e7c7      	b.n	80080ea <__ssputs_r+0x46>
	...

0800815c <_svfiprintf_r>:
 800815c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008160:	4698      	mov	r8, r3
 8008162:	898b      	ldrh	r3, [r1, #12]
 8008164:	061b      	lsls	r3, r3, #24
 8008166:	b09d      	sub	sp, #116	; 0x74
 8008168:	4607      	mov	r7, r0
 800816a:	460d      	mov	r5, r1
 800816c:	4614      	mov	r4, r2
 800816e:	d50e      	bpl.n	800818e <_svfiprintf_r+0x32>
 8008170:	690b      	ldr	r3, [r1, #16]
 8008172:	b963      	cbnz	r3, 800818e <_svfiprintf_r+0x32>
 8008174:	2140      	movs	r1, #64	; 0x40
 8008176:	f7ff fe15 	bl	8007da4 <_malloc_r>
 800817a:	6028      	str	r0, [r5, #0]
 800817c:	6128      	str	r0, [r5, #16]
 800817e:	b920      	cbnz	r0, 800818a <_svfiprintf_r+0x2e>
 8008180:	230c      	movs	r3, #12
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	f04f 30ff 	mov.w	r0, #4294967295
 8008188:	e0d1      	b.n	800832e <_svfiprintf_r+0x1d2>
 800818a:	2340      	movs	r3, #64	; 0x40
 800818c:	616b      	str	r3, [r5, #20]
 800818e:	2300      	movs	r3, #0
 8008190:	9309      	str	r3, [sp, #36]	; 0x24
 8008192:	2320      	movs	r3, #32
 8008194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008198:	f8cd 800c 	str.w	r8, [sp, #12]
 800819c:	2330      	movs	r3, #48	; 0x30
 800819e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008348 <_svfiprintf_r+0x1ec>
 80081a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081a6:	f04f 0901 	mov.w	r9, #1
 80081aa:	4623      	mov	r3, r4
 80081ac:	469a      	mov	sl, r3
 80081ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081b2:	b10a      	cbz	r2, 80081b8 <_svfiprintf_r+0x5c>
 80081b4:	2a25      	cmp	r2, #37	; 0x25
 80081b6:	d1f9      	bne.n	80081ac <_svfiprintf_r+0x50>
 80081b8:	ebba 0b04 	subs.w	fp, sl, r4
 80081bc:	d00b      	beq.n	80081d6 <_svfiprintf_r+0x7a>
 80081be:	465b      	mov	r3, fp
 80081c0:	4622      	mov	r2, r4
 80081c2:	4629      	mov	r1, r5
 80081c4:	4638      	mov	r0, r7
 80081c6:	f7ff ff6d 	bl	80080a4 <__ssputs_r>
 80081ca:	3001      	adds	r0, #1
 80081cc:	f000 80aa 	beq.w	8008324 <_svfiprintf_r+0x1c8>
 80081d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d2:	445a      	add	r2, fp
 80081d4:	9209      	str	r2, [sp, #36]	; 0x24
 80081d6:	f89a 3000 	ldrb.w	r3, [sl]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 80a2 	beq.w	8008324 <_svfiprintf_r+0x1c8>
 80081e0:	2300      	movs	r3, #0
 80081e2:	f04f 32ff 	mov.w	r2, #4294967295
 80081e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081ea:	f10a 0a01 	add.w	sl, sl, #1
 80081ee:	9304      	str	r3, [sp, #16]
 80081f0:	9307      	str	r3, [sp, #28]
 80081f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081f6:	931a      	str	r3, [sp, #104]	; 0x68
 80081f8:	4654      	mov	r4, sl
 80081fa:	2205      	movs	r2, #5
 80081fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008200:	4851      	ldr	r0, [pc, #324]	; (8008348 <_svfiprintf_r+0x1ec>)
 8008202:	f7f7 ffed 	bl	80001e0 <memchr>
 8008206:	9a04      	ldr	r2, [sp, #16]
 8008208:	b9d8      	cbnz	r0, 8008242 <_svfiprintf_r+0xe6>
 800820a:	06d0      	lsls	r0, r2, #27
 800820c:	bf44      	itt	mi
 800820e:	2320      	movmi	r3, #32
 8008210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008214:	0711      	lsls	r1, r2, #28
 8008216:	bf44      	itt	mi
 8008218:	232b      	movmi	r3, #43	; 0x2b
 800821a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800821e:	f89a 3000 	ldrb.w	r3, [sl]
 8008222:	2b2a      	cmp	r3, #42	; 0x2a
 8008224:	d015      	beq.n	8008252 <_svfiprintf_r+0xf6>
 8008226:	9a07      	ldr	r2, [sp, #28]
 8008228:	4654      	mov	r4, sl
 800822a:	2000      	movs	r0, #0
 800822c:	f04f 0c0a 	mov.w	ip, #10
 8008230:	4621      	mov	r1, r4
 8008232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008236:	3b30      	subs	r3, #48	; 0x30
 8008238:	2b09      	cmp	r3, #9
 800823a:	d94e      	bls.n	80082da <_svfiprintf_r+0x17e>
 800823c:	b1b0      	cbz	r0, 800826c <_svfiprintf_r+0x110>
 800823e:	9207      	str	r2, [sp, #28]
 8008240:	e014      	b.n	800826c <_svfiprintf_r+0x110>
 8008242:	eba0 0308 	sub.w	r3, r0, r8
 8008246:	fa09 f303 	lsl.w	r3, r9, r3
 800824a:	4313      	orrs	r3, r2
 800824c:	9304      	str	r3, [sp, #16]
 800824e:	46a2      	mov	sl, r4
 8008250:	e7d2      	b.n	80081f8 <_svfiprintf_r+0x9c>
 8008252:	9b03      	ldr	r3, [sp, #12]
 8008254:	1d19      	adds	r1, r3, #4
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	9103      	str	r1, [sp, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	bfbb      	ittet	lt
 800825e:	425b      	neglt	r3, r3
 8008260:	f042 0202 	orrlt.w	r2, r2, #2
 8008264:	9307      	strge	r3, [sp, #28]
 8008266:	9307      	strlt	r3, [sp, #28]
 8008268:	bfb8      	it	lt
 800826a:	9204      	strlt	r2, [sp, #16]
 800826c:	7823      	ldrb	r3, [r4, #0]
 800826e:	2b2e      	cmp	r3, #46	; 0x2e
 8008270:	d10c      	bne.n	800828c <_svfiprintf_r+0x130>
 8008272:	7863      	ldrb	r3, [r4, #1]
 8008274:	2b2a      	cmp	r3, #42	; 0x2a
 8008276:	d135      	bne.n	80082e4 <_svfiprintf_r+0x188>
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	1d1a      	adds	r2, r3, #4
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	9203      	str	r2, [sp, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	bfb8      	it	lt
 8008284:	f04f 33ff 	movlt.w	r3, #4294967295
 8008288:	3402      	adds	r4, #2
 800828a:	9305      	str	r3, [sp, #20]
 800828c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008358 <_svfiprintf_r+0x1fc>
 8008290:	7821      	ldrb	r1, [r4, #0]
 8008292:	2203      	movs	r2, #3
 8008294:	4650      	mov	r0, sl
 8008296:	f7f7 ffa3 	bl	80001e0 <memchr>
 800829a:	b140      	cbz	r0, 80082ae <_svfiprintf_r+0x152>
 800829c:	2340      	movs	r3, #64	; 0x40
 800829e:	eba0 000a 	sub.w	r0, r0, sl
 80082a2:	fa03 f000 	lsl.w	r0, r3, r0
 80082a6:	9b04      	ldr	r3, [sp, #16]
 80082a8:	4303      	orrs	r3, r0
 80082aa:	3401      	adds	r4, #1
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b2:	4826      	ldr	r0, [pc, #152]	; (800834c <_svfiprintf_r+0x1f0>)
 80082b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082b8:	2206      	movs	r2, #6
 80082ba:	f7f7 ff91 	bl	80001e0 <memchr>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d038      	beq.n	8008334 <_svfiprintf_r+0x1d8>
 80082c2:	4b23      	ldr	r3, [pc, #140]	; (8008350 <_svfiprintf_r+0x1f4>)
 80082c4:	bb1b      	cbnz	r3, 800830e <_svfiprintf_r+0x1b2>
 80082c6:	9b03      	ldr	r3, [sp, #12]
 80082c8:	3307      	adds	r3, #7
 80082ca:	f023 0307 	bic.w	r3, r3, #7
 80082ce:	3308      	adds	r3, #8
 80082d0:	9303      	str	r3, [sp, #12]
 80082d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d4:	4433      	add	r3, r6
 80082d6:	9309      	str	r3, [sp, #36]	; 0x24
 80082d8:	e767      	b.n	80081aa <_svfiprintf_r+0x4e>
 80082da:	fb0c 3202 	mla	r2, ip, r2, r3
 80082de:	460c      	mov	r4, r1
 80082e0:	2001      	movs	r0, #1
 80082e2:	e7a5      	b.n	8008230 <_svfiprintf_r+0xd4>
 80082e4:	2300      	movs	r3, #0
 80082e6:	3401      	adds	r4, #1
 80082e8:	9305      	str	r3, [sp, #20]
 80082ea:	4619      	mov	r1, r3
 80082ec:	f04f 0c0a 	mov.w	ip, #10
 80082f0:	4620      	mov	r0, r4
 80082f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082f6:	3a30      	subs	r2, #48	; 0x30
 80082f8:	2a09      	cmp	r2, #9
 80082fa:	d903      	bls.n	8008304 <_svfiprintf_r+0x1a8>
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d0c5      	beq.n	800828c <_svfiprintf_r+0x130>
 8008300:	9105      	str	r1, [sp, #20]
 8008302:	e7c3      	b.n	800828c <_svfiprintf_r+0x130>
 8008304:	fb0c 2101 	mla	r1, ip, r1, r2
 8008308:	4604      	mov	r4, r0
 800830a:	2301      	movs	r3, #1
 800830c:	e7f0      	b.n	80082f0 <_svfiprintf_r+0x194>
 800830e:	ab03      	add	r3, sp, #12
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	462a      	mov	r2, r5
 8008314:	4b0f      	ldr	r3, [pc, #60]	; (8008354 <_svfiprintf_r+0x1f8>)
 8008316:	a904      	add	r1, sp, #16
 8008318:	4638      	mov	r0, r7
 800831a:	f3af 8000 	nop.w
 800831e:	1c42      	adds	r2, r0, #1
 8008320:	4606      	mov	r6, r0
 8008322:	d1d6      	bne.n	80082d2 <_svfiprintf_r+0x176>
 8008324:	89ab      	ldrh	r3, [r5, #12]
 8008326:	065b      	lsls	r3, r3, #25
 8008328:	f53f af2c 	bmi.w	8008184 <_svfiprintf_r+0x28>
 800832c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800832e:	b01d      	add	sp, #116	; 0x74
 8008330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008334:	ab03      	add	r3, sp, #12
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	462a      	mov	r2, r5
 800833a:	4b06      	ldr	r3, [pc, #24]	; (8008354 <_svfiprintf_r+0x1f8>)
 800833c:	a904      	add	r1, sp, #16
 800833e:	4638      	mov	r0, r7
 8008340:	f000 f87a 	bl	8008438 <_printf_i>
 8008344:	e7eb      	b.n	800831e <_svfiprintf_r+0x1c2>
 8008346:	bf00      	nop
 8008348:	080088f7 	.word	0x080088f7
 800834c:	08008901 	.word	0x08008901
 8008350:	00000000 	.word	0x00000000
 8008354:	080080a5 	.word	0x080080a5
 8008358:	080088fd 	.word	0x080088fd

0800835c <_printf_common>:
 800835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	4616      	mov	r6, r2
 8008362:	4699      	mov	r9, r3
 8008364:	688a      	ldr	r2, [r1, #8]
 8008366:	690b      	ldr	r3, [r1, #16]
 8008368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800836c:	4293      	cmp	r3, r2
 800836e:	bfb8      	it	lt
 8008370:	4613      	movlt	r3, r2
 8008372:	6033      	str	r3, [r6, #0]
 8008374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008378:	4607      	mov	r7, r0
 800837a:	460c      	mov	r4, r1
 800837c:	b10a      	cbz	r2, 8008382 <_printf_common+0x26>
 800837e:	3301      	adds	r3, #1
 8008380:	6033      	str	r3, [r6, #0]
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	0699      	lsls	r1, r3, #26
 8008386:	bf42      	ittt	mi
 8008388:	6833      	ldrmi	r3, [r6, #0]
 800838a:	3302      	addmi	r3, #2
 800838c:	6033      	strmi	r3, [r6, #0]
 800838e:	6825      	ldr	r5, [r4, #0]
 8008390:	f015 0506 	ands.w	r5, r5, #6
 8008394:	d106      	bne.n	80083a4 <_printf_common+0x48>
 8008396:	f104 0a19 	add.w	sl, r4, #25
 800839a:	68e3      	ldr	r3, [r4, #12]
 800839c:	6832      	ldr	r2, [r6, #0]
 800839e:	1a9b      	subs	r3, r3, r2
 80083a0:	42ab      	cmp	r3, r5
 80083a2:	dc26      	bgt.n	80083f2 <_printf_common+0x96>
 80083a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083a8:	1e13      	subs	r3, r2, #0
 80083aa:	6822      	ldr	r2, [r4, #0]
 80083ac:	bf18      	it	ne
 80083ae:	2301      	movne	r3, #1
 80083b0:	0692      	lsls	r2, r2, #26
 80083b2:	d42b      	bmi.n	800840c <_printf_common+0xb0>
 80083b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083b8:	4649      	mov	r1, r9
 80083ba:	4638      	mov	r0, r7
 80083bc:	47c0      	blx	r8
 80083be:	3001      	adds	r0, #1
 80083c0:	d01e      	beq.n	8008400 <_printf_common+0xa4>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	68e5      	ldr	r5, [r4, #12]
 80083c6:	6832      	ldr	r2, [r6, #0]
 80083c8:	f003 0306 	and.w	r3, r3, #6
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	bf08      	it	eq
 80083d0:	1aad      	subeq	r5, r5, r2
 80083d2:	68a3      	ldr	r3, [r4, #8]
 80083d4:	6922      	ldr	r2, [r4, #16]
 80083d6:	bf0c      	ite	eq
 80083d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083dc:	2500      	movne	r5, #0
 80083de:	4293      	cmp	r3, r2
 80083e0:	bfc4      	itt	gt
 80083e2:	1a9b      	subgt	r3, r3, r2
 80083e4:	18ed      	addgt	r5, r5, r3
 80083e6:	2600      	movs	r6, #0
 80083e8:	341a      	adds	r4, #26
 80083ea:	42b5      	cmp	r5, r6
 80083ec:	d11a      	bne.n	8008424 <_printf_common+0xc8>
 80083ee:	2000      	movs	r0, #0
 80083f0:	e008      	b.n	8008404 <_printf_common+0xa8>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4652      	mov	r2, sl
 80083f6:	4649      	mov	r1, r9
 80083f8:	4638      	mov	r0, r7
 80083fa:	47c0      	blx	r8
 80083fc:	3001      	adds	r0, #1
 80083fe:	d103      	bne.n	8008408 <_printf_common+0xac>
 8008400:	f04f 30ff 	mov.w	r0, #4294967295
 8008404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008408:	3501      	adds	r5, #1
 800840a:	e7c6      	b.n	800839a <_printf_common+0x3e>
 800840c:	18e1      	adds	r1, r4, r3
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	2030      	movs	r0, #48	; 0x30
 8008412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008416:	4422      	add	r2, r4
 8008418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800841c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008420:	3302      	adds	r3, #2
 8008422:	e7c7      	b.n	80083b4 <_printf_common+0x58>
 8008424:	2301      	movs	r3, #1
 8008426:	4622      	mov	r2, r4
 8008428:	4649      	mov	r1, r9
 800842a:	4638      	mov	r0, r7
 800842c:	47c0      	blx	r8
 800842e:	3001      	adds	r0, #1
 8008430:	d0e6      	beq.n	8008400 <_printf_common+0xa4>
 8008432:	3601      	adds	r6, #1
 8008434:	e7d9      	b.n	80083ea <_printf_common+0x8e>
	...

08008438 <_printf_i>:
 8008438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800843c:	7e0f      	ldrb	r7, [r1, #24]
 800843e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008440:	2f78      	cmp	r7, #120	; 0x78
 8008442:	4691      	mov	r9, r2
 8008444:	4680      	mov	r8, r0
 8008446:	460c      	mov	r4, r1
 8008448:	469a      	mov	sl, r3
 800844a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800844e:	d807      	bhi.n	8008460 <_printf_i+0x28>
 8008450:	2f62      	cmp	r7, #98	; 0x62
 8008452:	d80a      	bhi.n	800846a <_printf_i+0x32>
 8008454:	2f00      	cmp	r7, #0
 8008456:	f000 80d8 	beq.w	800860a <_printf_i+0x1d2>
 800845a:	2f58      	cmp	r7, #88	; 0x58
 800845c:	f000 80a3 	beq.w	80085a6 <_printf_i+0x16e>
 8008460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008468:	e03a      	b.n	80084e0 <_printf_i+0xa8>
 800846a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800846e:	2b15      	cmp	r3, #21
 8008470:	d8f6      	bhi.n	8008460 <_printf_i+0x28>
 8008472:	a101      	add	r1, pc, #4	; (adr r1, 8008478 <_printf_i+0x40>)
 8008474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008478:	080084d1 	.word	0x080084d1
 800847c:	080084e5 	.word	0x080084e5
 8008480:	08008461 	.word	0x08008461
 8008484:	08008461 	.word	0x08008461
 8008488:	08008461 	.word	0x08008461
 800848c:	08008461 	.word	0x08008461
 8008490:	080084e5 	.word	0x080084e5
 8008494:	08008461 	.word	0x08008461
 8008498:	08008461 	.word	0x08008461
 800849c:	08008461 	.word	0x08008461
 80084a0:	08008461 	.word	0x08008461
 80084a4:	080085f1 	.word	0x080085f1
 80084a8:	08008515 	.word	0x08008515
 80084ac:	080085d3 	.word	0x080085d3
 80084b0:	08008461 	.word	0x08008461
 80084b4:	08008461 	.word	0x08008461
 80084b8:	08008613 	.word	0x08008613
 80084bc:	08008461 	.word	0x08008461
 80084c0:	08008515 	.word	0x08008515
 80084c4:	08008461 	.word	0x08008461
 80084c8:	08008461 	.word	0x08008461
 80084cc:	080085db 	.word	0x080085db
 80084d0:	682b      	ldr	r3, [r5, #0]
 80084d2:	1d1a      	adds	r2, r3, #4
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	602a      	str	r2, [r5, #0]
 80084d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084e0:	2301      	movs	r3, #1
 80084e2:	e0a3      	b.n	800862c <_printf_i+0x1f4>
 80084e4:	6820      	ldr	r0, [r4, #0]
 80084e6:	6829      	ldr	r1, [r5, #0]
 80084e8:	0606      	lsls	r6, r0, #24
 80084ea:	f101 0304 	add.w	r3, r1, #4
 80084ee:	d50a      	bpl.n	8008506 <_printf_i+0xce>
 80084f0:	680e      	ldr	r6, [r1, #0]
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	2e00      	cmp	r6, #0
 80084f6:	da03      	bge.n	8008500 <_printf_i+0xc8>
 80084f8:	232d      	movs	r3, #45	; 0x2d
 80084fa:	4276      	negs	r6, r6
 80084fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008500:	485e      	ldr	r0, [pc, #376]	; (800867c <_printf_i+0x244>)
 8008502:	230a      	movs	r3, #10
 8008504:	e019      	b.n	800853a <_printf_i+0x102>
 8008506:	680e      	ldr	r6, [r1, #0]
 8008508:	602b      	str	r3, [r5, #0]
 800850a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800850e:	bf18      	it	ne
 8008510:	b236      	sxthne	r6, r6
 8008512:	e7ef      	b.n	80084f4 <_printf_i+0xbc>
 8008514:	682b      	ldr	r3, [r5, #0]
 8008516:	6820      	ldr	r0, [r4, #0]
 8008518:	1d19      	adds	r1, r3, #4
 800851a:	6029      	str	r1, [r5, #0]
 800851c:	0601      	lsls	r1, r0, #24
 800851e:	d501      	bpl.n	8008524 <_printf_i+0xec>
 8008520:	681e      	ldr	r6, [r3, #0]
 8008522:	e002      	b.n	800852a <_printf_i+0xf2>
 8008524:	0646      	lsls	r6, r0, #25
 8008526:	d5fb      	bpl.n	8008520 <_printf_i+0xe8>
 8008528:	881e      	ldrh	r6, [r3, #0]
 800852a:	4854      	ldr	r0, [pc, #336]	; (800867c <_printf_i+0x244>)
 800852c:	2f6f      	cmp	r7, #111	; 0x6f
 800852e:	bf0c      	ite	eq
 8008530:	2308      	moveq	r3, #8
 8008532:	230a      	movne	r3, #10
 8008534:	2100      	movs	r1, #0
 8008536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800853a:	6865      	ldr	r5, [r4, #4]
 800853c:	60a5      	str	r5, [r4, #8]
 800853e:	2d00      	cmp	r5, #0
 8008540:	bfa2      	ittt	ge
 8008542:	6821      	ldrge	r1, [r4, #0]
 8008544:	f021 0104 	bicge.w	r1, r1, #4
 8008548:	6021      	strge	r1, [r4, #0]
 800854a:	b90e      	cbnz	r6, 8008550 <_printf_i+0x118>
 800854c:	2d00      	cmp	r5, #0
 800854e:	d04d      	beq.n	80085ec <_printf_i+0x1b4>
 8008550:	4615      	mov	r5, r2
 8008552:	fbb6 f1f3 	udiv	r1, r6, r3
 8008556:	fb03 6711 	mls	r7, r3, r1, r6
 800855a:	5dc7      	ldrb	r7, [r0, r7]
 800855c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008560:	4637      	mov	r7, r6
 8008562:	42bb      	cmp	r3, r7
 8008564:	460e      	mov	r6, r1
 8008566:	d9f4      	bls.n	8008552 <_printf_i+0x11a>
 8008568:	2b08      	cmp	r3, #8
 800856a:	d10b      	bne.n	8008584 <_printf_i+0x14c>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	07de      	lsls	r6, r3, #31
 8008570:	d508      	bpl.n	8008584 <_printf_i+0x14c>
 8008572:	6923      	ldr	r3, [r4, #16]
 8008574:	6861      	ldr	r1, [r4, #4]
 8008576:	4299      	cmp	r1, r3
 8008578:	bfde      	ittt	le
 800857a:	2330      	movle	r3, #48	; 0x30
 800857c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008580:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008584:	1b52      	subs	r2, r2, r5
 8008586:	6122      	str	r2, [r4, #16]
 8008588:	f8cd a000 	str.w	sl, [sp]
 800858c:	464b      	mov	r3, r9
 800858e:	aa03      	add	r2, sp, #12
 8008590:	4621      	mov	r1, r4
 8008592:	4640      	mov	r0, r8
 8008594:	f7ff fee2 	bl	800835c <_printf_common>
 8008598:	3001      	adds	r0, #1
 800859a:	d14c      	bne.n	8008636 <_printf_i+0x1fe>
 800859c:	f04f 30ff 	mov.w	r0, #4294967295
 80085a0:	b004      	add	sp, #16
 80085a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a6:	4835      	ldr	r0, [pc, #212]	; (800867c <_printf_i+0x244>)
 80085a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085ac:	6829      	ldr	r1, [r5, #0]
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80085b4:	6029      	str	r1, [r5, #0]
 80085b6:	061d      	lsls	r5, r3, #24
 80085b8:	d514      	bpl.n	80085e4 <_printf_i+0x1ac>
 80085ba:	07df      	lsls	r7, r3, #31
 80085bc:	bf44      	itt	mi
 80085be:	f043 0320 	orrmi.w	r3, r3, #32
 80085c2:	6023      	strmi	r3, [r4, #0]
 80085c4:	b91e      	cbnz	r6, 80085ce <_printf_i+0x196>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	f023 0320 	bic.w	r3, r3, #32
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	2310      	movs	r3, #16
 80085d0:	e7b0      	b.n	8008534 <_printf_i+0xfc>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	f043 0320 	orr.w	r3, r3, #32
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	2378      	movs	r3, #120	; 0x78
 80085dc:	4828      	ldr	r0, [pc, #160]	; (8008680 <_printf_i+0x248>)
 80085de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085e2:	e7e3      	b.n	80085ac <_printf_i+0x174>
 80085e4:	0659      	lsls	r1, r3, #25
 80085e6:	bf48      	it	mi
 80085e8:	b2b6      	uxthmi	r6, r6
 80085ea:	e7e6      	b.n	80085ba <_printf_i+0x182>
 80085ec:	4615      	mov	r5, r2
 80085ee:	e7bb      	b.n	8008568 <_printf_i+0x130>
 80085f0:	682b      	ldr	r3, [r5, #0]
 80085f2:	6826      	ldr	r6, [r4, #0]
 80085f4:	6961      	ldr	r1, [r4, #20]
 80085f6:	1d18      	adds	r0, r3, #4
 80085f8:	6028      	str	r0, [r5, #0]
 80085fa:	0635      	lsls	r5, r6, #24
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	d501      	bpl.n	8008604 <_printf_i+0x1cc>
 8008600:	6019      	str	r1, [r3, #0]
 8008602:	e002      	b.n	800860a <_printf_i+0x1d2>
 8008604:	0670      	lsls	r0, r6, #25
 8008606:	d5fb      	bpl.n	8008600 <_printf_i+0x1c8>
 8008608:	8019      	strh	r1, [r3, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	6123      	str	r3, [r4, #16]
 800860e:	4615      	mov	r5, r2
 8008610:	e7ba      	b.n	8008588 <_printf_i+0x150>
 8008612:	682b      	ldr	r3, [r5, #0]
 8008614:	1d1a      	adds	r2, r3, #4
 8008616:	602a      	str	r2, [r5, #0]
 8008618:	681d      	ldr	r5, [r3, #0]
 800861a:	6862      	ldr	r2, [r4, #4]
 800861c:	2100      	movs	r1, #0
 800861e:	4628      	mov	r0, r5
 8008620:	f7f7 fdde 	bl	80001e0 <memchr>
 8008624:	b108      	cbz	r0, 800862a <_printf_i+0x1f2>
 8008626:	1b40      	subs	r0, r0, r5
 8008628:	6060      	str	r0, [r4, #4]
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	6123      	str	r3, [r4, #16]
 800862e:	2300      	movs	r3, #0
 8008630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008634:	e7a8      	b.n	8008588 <_printf_i+0x150>
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	462a      	mov	r2, r5
 800863a:	4649      	mov	r1, r9
 800863c:	4640      	mov	r0, r8
 800863e:	47d0      	blx	sl
 8008640:	3001      	adds	r0, #1
 8008642:	d0ab      	beq.n	800859c <_printf_i+0x164>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	079b      	lsls	r3, r3, #30
 8008648:	d413      	bmi.n	8008672 <_printf_i+0x23a>
 800864a:	68e0      	ldr	r0, [r4, #12]
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	4298      	cmp	r0, r3
 8008650:	bfb8      	it	lt
 8008652:	4618      	movlt	r0, r3
 8008654:	e7a4      	b.n	80085a0 <_printf_i+0x168>
 8008656:	2301      	movs	r3, #1
 8008658:	4632      	mov	r2, r6
 800865a:	4649      	mov	r1, r9
 800865c:	4640      	mov	r0, r8
 800865e:	47d0      	blx	sl
 8008660:	3001      	adds	r0, #1
 8008662:	d09b      	beq.n	800859c <_printf_i+0x164>
 8008664:	3501      	adds	r5, #1
 8008666:	68e3      	ldr	r3, [r4, #12]
 8008668:	9903      	ldr	r1, [sp, #12]
 800866a:	1a5b      	subs	r3, r3, r1
 800866c:	42ab      	cmp	r3, r5
 800866e:	dcf2      	bgt.n	8008656 <_printf_i+0x21e>
 8008670:	e7eb      	b.n	800864a <_printf_i+0x212>
 8008672:	2500      	movs	r5, #0
 8008674:	f104 0619 	add.w	r6, r4, #25
 8008678:	e7f5      	b.n	8008666 <_printf_i+0x22e>
 800867a:	bf00      	nop
 800867c:	08008908 	.word	0x08008908
 8008680:	08008919 	.word	0x08008919

08008684 <__retarget_lock_acquire_recursive>:
 8008684:	4770      	bx	lr

08008686 <__retarget_lock_release_recursive>:
 8008686:	4770      	bx	lr

08008688 <_realloc_r>:
 8008688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800868c:	4680      	mov	r8, r0
 800868e:	4614      	mov	r4, r2
 8008690:	460e      	mov	r6, r1
 8008692:	b921      	cbnz	r1, 800869e <_realloc_r+0x16>
 8008694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008698:	4611      	mov	r1, r2
 800869a:	f7ff bb83 	b.w	8007da4 <_malloc_r>
 800869e:	b92a      	cbnz	r2, 80086ac <_realloc_r+0x24>
 80086a0:	f7ff fb14 	bl	8007ccc <_free_r>
 80086a4:	4625      	mov	r5, r4
 80086a6:	4628      	mov	r0, r5
 80086a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ac:	f000 f81b 	bl	80086e6 <_malloc_usable_size_r>
 80086b0:	4284      	cmp	r4, r0
 80086b2:	4607      	mov	r7, r0
 80086b4:	d802      	bhi.n	80086bc <_realloc_r+0x34>
 80086b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086ba:	d812      	bhi.n	80086e2 <_realloc_r+0x5a>
 80086bc:	4621      	mov	r1, r4
 80086be:	4640      	mov	r0, r8
 80086c0:	f7ff fb70 	bl	8007da4 <_malloc_r>
 80086c4:	4605      	mov	r5, r0
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d0ed      	beq.n	80086a6 <_realloc_r+0x1e>
 80086ca:	42bc      	cmp	r4, r7
 80086cc:	4622      	mov	r2, r4
 80086ce:	4631      	mov	r1, r6
 80086d0:	bf28      	it	cs
 80086d2:	463a      	movcs	r2, r7
 80086d4:	f7ff faca 	bl	8007c6c <memcpy>
 80086d8:	4631      	mov	r1, r6
 80086da:	4640      	mov	r0, r8
 80086dc:	f7ff faf6 	bl	8007ccc <_free_r>
 80086e0:	e7e1      	b.n	80086a6 <_realloc_r+0x1e>
 80086e2:	4635      	mov	r5, r6
 80086e4:	e7df      	b.n	80086a6 <_realloc_r+0x1e>

080086e6 <_malloc_usable_size_r>:
 80086e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ea:	1f18      	subs	r0, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	bfbc      	itt	lt
 80086f0:	580b      	ldrlt	r3, [r1, r0]
 80086f2:	18c0      	addlt	r0, r0, r3
 80086f4:	4770      	bx	lr
	...

080086f8 <_init>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	bf00      	nop
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr

08008704 <_fini>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr
