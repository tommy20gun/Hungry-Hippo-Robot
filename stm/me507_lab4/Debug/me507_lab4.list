
me507_lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004718  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a5c  08004a5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a5c  08004a5c  00014a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a64  08004a64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a6c  08004a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000070  08004ae0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004ae0  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e63e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa9  00000000  00000000  0002e6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00030688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00031310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c95  00000000  00000000  00031ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e80a  00000000  00000000  0004ab8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090532  00000000  00000000  00059397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e98c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f8  00000000  00000000  000e991c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080048a0 	.word	0x080048a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080048a0 	.word	0x080048a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fd90 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f81c 	bl	80005c8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f9e0 	bl	8000954 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000594:	f000 f9b0 	bl	80008f8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8000598:	f000 f952 	bl	8000840 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 800059c:	f000 f886 	bl	80006ac <_ZL12MX_TIM1_Initv>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
     */

    driver1.enable_driver();
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <main+0x34>)
 80005a2:	f000 fb25 	bl	8000bf0 <_ZN12motor_driver13enable_driverEv>
    driver2.enable_driver();
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <main+0x38>)
 80005a8:	f000 fb22 	bl	8000bf0 <_ZN12motor_driver13enable_driverEv>
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&data, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	4904      	ldr	r1, [pc, #16]	; (80005c0 <main+0x3c>)
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <main+0x40>)
 80005b2:	f002 fcb0 	bl	8002f16 <HAL_UART_Receive_IT>

    while (1)
 80005b6:	e7fe      	b.n	80005b6 <main+0x32>
 80005b8:	20000160 	.word	0x20000160
 80005bc:	20000170 	.word	0x20000170
 80005c0:	20000180 	.word	0x20000180
 80005c4:	2000011c 	.word	0x2000011c

080005c8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fc60 	bl	8003e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <_Z18SystemClock_Configv+0xdc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a2b      	ldr	r2, [pc, #172]	; (80006a4 <_Z18SystemClock_Configv+0xdc>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <_Z18SystemClock_Configv+0xdc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <_Z18SystemClock_Configv+0xe0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a25      	ldr	r2, [pc, #148]	; (80006a8 <_Z18SystemClock_Configv+0xe0>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <_Z18SystemClock_Configv+0xe0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000638:	2319      	movs	r3, #25
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800063c:	23c0      	movs	r3, #192	; 0xc0
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f001 f8c7 	bl	80017e0 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	bf14      	ite	ne
 8000658:	2301      	movne	r3, #1
 800065a:	2300      	moveq	r3, #0
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000662:	f000 fa75 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2103      	movs	r1, #3
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fb24 	bl	8001cd0 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	bf14      	ite	ne
 800068e:	2301      	movne	r3, #1
 8000690:	2300      	moveq	r3, #0
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000698:	f000 fa5a 	bl	8000b50 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	; 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b092      	sub	sp, #72	; 0x48
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]
 80006ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2220      	movs	r2, #32
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fbe0 	bl	8003e9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006dc:	4b56      	ldr	r3, [pc, #344]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 80006de:	4a57      	ldr	r2, [pc, #348]	; (800083c <_ZL12MX_TIM1_Initv+0x190>)
 80006e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006e2:	4b55      	ldr	r3, [pc, #340]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b53      	ldr	r3, [pc, #332]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 80006ee:	4b52      	ldr	r3, [pc, #328]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 80006f0:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80006f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f6:	4b50      	ldr	r3, [pc, #320]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006fc:	4b4e      	ldr	r3, [pc, #312]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000702:	4b4d      	ldr	r3, [pc, #308]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000708:	484b      	ldr	r0, [pc, #300]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 800070a:	f001 fd10 	bl	800212e <HAL_TIM_PWM_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	bf14      	ite	ne
 8000714:	2301      	movne	r3, #1
 8000716:	2300      	moveq	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800071e:	f000 fa17 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000722:	2300      	movs	r3, #0
 8000724:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800072e:	4619      	mov	r1, r3
 8000730:	4841      	ldr	r0, [pc, #260]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 8000732:	f002 fa51 	bl	8002bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8000746:	f000 fa03 	bl	8000b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074a:	2360      	movs	r3, #96	; 0x60
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000752:	2300      	movs	r3, #0
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000756:	2300      	movs	r3, #0
 8000758:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800075e:	2300      	movs	r3, #0
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	4832      	ldr	r0, [pc, #200]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 8000770:	f001 fddc 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	bf14      	ite	ne
 800077a:	2301      	movne	r3, #1
 800077c:	2300      	moveq	r3, #0
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8000784:	f000 f9e4 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	2204      	movs	r2, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4829      	ldr	r0, [pc, #164]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 8000792:	f001 fdcb 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	bf14      	ite	ne
 800079c:	2301      	movne	r3, #1
 800079e:	2300      	moveq	r3, #0
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80007a6:	f000 f9d3 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	2208      	movs	r2, #8
 80007b0:	4619      	mov	r1, r3
 80007b2:	4821      	ldr	r0, [pc, #132]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 80007b4:	f001 fdba 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	bf14      	ite	ne
 80007be:	2301      	movne	r3, #1
 80007c0:	2300      	moveq	r3, #0
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80007c8:	f000 f9c2 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	220c      	movs	r2, #12
 80007d2:	4619      	mov	r1, r3
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 80007d6:	f001 fda9 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf14      	ite	ne
 80007e0:	2301      	movne	r3, #1
 80007e2:	2300      	moveq	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 80007ea:	f000 f9b1 	bl	8000b50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000806:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 8000812:	f002 fa4f 	bl	8002cb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	bf14      	ite	ne
 800081c:	2301      	movne	r3, #1
 800081e:	2300      	moveq	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8000826:	f000 f993 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800082a:	4803      	ldr	r0, [pc, #12]	; (8000838 <_ZL12MX_TIM1_Initv+0x18c>)
 800082c:	f000 fb0e 	bl	8000e4c <HAL_TIM_MspPostInit>

}
 8000830:	bf00      	nop
 8000832:	3748      	adds	r7, #72	; 0x48
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2000008c 	.word	0x2000008c
 800083c:	40010000 	.word	0x40010000

08000840 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <_ZL12MX_TIM2_Initv+0xb0>)
 800085e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000862:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <_ZL12MX_TIM2_Initv+0xb0>)
 8000866:	225f      	movs	r2, #95	; 0x5f
 8000868:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <_ZL12MX_TIM2_Initv+0xb0>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499999;
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <_ZL12MX_TIM2_Initv+0xb0>)
 8000872:	4a20      	ldr	r2, [pc, #128]	; (80008f4 <_ZL12MX_TIM2_Initv+0xb4>)
 8000874:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000876:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <_ZL12MX_TIM2_Initv+0xb0>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <_ZL12MX_TIM2_Initv+0xb0>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000882:	481b      	ldr	r0, [pc, #108]	; (80008f0 <_ZL12MX_TIM2_Initv+0xb0>)
 8000884:	f001 fc04 	bl	8002090 <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <_ZL12MX_TIM2_Initv+0x5c>
  {
    Error_Handler();
 8000898:	f000 f95a 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	4619      	mov	r1, r3
 80008a8:	4811      	ldr	r0, [pc, #68]	; (80008f0 <_ZL12MX_TIM2_Initv+0xb0>)
 80008aa:	f001 fe01 	bl	80024b0 <HAL_TIM_ConfigClockSource>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bf14      	ite	ne
 80008b4:	2301      	movne	r3, #1
 80008b6:	2300      	moveq	r3, #0
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 80008be:	f000 f947 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ca:	463b      	mov	r3, r7
 80008cc:	4619      	mov	r1, r3
 80008ce:	4808      	ldr	r0, [pc, #32]	; (80008f0 <_ZL12MX_TIM2_Initv+0xb0>)
 80008d0:	f002 f982 	bl	8002bd8 <HAL_TIMEx_MasterConfigSynchronization>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	bf14      	ite	ne
 80008da:	2301      	movne	r3, #1
 80008dc:	2300      	moveq	r3, #0
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 80008e4:	f000 f934 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200000d4 	.word	0x200000d4
 80008f4:	0007a11f 	.word	0x0007a11f

080008f8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <_ZL19MX_USART2_UART_Initv+0x54>)
 80008fe:	4a14      	ldr	r2, [pc, #80]	; (8000950 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <_ZL19MX_USART2_UART_Initv+0x54>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <_ZL19MX_USART2_UART_Initv+0x54>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <_ZL19MX_USART2_UART_Initv+0x54>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000930:	f002 fa12 	bl	8002d58 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf14      	ite	ne
 800093a:	2301      	movne	r3, #1
 800093c:	2300      	moveq	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000944:	f000 f904 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000011c 	.word	0x2000011c
 8000950:	40004400 	.word	0x40004400

08000954 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <_ZL12MX_GPIO_Initv+0x4c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <_ZL12MX_GPIO_Initv+0x4c>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <_ZL12MX_GPIO_Initv+0x4c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <_ZL12MX_GPIO_Initv+0x4c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <_ZL12MX_GPIO_Initv+0x4c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <_ZL12MX_GPIO_Initv+0x4c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
    if(huart == &huart2) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a5e      	ldr	r2, [pc, #376]	; (8000b28 <HAL_UART_RxCpltCallback+0x184>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	f040 80b5 	bne.w	8000b20 <HAL_UART_RxCpltCallback+0x17c>
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&data, 1);
 80009b6:	2201      	movs	r2, #1
 80009b8:	495c      	ldr	r1, [pc, #368]	; (8000b2c <HAL_UART_RxCpltCallback+0x188>)
 80009ba:	485b      	ldr	r0, [pc, #364]	; (8000b28 <HAL_UART_RxCpltCallback+0x184>)
 80009bc:	f002 faab 	bl	8002f16 <HAL_UART_Receive_IT>
        HAL_UART_Transmit(&huart2, (uint8_t*)&data, 1, 1000);
 80009c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c4:	2201      	movs	r2, #1
 80009c6:	4959      	ldr	r1, [pc, #356]	; (8000b2c <HAL_UART_RxCpltCallback+0x188>)
 80009c8:	4857      	ldr	r0, [pc, #348]	; (8000b28 <HAL_UART_RxCpltCallback+0x184>)
 80009ca:	f002 fa12 	bl	8002df2 <HAL_UART_Transmit>

        if(data == '\r' && buff_idx >= 4) {
 80009ce:	4b57      	ldr	r3, [pc, #348]	; (8000b2c <HAL_UART_RxCpltCallback+0x188>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b0d      	cmp	r3, #13
 80009d4:	f040 808f 	bne.w	8000af6 <HAL_UART_RxCpltCallback+0x152>
 80009d8:	4b55      	ldr	r3, [pc, #340]	; (8000b30 <HAL_UART_RxCpltCallback+0x18c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	f240 808a 	bls.w	8000af6 <HAL_UART_RxCpltCallback+0x152>
            //check for M
            if(msg_buff[buff_idx - 4] != 'M')
 80009e2:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <HAL_UART_RxCpltCallback+0x18c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	3b04      	subs	r3, #4
 80009e8:	4a52      	ldr	r2, [pc, #328]	; (8000b34 <HAL_UART_RxCpltCallback+0x190>)
 80009ea:	5cd3      	ldrb	r3, [r2, r3]
 80009ec:	2b4d      	cmp	r3, #77	; 0x4d
 80009ee:	f040 8094 	bne.w	8000b1a <HAL_UART_RxCpltCallback+0x176>
                return;

            // check for n = 1 or 2
            if(!(msg_buff[buff_idx - 3] == '1' || msg_buff[buff_idx - 3] == '2'))
 80009f2:	4b4f      	ldr	r3, [pc, #316]	; (8000b30 <HAL_UART_RxCpltCallback+0x18c>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	3b03      	subs	r3, #3
 80009f8:	4a4e      	ldr	r2, [pc, #312]	; (8000b34 <HAL_UART_RxCpltCallback+0x190>)
 80009fa:	5cd3      	ldrb	r3, [r2, r3]
 80009fc:	2b31      	cmp	r3, #49	; 0x31
 80009fe:	d007      	beq.n	8000a10 <HAL_UART_RxCpltCallback+0x6c>
 8000a00:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <HAL_UART_RxCpltCallback+0x18c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	4a4b      	ldr	r2, [pc, #300]	; (8000b34 <HAL_UART_RxCpltCallback+0x190>)
 8000a08:	5cd3      	ldrb	r3, [r2, r3]
 8000a0a:	2b32      	cmp	r3, #50	; 0x32
 8000a0c:	f040 8087 	bne.w	8000b1e <HAL_UART_RxCpltCallback+0x17a>
                return;

            // get driver number
            int driver_idx = msg_buff[buff_idx - 3] - '0';
 8000a10:	4b47      	ldr	r3, [pc, #284]	; (8000b30 <HAL_UART_RxCpltCallback+0x18c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	4a47      	ldr	r2, [pc, #284]	; (8000b34 <HAL_UART_RxCpltCallback+0x190>)
 8000a18:	5cd3      	ldrb	r3, [r2, r3]
 8000a1a:	3b30      	subs	r3, #48	; 0x30
 8000a1c:	60fb      	str	r3, [r7, #12]

            // get duty cycle
            msg_buff[buff_idx] = 0;
 8000a1e:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <HAL_UART_RxCpltCallback+0x18c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b43      	ldr	r3, [pc, #268]	; (8000b34 <HAL_UART_RxCpltCallback+0x190>)
 8000a26:	2100      	movs	r1, #0
 8000a28:	5499      	strb	r1, [r3, r2]
            long dc_initial = strtol(msg_buff + buff_idx - 2, NULL, 16);
 8000a2a:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <HAL_UART_RxCpltCallback+0x18c>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	3b02      	subs	r3, #2
 8000a30:	4a40      	ldr	r2, [pc, #256]	; (8000b34 <HAL_UART_RxCpltCallback+0x190>)
 8000a32:	4413      	add	r3, r2
 8000a34:	2210      	movs	r2, #16
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f003 fad9 	bl	8003ff0 <strtol>
 8000a3e:	60b8      	str	r0, [r7, #8]
            uint8_t direction;
            uint16_t dc;
            if(dc_initial > 0x7f) {
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	2b7f      	cmp	r3, #127	; 0x7f
 8000a44:	dd0f      	ble.n	8000a66 <HAL_UART_RxCpltCallback+0xc2>
                direction = 1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	75fb      	strb	r3, [r7, #23]
                dc_initial = 0x100 - dc_initial;
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000a50:	60bb      	str	r3, [r7, #8]
                dc = (uint16_t)dc_initial * htim1.Init.Period / 128;
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <HAL_UART_RxCpltCallback+0x194>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	fb02 f303 	mul.w	r3, r2, r3
 8000a60:	09db      	lsrs	r3, r3, #7
 8000a62:	82bb      	strh	r3, [r7, #20]
 8000a64:	e010      	b.n	8000a88 <HAL_UART_RxCpltCallback+0xe4>
            }
            else {
                direction = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	75fb      	strb	r3, [r7, #23]
                dc = (uint16_t)dc_initial * htim1.Init.Period / 127;
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <HAL_UART_RxCpltCallback+0x194>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	fb03 f202 	mul.w	r2, r3, r2
 8000a78:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <HAL_UART_RxCpltCallback+0x198>)
 8000a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a7e:	1ad2      	subs	r2, r2, r3
 8000a80:	0852      	lsrs	r2, r2, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	099b      	lsrs	r3, r3, #6
 8000a86:	82bb      	strh	r3, [r7, #20]
            }

            // update motor driver
            if(driver_idx == 1) {
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d10a      	bne.n	8000aa4 <HAL_UART_RxCpltCallback+0x100>
                driver1.set_direction(direction);
 8000a8e:	7dfb      	ldrb	r3, [r7, #23]
 8000a90:	4619      	mov	r1, r3
 8000a92:	482b      	ldr	r0, [pc, #172]	; (8000b40 <HAL_UART_RxCpltCallback+0x19c>)
 8000a94:	f000 f961 	bl	8000d5a <_ZN12motor_driver13set_directionEh>
                driver1.set_duty_cycle(dc);
 8000a98:	8abb      	ldrh	r3, [r7, #20]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4828      	ldr	r0, [pc, #160]	; (8000b40 <HAL_UART_RxCpltCallback+0x19c>)
 8000a9e:	f000 f8bf 	bl	8000c20 <_ZN12motor_driver14set_duty_cycleEt>
 8000aa2:	e009      	b.n	8000ab8 <HAL_UART_RxCpltCallback+0x114>
            }
            else {
                driver2.set_direction(direction);
 8000aa4:	7dfb      	ldrb	r3, [r7, #23]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4826      	ldr	r0, [pc, #152]	; (8000b44 <HAL_UART_RxCpltCallback+0x1a0>)
 8000aaa:	f000 f956 	bl	8000d5a <_ZN12motor_driver13set_directionEh>
                driver2.set_duty_cycle(dc);
 8000aae:	8abb      	ldrh	r3, [r7, #20]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4824      	ldr	r0, [pc, #144]	; (8000b44 <HAL_UART_RxCpltCallback+0x1a0>)
 8000ab4:	f000 f8b4 	bl	8000c20 <_ZN12motor_driver14set_duty_cycleEt>
            }

            // reset buff_idx
            buff_idx = 0;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <HAL_UART_RxCpltCallback+0x18c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]

            // send response
            uint16_t size;
            if(direction == 0)
 8000abe:	7dfb      	ldrb	r3, [r7, #23]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d108      	bne.n	8000ad6 <HAL_UART_RxCpltCallback+0x132>
                size = sprintf(msg_buff, "\nMotor %d set to forward at duty cycle %d\r\n", driver_idx, dc);
 8000ac4:	8abb      	ldrh	r3, [r7, #20]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	491f      	ldr	r1, [pc, #124]	; (8000b48 <HAL_UART_RxCpltCallback+0x1a4>)
 8000aca:	481a      	ldr	r0, [pc, #104]	; (8000b34 <HAL_UART_RxCpltCallback+0x190>)
 8000acc:	f003 f9ee 	bl	8003eac <siprintf>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	827b      	strh	r3, [r7, #18]
 8000ad4:	e007      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0x142>
            else
                size = sprintf(msg_buff, "\nMotor %d set to reverse at duty cycle %d\r\n", driver_idx, dc);
 8000ad6:	8abb      	ldrh	r3, [r7, #20]
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	491c      	ldr	r1, [pc, #112]	; (8000b4c <HAL_UART_RxCpltCallback+0x1a8>)
 8000adc:	4815      	ldr	r0, [pc, #84]	; (8000b34 <HAL_UART_RxCpltCallback+0x190>)
 8000ade:	f003 f9e5 	bl	8003eac <siprintf>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	827b      	strh	r3, [r7, #18]
            HAL_UART_Transmit(&huart2, (uint8_t*)msg_buff, size, 1000);
 8000ae6:	8a7a      	ldrh	r2, [r7, #18]
 8000ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aec:	4911      	ldr	r1, [pc, #68]	; (8000b34 <HAL_UART_RxCpltCallback+0x190>)
 8000aee:	480e      	ldr	r0, [pc, #56]	; (8000b28 <HAL_UART_RxCpltCallback+0x184>)
 8000af0:	f002 f97f 	bl	8002df2 <HAL_UART_Transmit>
 8000af4:	e014      	b.n	8000b20 <HAL_UART_RxCpltCallback+0x17c>
        }
        else if(buff_idx < 100) {
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_UART_RxCpltCallback+0x18c>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b63      	cmp	r3, #99	; 0x63
 8000afc:	d810      	bhi.n	8000b20 <HAL_UART_RxCpltCallback+0x17c>
            msg_buff[buff_idx] = data;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_UART_RxCpltCallback+0x18c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_UART_RxCpltCallback+0x188>)
 8000b06:	7819      	ldrb	r1, [r3, #0]
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_UART_RxCpltCallback+0x190>)
 8000b0a:	5499      	strb	r1, [r3, r2]
            buff_idx++;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_UART_RxCpltCallback+0x18c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	3301      	adds	r3, #1
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_UART_RxCpltCallback+0x18c>)
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	e002      	b.n	8000b20 <HAL_UART_RxCpltCallback+0x17c>
                return;
 8000b1a:	bf00      	nop
 8000b1c:	e000      	b.n	8000b20 <HAL_UART_RxCpltCallback+0x17c>
                return;
 8000b1e:	bf00      	nop
        }
    }
}
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000011c 	.word	0x2000011c
 8000b2c:	20000180 	.word	0x20000180
 8000b30:	200001e8 	.word	0x200001e8
 8000b34:	20000184 	.word	0x20000184
 8000b38:	2000008c 	.word	0x2000008c
 8000b3c:	02040811 	.word	0x02040811
 8000b40:	20000160 	.word	0x20000160
 8000b44:	20000170 	.word	0x20000170
 8000b48:	080048b8 	.word	0x080048b8
 8000b4c:	080048e4 	.word	0x080048e4

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <_Z41__static_initialization_and_destruction_0ii>:
    {
    }
  /* USER CODE END Error_Handler_Debug */
}
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d114      	bne.n	8000b96 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d10f      	bne.n	8000b96 <_Z41__static_initialization_and_destruction_0ii+0x3a>
motor_driver driver1 = motor_driver(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2, 0);
 8000b76:	2300      	movs	r3, #0
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000b82:	f000 f81b 	bl	8000bbc <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>
motor_driver driver2 = motor_driver(&htim1, TIM_CHANNEL_3, TIM_CHANNEL_4, 0);
 8000b86:	2300      	movs	r3, #0
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	2208      	movs	r2, #8
 8000b8e:	4904      	ldr	r1, [pc, #16]	; (8000ba0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000b92:	f000 f813 	bl	8000bbc <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000008c 	.word	0x2000008c
 8000ba4:	20000160 	.word	0x20000160
 8000ba8:	20000170 	.word	0x20000170

08000bac <_GLOBAL__sub_I_htim1>:
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff ffd1 	bl	8000b5c <_Z41__static_initialization_and_destruction_0ii>
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_ZN12motor_driverC1EP17TIM_HandleTypeDefmmh>:
 *      Author: Ryan
 */

#include "motor_driver.h"

motor_driver::motor_driver(TIM_HandleTypeDef* _htim,
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	603b      	str	r3, [r7, #0]
                           uint32_t _ch2,
                           uint8_t _direction)
    :htim(_htim),
     ch1(_ch1),
     ch2(_ch2),
     direction(_direction)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	7e3a      	ldrb	r2, [r7, #24]
 8000be0:	731a      	strb	r2, [r3, #12]
{

}
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4618      	mov	r0, r3
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <_ZN12motor_driver13enable_driverEv>:

void motor_driver::enable_driver() {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, ch1);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4619      	mov	r1, r3
 8000c02:	4610      	mov	r0, r2
 8000c04:	f001 fae2 	bl	80021cc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, ch2);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	4619      	mov	r1, r3
 8000c12:	4610      	mov	r0, r2
 8000c14:	f001 fada 	bl	80021cc <HAL_TIM_PWM_Start>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_ZN12motor_driver14set_duty_cycleEt>:
void motor_driver::disable_driver() {
    HAL_TIM_PWM_Stop(htim, ch1);
    HAL_TIM_PWM_Stop(htim, ch2);
}

void motor_driver::set_duty_cycle(uint16_t dc) {
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
    // forward
    if(direction == 0) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	7b1b      	ldrb	r3, [r3, #12]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d146      	bne.n	8000cc2 <_ZN12motor_driver14set_duty_cycleEt+0xa2>
        __HAL_TIM_SET_COMPARE(htim, ch1, dc);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d105      	bne.n	8000c48 <_ZN12motor_driver14set_duty_cycleEt+0x28>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	635a      	str	r2, [r3, #52]	; 0x34
 8000c46:	e018      	b.n	8000c7a <_ZN12motor_driver14set_duty_cycleEt+0x5a>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d105      	bne.n	8000c5c <_ZN12motor_driver14set_duty_cycleEt+0x3c>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	639a      	str	r2, [r3, #56]	; 0x38
 8000c5a:	e00e      	b.n	8000c7a <_ZN12motor_driver14set_duty_cycleEt+0x5a>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d105      	bne.n	8000c70 <_ZN12motor_driver14set_duty_cycleEt+0x50>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	887a      	ldrh	r2, [r7, #2]
 8000c6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c6e:	e004      	b.n	8000c7a <_ZN12motor_driver14set_duty_cycleEt+0x5a>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d105      	bne.n	8000c8e <_ZN12motor_driver14set_duty_cycleEt+0x6e>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34
    // reverse
    else {
        __HAL_TIM_SET_COMPARE(htim, ch1, 0);
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
    }
}
 8000c8c:	e05f      	b.n	8000d4e <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d105      	bne.n	8000ca2 <_ZN12motor_driver14set_duty_cycleEt+0x82>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ca0:	e055      	b.n	8000d4e <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2b08      	cmp	r3, #8
 8000ca8:	d105      	bne.n	8000cb6 <_ZN12motor_driver14set_duty_cycleEt+0x96>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000cb4:	e04b      	b.n	8000d4e <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, 0);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000cc0:	e045      	b.n	8000d4e <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch1, 0);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d105      	bne.n	8000cd6 <_ZN12motor_driver14set_duty_cycleEt+0xb6>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	635a      	str	r2, [r3, #52]	; 0x34
 8000cd4:	e018      	b.n	8000d08 <_ZN12motor_driver14set_duty_cycleEt+0xe8>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d105      	bne.n	8000cea <_ZN12motor_driver14set_duty_cycleEt+0xca>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ce8:	e00e      	b.n	8000d08 <_ZN12motor_driver14set_duty_cycleEt+0xe8>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b08      	cmp	r3, #8
 8000cf0:	d105      	bne.n	8000cfe <_ZN12motor_driver14set_duty_cycleEt+0xde>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cfc:	e004      	b.n	8000d08 <_ZN12motor_driver14set_duty_cycleEt+0xe8>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2200      	movs	r2, #0
 8000d06:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d105      	bne.n	8000d1c <_ZN12motor_driver14set_duty_cycleEt+0xfc>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	887a      	ldrh	r2, [r7, #2]
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d1a:	e018      	b.n	8000d4e <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	d105      	bne.n	8000d30 <_ZN12motor_driver14set_duty_cycleEt+0x110>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	887a      	ldrh	r2, [r7, #2]
 8000d2c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d2e:	e00e      	b.n	8000d4e <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	2b08      	cmp	r3, #8
 8000d36:	d105      	bne.n	8000d44 <_ZN12motor_driver14set_duty_cycleEt+0x124>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	887a      	ldrh	r2, [r7, #2]
 8000d40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d42:	e004      	b.n	8000d4e <_ZN12motor_driver14set_duty_cycleEt+0x12e>
        __HAL_TIM_SET_COMPARE(htim, ch2, dc);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_ZN12motor_driver13set_directionEh>:

void motor_driver::set_direction(uint8_t direction) {
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	70fb      	strb	r3, [r7, #3]
    this->direction = direction;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	78fa      	ldrb	r2, [r7, #3]
 8000d6a:	731a      	strb	r2, [r3, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d10d      	bne.n	8000df6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_TIM_PWM_MspInit+0x40>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <HAL_TIM_PWM_MspInit+0x40>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <HAL_TIM_PWM_MspInit+0x40>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40010000 	.word	0x40010000
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e1c:	d10d      	bne.n	8000e3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_TIM_Base_MspInit+0x3c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_TIM_Base_MspInit+0x3c>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_TIM_Base_MspInit+0x3c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <HAL_TIM_MspPostInit+0x68>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d11e      	bne.n	8000eac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_TIM_MspPostInit+0x6c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_TIM_MspPostInit+0x6c>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_TIM_MspPostInit+0x6c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000e8a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_TIM_MspPostInit+0x70>)
 8000ea8:	f000 fb16 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40010000 	.word	0x40010000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1d      	ldr	r2, [pc, #116]	; (8000f54 <HAL_UART_MspInit+0x94>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d133      	bne.n	8000f4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <HAL_UART_MspInit+0x9c>)
 8000f36:	f000 facf 	bl	80014d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2026      	movs	r0, #38	; 0x26
 8000f40:	f000 fa01 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f44:	2026      	movs	r0, #38	; 0x26
 8000f46:	f000 fa1a 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	; 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40004400 	.word	0x40004400
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f000 f8d0 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <USART2_IRQHandler+0x10>)
 8000fba:	f001 ffdd 	bl	8002f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000011c 	.word	0x2000011c

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f002 ff26 	bl	8003e48 <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20020000 	.word	0x20020000
 8001028:	00000400 	.word	0x00000400
 800102c:	200001ec 	.word	0x200001ec
 8001030:	20000208 	.word	0x20000208

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800105e:	490e      	ldr	r1, [pc, #56]	; (8001098 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001074:	4c0b      	ldr	r4, [pc, #44]	; (80010a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001082:	f7ff ffd7 	bl	8001034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f002 fee5 	bl	8003e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff fa7b 	bl	8000584 <main>
  bx  lr    
 800108e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800109c:	08004a70 	.word	0x08004a70
  ldr r2, =_sbss
 80010a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010a4:	20000204 	.word	0x20000204

080010a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <HAL_Init+0x40>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_Init+0x40>)
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x40>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f92b 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	200f      	movs	r0, #15
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fe4a 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023c00 	.word	0x40023c00

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f943 	bl	800139a <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f90b 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000000 	.word	0x20000000
 8001148:	20000008 	.word	0x20000008
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	200001f0 	.word	0x200001f0

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	200001f0 	.word	0x200001f0

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff29 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff3e 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff31 	bl	80011f4 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa2 	bl	80012ec <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff feda 	bl	8001178 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d008      	beq.n	80013e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e052      	b.n	800148a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0216 	bic.w	r2, r2, #22
 80013f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001402:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	2b00      	cmp	r3, #0
 800140a:	d103      	bne.n	8001414 <HAL_DMA_Abort+0x62>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001410:	2b00      	cmp	r3, #0
 8001412:	d007      	beq.n	8001424 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0208 	bic.w	r2, r2, #8
 8001422:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001434:	e013      	b.n	800145e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001436:	f7ff fe9f 	bl	8001178 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b05      	cmp	r3, #5
 8001442:	d90c      	bls.n	800145e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2220      	movs	r2, #32
 8001448:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2203      	movs	r2, #3
 800144e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e015      	b.n	800148a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1e4      	bne.n	8001436 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001470:	223f      	movs	r2, #63	; 0x3f
 8001472:	409a      	lsls	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d004      	beq.n	80014b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e00c      	b.n	80014ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2205      	movs	r2, #5
 80014b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	e159      	b.n	80017a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f4:	2201      	movs	r2, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	429a      	cmp	r2, r3
 800150e:	f040 8148 	bne.w	80017a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b01      	cmp	r3, #1
 800151c:	d005      	beq.n	800152a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001526:	2b02      	cmp	r3, #2
 8001528:	d130      	bne.n	800158c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001560:	2201      	movs	r2, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 0201 	and.w	r2, r3, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b03      	cmp	r3, #3
 8001596:	d017      	beq.n	80015c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d123      	bne.n	800161c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	08da      	lsrs	r2, r3, #3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3208      	adds	r2, #8
 80015dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	220f      	movs	r2, #15
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	69b9      	ldr	r1, [r7, #24]
 8001618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0203 	and.w	r2, r3, #3
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80a2 	beq.w	80017a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b57      	ldr	r3, [pc, #348]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a56      	ldr	r2, [pc, #344]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b54      	ldr	r3, [pc, #336]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800167a:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <HAL_GPIO_Init+0x2ec>)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a49      	ldr	r2, [pc, #292]	; (80017c8 <HAL_GPIO_Init+0x2f0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d019      	beq.n	80016da <HAL_GPIO_Init+0x202>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a48      	ldr	r2, [pc, #288]	; (80017cc <HAL_GPIO_Init+0x2f4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0x1fe>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a47      	ldr	r2, [pc, #284]	; (80017d0 <HAL_GPIO_Init+0x2f8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00d      	beq.n	80016d2 <HAL_GPIO_Init+0x1fa>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a46      	ldr	r2, [pc, #280]	; (80017d4 <HAL_GPIO_Init+0x2fc>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d007      	beq.n	80016ce <HAL_GPIO_Init+0x1f6>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a45      	ldr	r2, [pc, #276]	; (80017d8 <HAL_GPIO_Init+0x300>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_GPIO_Init+0x1f2>
 80016c6:	2304      	movs	r3, #4
 80016c8:	e008      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016ca:	2307      	movs	r3, #7
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e004      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016da:	2300      	movs	r3, #0
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	4093      	lsls	r3, r2
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ec:	4935      	ldr	r1, [pc, #212]	; (80017c4 <HAL_GPIO_Init+0x2ec>)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016fa:	4b38      	ldr	r3, [pc, #224]	; (80017dc <HAL_GPIO_Init+0x304>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800171e:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <HAL_GPIO_Init+0x304>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001724:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_GPIO_Init+0x304>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001748:	4a24      	ldr	r2, [pc, #144]	; (80017dc <HAL_GPIO_Init+0x304>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_GPIO_Init+0x304>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001772:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <HAL_GPIO_Init+0x304>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_GPIO_Init+0x304>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800179c:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <HAL_GPIO_Init+0x304>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	f67f aea2 	bls.w	80014f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40013800 	.word	0x40013800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	40020400 	.word	0x40020400
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020c00 	.word	0x40020c00
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40013c00 	.word	0x40013c00

080017e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e267      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d075      	beq.n	80018ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017fe:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b04      	cmp	r3, #4
 8001808:	d00c      	beq.n	8001824 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180a:	4b85      	ldr	r3, [pc, #532]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001812:	2b08      	cmp	r3, #8
 8001814:	d112      	bne.n	800183c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001816:	4b82      	ldr	r3, [pc, #520]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001822:	d10b      	bne.n	800183c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	4b7e      	ldr	r3, [pc, #504]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d05b      	beq.n	80018e8 <HAL_RCC_OscConfig+0x108>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d157      	bne.n	80018e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e242      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001844:	d106      	bne.n	8001854 <HAL_RCC_OscConfig+0x74>
 8001846:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a75      	ldr	r2, [pc, #468]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e01d      	b.n	8001890 <HAL_RCC_OscConfig+0xb0>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0x98>
 800185e:	4b70      	ldr	r3, [pc, #448]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6f      	ldr	r2, [pc, #444]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b6d      	ldr	r3, [pc, #436]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a6c      	ldr	r2, [pc, #432]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0xb0>
 8001878:	4b69      	ldr	r3, [pc, #420]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a68      	ldr	r2, [pc, #416]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800187e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b66      	ldr	r3, [pc, #408]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a65      	ldr	r2, [pc, #404]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fc6e 	bl	8001178 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff fc6a 	bl	8001178 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e207      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0xc0>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fc5a 	bl	8001178 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff fc56 	bl	8001178 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	; 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e1f3      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0xe8>
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d063      	beq.n	80019be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018f6:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800190a:	2b08      	cmp	r3, #8
 800190c:	d11c      	bne.n	8001948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800190e:	4b44      	ldr	r3, [pc, #272]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x152>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e1c7      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4937      	ldr	r1, [pc, #220]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	e03a      	b.n	80019be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_RCC_OscConfig+0x244>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7ff fc0f 	bl	8001178 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff fc0b 	bl	8001178 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1a8      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4925      	ldr	r1, [pc, #148]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_OscConfig+0x244>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fbee 	bl	8001178 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff fbea 	bl	8001178 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e187      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d036      	beq.n	8001a38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d016      	beq.n	8001a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_RCC_OscConfig+0x248>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d8:	f7ff fbce 	bl	8001178 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff fbca 	bl	8001178 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e167      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80019f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x200>
 80019fe:	e01b      	b.n	8001a38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_OscConfig+0x248>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fbb7 	bl	8001178 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	e00e      	b.n	8001a2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fbb3 	bl	8001178 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d907      	bls.n	8001a2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e150      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	42470000 	.word	0x42470000
 8001a28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2c:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1ea      	bne.n	8001a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8097 	beq.w	8001b74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4a:	4b81      	ldr	r3, [pc, #516]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	4b7d      	ldr	r3, [pc, #500]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a7c      	ldr	r2, [pc, #496]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b7a      	ldr	r3, [pc, #488]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a72:	2301      	movs	r3, #1
 8001a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a76:	4b77      	ldr	r3, [pc, #476]	; (8001c54 <HAL_RCC_OscConfig+0x474>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d118      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a82:	4b74      	ldr	r3, [pc, #464]	; (8001c54 <HAL_RCC_OscConfig+0x474>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a73      	ldr	r2, [pc, #460]	; (8001c54 <HAL_RCC_OscConfig+0x474>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fb73 	bl	8001178 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a96:	f7ff fb6f 	bl	8001178 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e10c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0x474>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x2ea>
 8001abc:	4b64      	ldr	r3, [pc, #400]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac0:	4a63      	ldr	r2, [pc, #396]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac8:	e01c      	b.n	8001b04 <HAL_RCC_OscConfig+0x324>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x30c>
 8001ad2:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	4a5e      	ldr	r2, [pc, #376]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ade:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	4a5b      	ldr	r2, [pc, #364]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0x324>
 8001aec:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	6713      	str	r3, [r2, #112]	; 0x70
 8001af8:	4b55      	ldr	r3, [pc, #340]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afc:	4a54      	ldr	r2, [pc, #336]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001afe:	f023 0304 	bic.w	r3, r3, #4
 8001b02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d015      	beq.n	8001b38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7ff fb34 	bl	8001178 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b14:	f7ff fb30 	bl	8001178 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e0cb      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2a:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0ee      	beq.n	8001b14 <HAL_RCC_OscConfig+0x334>
 8001b36:	e014      	b.n	8001b62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b38:	f7ff fb1e 	bl	8001178 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff fb1a 	bl	8001178 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e0b5      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b56:	4b3e      	ldr	r3, [pc, #248]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ee      	bne.n	8001b40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b68:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	4a38      	ldr	r2, [pc, #224]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80a1 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b7e:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d05c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d141      	bne.n	8001c16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_RCC_OscConfig+0x478>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff faee 	bl	8001178 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff faea 	bl	8001178 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e087      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69da      	ldr	r2, [r3, #28]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	019b      	lsls	r3, r3, #6
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	041b      	lsls	r3, r3, #16
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	061b      	lsls	r3, r3, #24
 8001be2:	491b      	ldr	r1, [pc, #108]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_RCC_OscConfig+0x478>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff fac3 	bl	8001178 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff fabf 	bl	8001178 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e05c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x416>
 8001c14:	e054      	b.n	8001cc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_RCC_OscConfig+0x478>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff faac 	bl	8001178 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff faa8 	bl	8001178 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e045      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x444>
 8001c42:	e03d      	b.n	8001cc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e038      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000
 8001c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_RCC_OscConfig+0x4ec>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d028      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d121      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d11a      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d111      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	085b      	lsrs	r3, r3, #1
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0cc      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b68      	ldr	r3, [pc, #416]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d90c      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0b8      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d020      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d24:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d48:	4b50      	ldr	r3, [pc, #320]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	494d      	ldr	r1, [pc, #308]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d044      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d119      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e07f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8e:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e06f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e067      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f023 0203 	bic.w	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4934      	ldr	r1, [pc, #208]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc0:	f7ff f9da 	bl	8001178 <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc8:	f7ff f9d6 	bl	8001178 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e04f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 020c 	and.w	r2, r3, #12
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d1eb      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d20c      	bcs.n	8001e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e032      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4916      	ldr	r1, [pc, #88]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	490e      	ldr	r1, [pc, #56]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e56:	f000 f821 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	490a      	ldr	r1, [pc, #40]	; (8001e90 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	5ccb      	ldrb	r3, [r1, r3]
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x1c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f93a 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023c00 	.word	0x40023c00
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	08004910 	.word	0x08004910
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea0:	b090      	sub	sp, #64	; 0x40
 8001ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eac:	2300      	movs	r3, #0
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eb4:	4b59      	ldr	r3, [pc, #356]	; (800201c <HAL_RCC_GetSysClockFreq+0x180>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d00d      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x40>
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	f200 80a1 	bhi.w	8002008 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d003      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ece:	e09b      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ed0:	4b53      	ldr	r3, [pc, #332]	; (8002020 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ed2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ed4:	e09b      	b.n	800200e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ed6:	4b53      	ldr	r3, [pc, #332]	; (8002024 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ed8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001eda:	e098      	b.n	800200e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001edc:	4b4f      	ldr	r3, [pc, #316]	; (800201c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ee6:	4b4d      	ldr	r3, [pc, #308]	; (800201c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d028      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef2:	4b4a      	ldr	r3, [pc, #296]	; (800201c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	2200      	movs	r2, #0
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	627a      	str	r2, [r7, #36]	; 0x24
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f04:	2100      	movs	r1, #0
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f08:	fb03 f201 	mul.w	r2, r3, r1
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	fb00 f303 	mul.w	r3, r0, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	4a43      	ldr	r2, [pc, #268]	; (8002024 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f16:	fba0 1202 	umull	r1, r2, r0, r2
 8001f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f22:	4413      	add	r3, r2
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	2200      	movs	r2, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	61fa      	str	r2, [r7, #28]
 8001f2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f36:	f7fe f9a3 	bl	8000280 <__aeabi_uldivmod>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4613      	mov	r3, r2
 8001f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f42:	e053      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f44:	4b35      	ldr	r3, [pc, #212]	; (800201c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	099b      	lsrs	r3, r3, #6
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	617a      	str	r2, [r7, #20]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f56:	f04f 0b00 	mov.w	fp, #0
 8001f5a:	4652      	mov	r2, sl
 8001f5c:	465b      	mov	r3, fp
 8001f5e:	f04f 0000 	mov.w	r0, #0
 8001f62:	f04f 0100 	mov.w	r1, #0
 8001f66:	0159      	lsls	r1, r3, #5
 8001f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f6c:	0150      	lsls	r0, r2, #5
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	ebb2 080a 	subs.w	r8, r2, sl
 8001f76:	eb63 090b 	sbc.w	r9, r3, fp
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f8e:	ebb2 0408 	subs.w	r4, r2, r8
 8001f92:	eb63 0509 	sbc.w	r5, r3, r9
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	00eb      	lsls	r3, r5, #3
 8001fa0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fa4:	00e2      	lsls	r2, r4, #3
 8001fa6:	4614      	mov	r4, r2
 8001fa8:	461d      	mov	r5, r3
 8001faa:	eb14 030a 	adds.w	r3, r4, sl
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	eb45 030b 	adc.w	r3, r5, fp
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	028b      	lsls	r3, r1, #10
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fcc:	4621      	mov	r1, r4
 8001fce:	028a      	lsls	r2, r1, #10
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	60fa      	str	r2, [r7, #12]
 8001fdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fe0:	f7fe f94e 	bl	8000280 <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4613      	mov	r3, r2
 8001fea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002006:	e002      	b.n	800200e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_RCC_GetSysClockFreq+0x184>)
 800200a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800200c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002010:	4618      	mov	r0, r3
 8002012:	3740      	adds	r7, #64	; 0x40
 8002014:	46bd      	mov	sp, r7
 8002016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	00f42400 	.word	0x00f42400
 8002024:	017d7840 	.word	0x017d7840

08002028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_RCC_GetHCLKFreq+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000000 	.word	0x20000000

08002040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002044:	f7ff fff0 	bl	8002028 <HAL_RCC_GetHCLKFreq>
 8002048:	4602      	mov	r2, r0
 800204a:	4b05      	ldr	r3, [pc, #20]	; (8002060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	0a9b      	lsrs	r3, r3, #10
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	4903      	ldr	r1, [pc, #12]	; (8002064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002056:	5ccb      	ldrb	r3, [r1, r3]
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800205c:	4618      	mov	r0, r3
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	08004920 	.word	0x08004920

08002068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800206c:	f7ff ffdc 	bl	8002028 <HAL_RCC_GetHCLKFreq>
 8002070:	4602      	mov	r2, r0
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	0b5b      	lsrs	r3, r3, #13
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	4903      	ldr	r1, [pc, #12]	; (800208c <HAL_RCC_GetPCLK2Freq+0x24>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002084:	4618      	mov	r0, r3
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800
 800208c:	08004920 	.word	0x08004920

08002090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e041      	b.n	8002126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fea8 	bl	8000e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3304      	adds	r3, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f000 fab6 	bl	8002640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e041      	b.n	80021c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d106      	bne.n	800215a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7fe fe37 	bl	8000dc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3304      	adds	r3, #4
 800216a:	4619      	mov	r1, r3
 800216c:	4610      	mov	r0, r2
 800216e:	f000 fa67 	bl	8002640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <HAL_TIM_PWM_Start+0x24>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e022      	b.n	8002236 <HAL_TIM_PWM_Start+0x6a>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d109      	bne.n	800220a <HAL_TIM_PWM_Start+0x3e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	bf14      	ite	ne
 8002202:	2301      	movne	r3, #1
 8002204:	2300      	moveq	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	e015      	b.n	8002236 <HAL_TIM_PWM_Start+0x6a>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d109      	bne.n	8002224 <HAL_TIM_PWM_Start+0x58>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	bf14      	ite	ne
 800221c:	2301      	movne	r3, #1
 800221e:	2300      	moveq	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	e008      	b.n	8002236 <HAL_TIM_PWM_Start+0x6a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e068      	b.n	8002310 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <HAL_TIM_PWM_Start+0x82>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800224c:	e013      	b.n	8002276 <HAL_TIM_PWM_Start+0xaa>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d104      	bne.n	800225e <HAL_TIM_PWM_Start+0x92>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800225c:	e00b      	b.n	8002276 <HAL_TIM_PWM_Start+0xaa>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d104      	bne.n	800226e <HAL_TIM_PWM_Start+0xa2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800226c:	e003      	b.n	8002276 <HAL_TIM_PWM_Start+0xaa>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fc84 	bl	8002b8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a23      	ldr	r2, [pc, #140]	; (8002318 <HAL_TIM_PWM_Start+0x14c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d107      	bne.n	800229e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800229c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <HAL_TIM_PWM_Start+0x14c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d018      	beq.n	80022da <HAL_TIM_PWM_Start+0x10e>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b0:	d013      	beq.n	80022da <HAL_TIM_PWM_Start+0x10e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_TIM_PWM_Start+0x150>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00e      	beq.n	80022da <HAL_TIM_PWM_Start+0x10e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a17      	ldr	r2, [pc, #92]	; (8002320 <HAL_TIM_PWM_Start+0x154>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d009      	beq.n	80022da <HAL_TIM_PWM_Start+0x10e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a16      	ldr	r2, [pc, #88]	; (8002324 <HAL_TIM_PWM_Start+0x158>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d004      	beq.n	80022da <HAL_TIM_PWM_Start+0x10e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a14      	ldr	r2, [pc, #80]	; (8002328 <HAL_TIM_PWM_Start+0x15c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d111      	bne.n	80022fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d010      	beq.n	800230e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fc:	e007      	b.n	800230e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40010000 	.word	0x40010000
 800231c:	40000400 	.word	0x40000400
 8002320:	40000800 	.word	0x40000800
 8002324:	40000c00 	.word	0x40000c00
 8002328:	40014000 	.word	0x40014000

0800232c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002346:	2302      	movs	r3, #2
 8002348:	e0ae      	b.n	80024a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b0c      	cmp	r3, #12
 8002356:	f200 809f 	bhi.w	8002498 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800235a:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800235c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002360:	08002395 	.word	0x08002395
 8002364:	08002499 	.word	0x08002499
 8002368:	08002499 	.word	0x08002499
 800236c:	08002499 	.word	0x08002499
 8002370:	080023d5 	.word	0x080023d5
 8002374:	08002499 	.word	0x08002499
 8002378:	08002499 	.word	0x08002499
 800237c:	08002499 	.word	0x08002499
 8002380:	08002417 	.word	0x08002417
 8002384:	08002499 	.word	0x08002499
 8002388:	08002499 	.word	0x08002499
 800238c:	08002499 	.word	0x08002499
 8002390:	08002457 	.word	0x08002457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f9d0 	bl	8002740 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0208 	orr.w	r2, r2, #8
 80023ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0204 	bic.w	r2, r2, #4
 80023be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6999      	ldr	r1, [r3, #24]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	619a      	str	r2, [r3, #24]
      break;
 80023d2:	e064      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fa16 	bl	800280c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6999      	ldr	r1, [r3, #24]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	021a      	lsls	r2, r3, #8
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	619a      	str	r2, [r3, #24]
      break;
 8002414:	e043      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fa61 	bl	80028e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0208 	orr.w	r2, r2, #8
 8002430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0204 	bic.w	r2, r2, #4
 8002440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69d9      	ldr	r1, [r3, #28]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	61da      	str	r2, [r3, #28]
      break;
 8002454:	e023      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	4618      	mov	r0, r3
 800245e:	f000 faab 	bl	80029b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69da      	ldr	r2, [r3, #28]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69d9      	ldr	r1, [r3, #28]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	021a      	lsls	r2, r3, #8
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	61da      	str	r2, [r3, #28]
      break;
 8002496:	e002      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	75fb      	strb	r3, [r7, #23]
      break;
 800249c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_TIM_ConfigClockSource+0x1c>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e0b4      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x186>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002504:	d03e      	beq.n	8002584 <HAL_TIM_ConfigClockSource+0xd4>
 8002506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250a:	f200 8087 	bhi.w	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800250e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002512:	f000 8086 	beq.w	8002622 <HAL_TIM_ConfigClockSource+0x172>
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251a:	d87f      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800251c:	2b70      	cmp	r3, #112	; 0x70
 800251e:	d01a      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0xa6>
 8002520:	2b70      	cmp	r3, #112	; 0x70
 8002522:	d87b      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 8002524:	2b60      	cmp	r3, #96	; 0x60
 8002526:	d050      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x11a>
 8002528:	2b60      	cmp	r3, #96	; 0x60
 800252a:	d877      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800252c:	2b50      	cmp	r3, #80	; 0x50
 800252e:	d03c      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0xfa>
 8002530:	2b50      	cmp	r3, #80	; 0x50
 8002532:	d873      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d058      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x13a>
 8002538:	2b40      	cmp	r3, #64	; 0x40
 800253a:	d86f      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800253c:	2b30      	cmp	r3, #48	; 0x30
 800253e:	d064      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002540:	2b30      	cmp	r3, #48	; 0x30
 8002542:	d86b      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 8002544:	2b20      	cmp	r3, #32
 8002546:	d060      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002548:	2b20      	cmp	r3, #32
 800254a:	d867      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b00      	cmp	r3, #0
 800254e:	d05c      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002550:	2b10      	cmp	r3, #16
 8002552:	d05a      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002554:	e062      	b.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6899      	ldr	r1, [r3, #8]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f000 faf1 	bl	8002b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	609a      	str	r2, [r3, #8]
      break;
 8002582:	e04f      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6899      	ldr	r1, [r3, #8]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f000 fada 	bl	8002b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025a6:	609a      	str	r2, [r3, #8]
      break;
 80025a8:	e03c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6859      	ldr	r1, [r3, #4]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f000 fa4e 	bl	8002a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2150      	movs	r1, #80	; 0x50
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 faa7 	bl	8002b16 <TIM_ITRx_SetConfig>
      break;
 80025c8:	e02c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f000 fa6d 	bl	8002ab6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2160      	movs	r1, #96	; 0x60
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fa97 	bl	8002b16 <TIM_ITRx_SetConfig>
      break;
 80025e8:	e01c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f000 fa2e 	bl	8002a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fa87 	bl	8002b16 <TIM_ITRx_SetConfig>
      break;
 8002608:	e00c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4619      	mov	r1, r3
 8002614:	4610      	mov	r0, r2
 8002616:	f000 fa7e 	bl	8002b16 <TIM_ITRx_SetConfig>
      break;
 800261a:	e003      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e000      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a34      	ldr	r2, [pc, #208]	; (8002724 <TIM_Base_SetConfig+0xe4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00f      	beq.n	8002678 <TIM_Base_SetConfig+0x38>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265e:	d00b      	beq.n	8002678 <TIM_Base_SetConfig+0x38>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a31      	ldr	r2, [pc, #196]	; (8002728 <TIM_Base_SetConfig+0xe8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d007      	beq.n	8002678 <TIM_Base_SetConfig+0x38>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a30      	ldr	r2, [pc, #192]	; (800272c <TIM_Base_SetConfig+0xec>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d003      	beq.n	8002678 <TIM_Base_SetConfig+0x38>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a2f      	ldr	r2, [pc, #188]	; (8002730 <TIM_Base_SetConfig+0xf0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d108      	bne.n	800268a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a25      	ldr	r2, [pc, #148]	; (8002724 <TIM_Base_SetConfig+0xe4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d01b      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002698:	d017      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a22      	ldr	r2, [pc, #136]	; (8002728 <TIM_Base_SetConfig+0xe8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a21      	ldr	r2, [pc, #132]	; (800272c <TIM_Base_SetConfig+0xec>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00f      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a20      	ldr	r2, [pc, #128]	; (8002730 <TIM_Base_SetConfig+0xf0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00b      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <TIM_Base_SetConfig+0xf4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <TIM_Base_SetConfig+0xf8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d003      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a1d      	ldr	r2, [pc, #116]	; (800273c <TIM_Base_SetConfig+0xfc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d108      	bne.n	80026dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a08      	ldr	r2, [pc, #32]	; (8002724 <TIM_Base_SetConfig+0xe4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d103      	bne.n	8002710 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	615a      	str	r2, [r3, #20]
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40010000 	.word	0x40010000
 8002728:	40000400 	.word	0x40000400
 800272c:	40000800 	.word	0x40000800
 8002730:	40000c00 	.word	0x40000c00
 8002734:	40014000 	.word	0x40014000
 8002738:	40014400 	.word	0x40014400
 800273c:	40014800 	.word	0x40014800

08002740 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f023 0201 	bic.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0303 	bic.w	r3, r3, #3
 8002776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f023 0302 	bic.w	r3, r3, #2
 8002788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <TIM_OC1_SetConfig+0xc8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d10c      	bne.n	80027b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f023 0308 	bic.w	r3, r3, #8
 80027a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a13      	ldr	r2, [pc, #76]	; (8002808 <TIM_OC1_SetConfig+0xc8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d111      	bne.n	80027e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	621a      	str	r2, [r3, #32]
}
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40010000 	.word	0x40010000

0800280c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f023 0210 	bic.w	r2, r3, #16
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800283a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f023 0320 	bic.w	r3, r3, #32
 8002856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a1e      	ldr	r2, [pc, #120]	; (80028e0 <TIM_OC2_SetConfig+0xd4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d10d      	bne.n	8002888 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002886:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a15      	ldr	r2, [pc, #84]	; (80028e0 <TIM_OC2_SetConfig+0xd4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d113      	bne.n	80028b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800289e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	621a      	str	r2, [r3, #32]
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40010000 	.word	0x40010000

080028e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0303 	bic.w	r3, r3, #3
 800291a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800292c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1d      	ldr	r2, [pc, #116]	; (80029b4 <TIM_OC3_SetConfig+0xd0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10d      	bne.n	800295e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800295c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <TIM_OC3_SetConfig+0xd0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d113      	bne.n	800298e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800296c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	621a      	str	r2, [r3, #32]
}
 80029a8:	bf00      	nop
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40010000 	.word	0x40010000

080029b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	031b      	lsls	r3, r3, #12
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <TIM_OC4_SetConfig+0x9c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d109      	bne.n	8002a2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	019b      	lsls	r3, r3, #6
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40010000 	.word	0x40010000

08002a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f023 0201 	bic.w	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f023 030a 	bic.w	r3, r3, #10
 8002a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	621a      	str	r2, [r3, #32]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b087      	sub	sp, #28
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f023 0210 	bic.w	r2, r3, #16
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ae0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	031b      	lsls	r3, r3, #12
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002af2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	621a      	str	r2, [r3, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f043 0307 	orr.w	r3, r3, #7
 8002b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	609a      	str	r2, [r3, #8]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	021a      	lsls	r2, r3, #8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	bf00      	nop
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a1a      	ldr	r2, [r3, #32]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	401a      	ands	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a1a      	ldr	r2, [r3, #32]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	621a      	str	r2, [r3, #32]
}
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e050      	b.n	8002c92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d018      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d013      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a18      	ldr	r2, [pc, #96]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00e      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a16      	ldr	r2, [pc, #88]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d009      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a15      	ldr	r2, [pc, #84]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d004      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d10c      	bne.n	8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40010000 	.word	0x40010000
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40000800 	.word	0x40000800
 8002cac:	40000c00 	.word	0x40000c00
 8002cb0:	40014000 	.word	0x40014000

08002cb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e03d      	b.n	8002d4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e03f      	b.n	8002dea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe f89e 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2224      	movs	r2, #36	; 0x24
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fddf 	bl	8003960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b08a      	sub	sp, #40	; 0x28
 8002df6:	af02      	add	r7, sp, #8
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d17c      	bne.n	8002f0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_UART_Transmit+0x2c>
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e075      	b.n	8002f0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_UART_Transmit+0x3e>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e06e      	b.n	8002f0e <HAL_UART_Transmit+0x11c>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2221      	movs	r2, #33	; 0x21
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e46:	f7fe f997 	bl	8001178 <HAL_GetTick>
 8002e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	88fa      	ldrh	r2, [r7, #6]
 8002e50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	88fa      	ldrh	r2, [r7, #6]
 8002e56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e60:	d108      	bne.n	8002e74 <HAL_UART_Transmit+0x82>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	e003      	b.n	8002e7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e84:	e02a      	b.n	8002edc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2180      	movs	r1, #128	; 0x80
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fb1f 	bl	80034d4 <UART_WaitOnFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e036      	b.n	8002f0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10b      	bne.n	8002ebe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	3302      	adds	r3, #2
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	e007      	b.n	8002ece <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1cf      	bne.n	8002e86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	2140      	movs	r1, #64	; 0x40
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 faef 	bl	80034d4 <UART_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e006      	b.n	8002f0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e000      	b.n	8002f0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3720      	adds	r7, #32
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	4613      	mov	r3, r2
 8002f22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d11d      	bne.n	8002f6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_UART_Receive_IT+0x26>
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e016      	b.n	8002f6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Receive_IT+0x38>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e00f      	b.n	8002f6e <HAL_UART_Receive_IT+0x58>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fb24 	bl	80035b0 <UART_Start_Receive_IT>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	e000      	b.n	8002f6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
  }
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b0ba      	sub	sp, #232	; 0xe8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10f      	bne.n	8002fde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_UART_IRQHandler+0x66>
 8002fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fc07 	bl	80037ea <UART_Receive_IT>
      return;
 8002fdc:	e256      	b.n	800348c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80de 	beq.w	80031a4 <HAL_UART_IRQHandler+0x22c>
 8002fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d106      	bne.n	8003002 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80d1 	beq.w	80031a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_UART_IRQHandler+0xae>
 800300e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_UART_IRQHandler+0xd2>
 8003032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f043 0202 	orr.w	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800304a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_UART_IRQHandler+0xf6>
 8003056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f043 0204 	orr.w	r2, r3, #4
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d011      	beq.n	800309e <HAL_UART_IRQHandler+0x126>
 800307a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d105      	bne.n	8003092 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f043 0208 	orr.w	r2, r3, #8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 81ed 	beq.w	8003482 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_UART_IRQHandler+0x14e>
 80030b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fb92 	bl	80037ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <HAL_UART_IRQHandler+0x17a>
 80030ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d04f      	beq.n	8003192 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fa9a 	bl	800362c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d141      	bne.n	800318a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3314      	adds	r3, #20
 800310c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800311c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3314      	adds	r3, #20
 800312e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003132:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800313e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800314a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1d9      	bne.n	8003106 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	2b00      	cmp	r3, #0
 8003158:	d013      	beq.n	8003182 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	4a7d      	ldr	r2, [pc, #500]	; (8003354 <HAL_UART_IRQHandler+0x3dc>)
 8003160:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe f993 	bl	8001492 <HAL_DMA_Abort_IT>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d016      	beq.n	80031a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800317c:	4610      	mov	r0, r2
 800317e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003180:	e00e      	b.n	80031a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f990 	bl	80034a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	e00a      	b.n	80031a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f98c 	bl	80034a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003190:	e006      	b.n	80031a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f988 	bl	80034a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800319e:	e170      	b.n	8003482 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	bf00      	nop
    return;
 80031a2:	e16e      	b.n	8003482 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	f040 814a 	bne.w	8003442 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8143 	beq.w	8003442 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 813c 	beq.w	8003442 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	f040 80b4 	bne.w	8003358 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8140 	beq.w	8003486 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800320a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800320e:	429a      	cmp	r2, r3
 8003210:	f080 8139 	bcs.w	8003486 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800321a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003226:	f000 8088 	beq.w	800333a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	330c      	adds	r3, #12
 8003252:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003256:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800325a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003262:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800326e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1d9      	bne.n	800322a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3314      	adds	r3, #20
 800327c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3314      	adds	r3, #20
 8003296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800329a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800329e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e1      	bne.n	8003276 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3314      	adds	r3, #20
 80032b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032bc:	e853 3f00 	ldrex	r3, [r3]
 80032c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3314      	adds	r3, #20
 80032d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e3      	bne.n	80032b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	330c      	adds	r3, #12
 80032fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800330a:	f023 0310 	bic.w	r3, r3, #16
 800330e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	330c      	adds	r3, #12
 8003318:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800331c:	65ba      	str	r2, [r7, #88]	; 0x58
 800331e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003322:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800332a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e3      	bne.n	80032f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe f83c 	bl	80013b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003342:	b29b      	uxth	r3, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	b29b      	uxth	r3, r3
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f8b6 	bl	80034bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003350:	e099      	b.n	8003486 <HAL_UART_IRQHandler+0x50e>
 8003352:	bf00      	nop
 8003354:	080036f3 	.word	0x080036f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 808b 	beq.w	800348a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8086 	beq.w	800348a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	330c      	adds	r3, #12
 8003384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033a2:	647a      	str	r2, [r7, #68]	; 0x44
 80033a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e3      	bne.n	800337e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3314      	adds	r3, #20
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	623b      	str	r3, [r7, #32]
   return(result);
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3314      	adds	r3, #20
 80033d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033da:	633a      	str	r2, [r7, #48]	; 0x30
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e3      	bne.n	80033b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	60fb      	str	r3, [r7, #12]
   return(result);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0310 	bic.w	r3, r3, #16
 8003412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	330c      	adds	r3, #12
 800341c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003420:	61fa      	str	r2, [r7, #28]
 8003422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	69b9      	ldr	r1, [r7, #24]
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	617b      	str	r3, [r7, #20]
   return(result);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e3      	bne.n	80033fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f83e 	bl	80034bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003440:	e023      	b.n	800348a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_UART_IRQHandler+0x4ea>
 800344e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f95d 	bl	800371a <UART_Transmit_IT>
    return;
 8003460:	e014      	b.n	800348c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00e      	beq.n	800348c <HAL_UART_IRQHandler+0x514>
 800346e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f99d 	bl	80037ba <UART_EndTransmit_IT>
    return;
 8003480:	e004      	b.n	800348c <HAL_UART_IRQHandler+0x514>
    return;
 8003482:	bf00      	nop
 8003484:	e002      	b.n	800348c <HAL_UART_IRQHandler+0x514>
      return;
 8003486:	bf00      	nop
 8003488:	e000      	b.n	800348c <HAL_UART_IRQHandler+0x514>
      return;
 800348a:	bf00      	nop
  }
}
 800348c:	37e8      	adds	r7, #232	; 0xe8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop

08003494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b090      	sub	sp, #64	; 0x40
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e4:	e050      	b.n	8003588 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ec:	d04c      	beq.n	8003588 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <UART_WaitOnFlagUntilTimeout+0x30>
 80034f4:	f7fd fe40 	bl	8001178 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003500:	429a      	cmp	r2, r3
 8003502:	d241      	bcs.n	8003588 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	e853 3f00 	ldrex	r3, [r3]
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800351a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003524:	637a      	str	r2, [r7, #52]	; 0x34
 8003526:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800352a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800352c:	e841 2300 	strex	r3, r2, [r1]
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e5      	bne.n	8003504 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3314      	adds	r3, #20
 800353e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	e853 3f00 	ldrex	r3, [r3]
 8003546:	613b      	str	r3, [r7, #16]
   return(result);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f023 0301 	bic.w	r3, r3, #1
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3314      	adds	r3, #20
 8003556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003558:	623a      	str	r2, [r7, #32]
 800355a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355c:	69f9      	ldr	r1, [r7, #28]
 800355e:	6a3a      	ldr	r2, [r7, #32]
 8003560:	e841 2300 	strex	r3, r2, [r1]
 8003564:	61bb      	str	r3, [r7, #24]
   return(result);
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e5      	bne.n	8003538 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e00f      	b.n	80035a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4013      	ands	r3, r2
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	429a      	cmp	r2, r3
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d09f      	beq.n	80034e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3740      	adds	r7, #64	; 0x40
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2222      	movs	r2, #34	; 0x22
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0220 	orr.w	r2, r2, #32
 800361c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b095      	sub	sp, #84	; 0x54
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800364a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003654:	643a      	str	r2, [r7, #64]	; 0x40
 8003656:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800365a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e5      	bne.n	8003634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3314      	adds	r3, #20
 800366e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	61fb      	str	r3, [r7, #28]
   return(result);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3314      	adds	r3, #20
 8003686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003688:	62fa      	str	r2, [r7, #44]	; 0x2c
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e5      	bne.n	8003668 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d119      	bne.n	80036d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f023 0310 	bic.w	r3, r3, #16
 80036ba:	647b      	str	r3, [r7, #68]	; 0x44
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036c4:	61ba      	str	r2, [r7, #24]
 80036c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	6979      	ldr	r1, [r7, #20]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	613b      	str	r3, [r7, #16]
   return(result);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e5      	bne.n	80036a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036e6:	bf00      	nop
 80036e8:	3754      	adds	r7, #84	; 0x54
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7ff fecb 	bl	80034a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b21      	cmp	r3, #33	; 0x21
 800372c:	d13e      	bne.n	80037ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003736:	d114      	bne.n	8003762 <UART_Transmit_IT+0x48>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d110      	bne.n	8003762 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003754:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	621a      	str	r2, [r3, #32]
 8003760:	e008      	b.n	8003774 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	1c59      	adds	r1, r3, #1
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6211      	str	r1, [r2, #32]
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29b      	uxth	r3, r3
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4619      	mov	r1, r3
 8003782:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10f      	bne.n	80037a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003796:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e000      	b.n	80037ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff fe5a 	bl	8003494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b08c      	sub	sp, #48	; 0x30
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b22      	cmp	r3, #34	; 0x22
 80037fc:	f040 80ab 	bne.w	8003956 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003808:	d117      	bne.n	800383a <UART_Receive_IT+0x50>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d113      	bne.n	800383a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003812:	2300      	movs	r3, #0
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	b29b      	uxth	r3, r3
 8003824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003828:	b29a      	uxth	r2, r3
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	1c9a      	adds	r2, r3, #2
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28
 8003838:	e026      	b.n	8003888 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003840:	2300      	movs	r3, #0
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384c:	d007      	beq.n	800385e <UART_Receive_IT+0x74>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10a      	bne.n	800386c <UART_Receive_IT+0x82>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	e008      	b.n	800387e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003878:	b2da      	uxtb	r2, r3
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29b      	uxth	r3, r3
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4619      	mov	r1, r3
 8003896:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003898:	2b00      	cmp	r3, #0
 800389a:	d15a      	bne.n	8003952 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0220 	bic.w	r2, r2, #32
 80038aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d135      	bne.n	8003948 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	330c      	adds	r3, #12
 80038e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	613b      	str	r3, [r7, #16]
   return(result);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f023 0310 	bic.w	r3, r3, #16
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	330c      	adds	r3, #12
 8003900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003902:	623a      	str	r2, [r7, #32]
 8003904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	69f9      	ldr	r1, [r7, #28]
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e5      	bne.n	80038e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b10      	cmp	r3, #16
 8003922:	d10a      	bne.n	800393a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800393e:	4619      	mov	r1, r3
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fdbb 	bl	80034bc <HAL_UARTEx_RxEventCallback>
 8003946:	e002      	b.n	800394e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7fd f82b 	bl	80009a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e002      	b.n	8003958 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3730      	adds	r7, #48	; 0x30
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003964:	b0c0      	sub	sp, #256	; 0x100
 8003966:	af00      	add	r7, sp, #0
 8003968:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	68d9      	ldr	r1, [r3, #12]
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	ea40 0301 	orr.w	r3, r0, r1
 8003988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	431a      	orrs	r2, r3
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	431a      	orrs	r2, r3
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039b8:	f021 010c 	bic.w	r1, r1, #12
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039c6:	430b      	orrs	r3, r1
 80039c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	6999      	ldr	r1, [r3, #24]
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	ea40 0301 	orr.w	r3, r0, r1
 80039e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4b8f      	ldr	r3, [pc, #572]	; (8003c2c <UART_SetConfig+0x2cc>)
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d005      	beq.n	8003a00 <UART_SetConfig+0xa0>
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b8d      	ldr	r3, [pc, #564]	; (8003c30 <UART_SetConfig+0x2d0>)
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d104      	bne.n	8003a0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a00:	f7fe fb32 	bl	8002068 <HAL_RCC_GetPCLK2Freq>
 8003a04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a08:	e003      	b.n	8003a12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a0a:	f7fe fb19 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
 8003a0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1c:	f040 810c 	bne.w	8003c38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a24:	2200      	movs	r2, #0
 8003a26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a32:	4622      	mov	r2, r4
 8003a34:	462b      	mov	r3, r5
 8003a36:	1891      	adds	r1, r2, r2
 8003a38:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a3a:	415b      	adcs	r3, r3
 8003a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a42:	4621      	mov	r1, r4
 8003a44:	eb12 0801 	adds.w	r8, r2, r1
 8003a48:	4629      	mov	r1, r5
 8003a4a:	eb43 0901 	adc.w	r9, r3, r1
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a62:	4690      	mov	r8, r2
 8003a64:	4699      	mov	r9, r3
 8003a66:	4623      	mov	r3, r4
 8003a68:	eb18 0303 	adds.w	r3, r8, r3
 8003a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a70:	462b      	mov	r3, r5
 8003a72:	eb49 0303 	adc.w	r3, r9, r3
 8003a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a8e:	460b      	mov	r3, r1
 8003a90:	18db      	adds	r3, r3, r3
 8003a92:	653b      	str	r3, [r7, #80]	; 0x50
 8003a94:	4613      	mov	r3, r2
 8003a96:	eb42 0303 	adc.w	r3, r2, r3
 8003a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003aa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003aa4:	f7fc fbec 	bl	8000280 <__aeabi_uldivmod>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003aae:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	011c      	lsls	r4, r3, #4
 8003ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ac0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ac4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ac8:	4642      	mov	r2, r8
 8003aca:	464b      	mov	r3, r9
 8003acc:	1891      	adds	r1, r2, r2
 8003ace:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ad0:	415b      	adcs	r3, r3
 8003ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ad8:	4641      	mov	r1, r8
 8003ada:	eb12 0a01 	adds.w	sl, r2, r1
 8003ade:	4649      	mov	r1, r9
 8003ae0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003af0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003af4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003af8:	4692      	mov	sl, r2
 8003afa:	469b      	mov	fp, r3
 8003afc:	4643      	mov	r3, r8
 8003afe:	eb1a 0303 	adds.w	r3, sl, r3
 8003b02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b06:	464b      	mov	r3, r9
 8003b08:	eb4b 0303 	adc.w	r3, fp, r3
 8003b0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b24:	460b      	mov	r3, r1
 8003b26:	18db      	adds	r3, r3, r3
 8003b28:	643b      	str	r3, [r7, #64]	; 0x40
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	eb42 0303 	adc.w	r3, r2, r3
 8003b30:	647b      	str	r3, [r7, #68]	; 0x44
 8003b32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b3a:	f7fc fba1 	bl	8000280 <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4611      	mov	r1, r2
 8003b44:	4b3b      	ldr	r3, [pc, #236]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003b46:	fba3 2301 	umull	r2, r3, r3, r1
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2264      	movs	r2, #100	; 0x64
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	1acb      	subs	r3, r1, r3
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b5a:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b68:	441c      	add	r4, r3
 8003b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	1891      	adds	r1, r2, r2
 8003b82:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b84:	415b      	adcs	r3, r3
 8003b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	1851      	adds	r1, r2, r1
 8003b90:	6339      	str	r1, [r7, #48]	; 0x30
 8003b92:	4649      	mov	r1, r9
 8003b94:	414b      	adcs	r3, r1
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	00cb      	lsls	r3, r1, #3
 8003ba8:	4651      	mov	r1, sl
 8003baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bae:	4651      	mov	r1, sl
 8003bb0:	00ca      	lsls	r2, r1, #3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4642      	mov	r2, r8
 8003bba:	189b      	adds	r3, r3, r2
 8003bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	eb42 0303 	adc.w	r3, r2, r3
 8003bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003be0:	460b      	mov	r3, r1
 8003be2:	18db      	adds	r3, r3, r3
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be6:	4613      	mov	r3, r2
 8003be8:	eb42 0303 	adc.w	r3, r2, r3
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bf2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bf6:	f7fc fb43 	bl	8000280 <__aeabi_uldivmod>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003c00:	fba3 1302 	umull	r1, r3, r3, r2
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	2164      	movs	r1, #100	; 0x64
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	3332      	adds	r3, #50	; 0x32
 8003c12:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	f003 0207 	and.w	r2, r3, #7
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4422      	add	r2, r4
 8003c26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c28:	e105      	b.n	8003e36 <UART_SetConfig+0x4d6>
 8003c2a:	bf00      	nop
 8003c2c:	40011000 	.word	0x40011000
 8003c30:	40011400 	.word	0x40011400
 8003c34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c4a:	4642      	mov	r2, r8
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	1891      	adds	r1, r2, r2
 8003c50:	6239      	str	r1, [r7, #32]
 8003c52:	415b      	adcs	r3, r3
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
 8003c56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c5a:	4641      	mov	r1, r8
 8003c5c:	1854      	adds	r4, r2, r1
 8003c5e:	4649      	mov	r1, r9
 8003c60:	eb43 0501 	adc.w	r5, r3, r1
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	00eb      	lsls	r3, r5, #3
 8003c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c72:	00e2      	lsls	r2, r4, #3
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	4643      	mov	r3, r8
 8003c7a:	18e3      	adds	r3, r4, r3
 8003c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c80:	464b      	mov	r3, r9
 8003c82:	eb45 0303 	adc.w	r3, r5, r3
 8003c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	008b      	lsls	r3, r1, #2
 8003caa:	4621      	mov	r1, r4
 8003cac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	008a      	lsls	r2, r1, #2
 8003cb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003cb8:	f7fc fae2 	bl	8000280 <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4b60      	ldr	r3, [pc, #384]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	011c      	lsls	r4, r3, #4
 8003cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cdc:	4642      	mov	r2, r8
 8003cde:	464b      	mov	r3, r9
 8003ce0:	1891      	adds	r1, r2, r2
 8003ce2:	61b9      	str	r1, [r7, #24]
 8003ce4:	415b      	adcs	r3, r3
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cec:	4641      	mov	r1, r8
 8003cee:	1851      	adds	r1, r2, r1
 8003cf0:	6139      	str	r1, [r7, #16]
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	414b      	adcs	r3, r1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d04:	4659      	mov	r1, fp
 8003d06:	00cb      	lsls	r3, r1, #3
 8003d08:	4651      	mov	r1, sl
 8003d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d0e:	4651      	mov	r1, sl
 8003d10:	00ca      	lsls	r2, r1, #3
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	4642      	mov	r2, r8
 8003d1a:	189b      	adds	r3, r3, r2
 8003d1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d20:	464b      	mov	r3, r9
 8003d22:	460a      	mov	r2, r1
 8003d24:	eb42 0303 	adc.w	r3, r2, r3
 8003d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d44:	4649      	mov	r1, r9
 8003d46:	008b      	lsls	r3, r1, #2
 8003d48:	4641      	mov	r1, r8
 8003d4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4e:	4641      	mov	r1, r8
 8003d50:	008a      	lsls	r2, r1, #2
 8003d52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d56:	f7fc fa93 	bl	8000280 <__aeabi_uldivmod>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003d60:	fba3 1302 	umull	r1, r3, r3, r2
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	2164      	movs	r1, #100	; 0x64
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	3332      	adds	r3, #50	; 0x32
 8003d72:	4a34      	ldr	r2, [pc, #208]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d7e:	441c      	add	r4, r3
 8003d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d84:	2200      	movs	r2, #0
 8003d86:	673b      	str	r3, [r7, #112]	; 0x70
 8003d88:	677a      	str	r2, [r7, #116]	; 0x74
 8003d8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d8e:	4642      	mov	r2, r8
 8003d90:	464b      	mov	r3, r9
 8003d92:	1891      	adds	r1, r2, r2
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	415b      	adcs	r3, r3
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d9e:	4641      	mov	r1, r8
 8003da0:	1851      	adds	r1, r2, r1
 8003da2:	6039      	str	r1, [r7, #0]
 8003da4:	4649      	mov	r1, r9
 8003da6:	414b      	adcs	r3, r1
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003db6:	4659      	mov	r1, fp
 8003db8:	00cb      	lsls	r3, r1, #3
 8003dba:	4651      	mov	r1, sl
 8003dbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dc0:	4651      	mov	r1, sl
 8003dc2:	00ca      	lsls	r2, r1, #3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4642      	mov	r2, r8
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dd0:	464b      	mov	r3, r9
 8003dd2:	460a      	mov	r2, r1
 8003dd4:	eb42 0303 	adc.w	r3, r2, r3
 8003dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	663b      	str	r3, [r7, #96]	; 0x60
 8003de4:	667a      	str	r2, [r7, #100]	; 0x64
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003df2:	4649      	mov	r1, r9
 8003df4:	008b      	lsls	r3, r1, #2
 8003df6:	4641      	mov	r1, r8
 8003df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	008a      	lsls	r2, r1, #2
 8003e00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e04:	f7fc fa3c 	bl	8000280 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2164      	movs	r1, #100	; 0x64
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	3332      	adds	r3, #50	; 0x32
 8003e20:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	f003 020f 	and.w	r2, r3, #15
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4422      	add	r2, r4
 8003e34:	609a      	str	r2, [r3, #8]
}
 8003e36:	bf00      	nop
 8003e38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e42:	bf00      	nop
 8003e44:	51eb851f 	.word	0x51eb851f

08003e48 <__errno>:
 8003e48:	4b01      	ldr	r3, [pc, #4]	; (8003e50 <__errno+0x8>)
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	2000000c 	.word	0x2000000c

08003e54 <__libc_init_array>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	4d0d      	ldr	r5, [pc, #52]	; (8003e8c <__libc_init_array+0x38>)
 8003e58:	4c0d      	ldr	r4, [pc, #52]	; (8003e90 <__libc_init_array+0x3c>)
 8003e5a:	1b64      	subs	r4, r4, r5
 8003e5c:	10a4      	asrs	r4, r4, #2
 8003e5e:	2600      	movs	r6, #0
 8003e60:	42a6      	cmp	r6, r4
 8003e62:	d109      	bne.n	8003e78 <__libc_init_array+0x24>
 8003e64:	4d0b      	ldr	r5, [pc, #44]	; (8003e94 <__libc_init_array+0x40>)
 8003e66:	4c0c      	ldr	r4, [pc, #48]	; (8003e98 <__libc_init_array+0x44>)
 8003e68:	f000 fd1a 	bl	80048a0 <_init>
 8003e6c:	1b64      	subs	r4, r4, r5
 8003e6e:	10a4      	asrs	r4, r4, #2
 8003e70:	2600      	movs	r6, #0
 8003e72:	42a6      	cmp	r6, r4
 8003e74:	d105      	bne.n	8003e82 <__libc_init_array+0x2e>
 8003e76:	bd70      	pop	{r4, r5, r6, pc}
 8003e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7c:	4798      	blx	r3
 8003e7e:	3601      	adds	r6, #1
 8003e80:	e7ee      	b.n	8003e60 <__libc_init_array+0xc>
 8003e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e86:	4798      	blx	r3
 8003e88:	3601      	adds	r6, #1
 8003e8a:	e7f2      	b.n	8003e72 <__libc_init_array+0x1e>
 8003e8c:	08004a64 	.word	0x08004a64
 8003e90:	08004a64 	.word	0x08004a64
 8003e94:	08004a64 	.word	0x08004a64
 8003e98:	08004a6c 	.word	0x08004a6c

08003e9c <memset>:
 8003e9c:	4402      	add	r2, r0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d100      	bne.n	8003ea6 <memset+0xa>
 8003ea4:	4770      	bx	lr
 8003ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eaa:	e7f9      	b.n	8003ea0 <memset+0x4>

08003eac <siprintf>:
 8003eac:	b40e      	push	{r1, r2, r3}
 8003eae:	b500      	push	{lr}
 8003eb0:	b09c      	sub	sp, #112	; 0x70
 8003eb2:	ab1d      	add	r3, sp, #116	; 0x74
 8003eb4:	9002      	str	r0, [sp, #8]
 8003eb6:	9006      	str	r0, [sp, #24]
 8003eb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ebc:	4809      	ldr	r0, [pc, #36]	; (8003ee4 <siprintf+0x38>)
 8003ebe:	9107      	str	r1, [sp, #28]
 8003ec0:	9104      	str	r1, [sp, #16]
 8003ec2:	4909      	ldr	r1, [pc, #36]	; (8003ee8 <siprintf+0x3c>)
 8003ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ec8:	9105      	str	r1, [sp, #20]
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	a902      	add	r1, sp, #8
 8003ed0:	f000 f8f4 	bl	80040bc <_svfiprintf_r>
 8003ed4:	9b02      	ldr	r3, [sp, #8]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	b01c      	add	sp, #112	; 0x70
 8003edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ee0:	b003      	add	sp, #12
 8003ee2:	4770      	bx	lr
 8003ee4:	2000000c 	.word	0x2000000c
 8003ee8:	ffff0208 	.word	0xffff0208

08003eec <_strtol_l.constprop.0>:
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef2:	d001      	beq.n	8003ef8 <_strtol_l.constprop.0+0xc>
 8003ef4:	2b24      	cmp	r3, #36	; 0x24
 8003ef6:	d906      	bls.n	8003f06 <_strtol_l.constprop.0+0x1a>
 8003ef8:	f7ff ffa6 	bl	8003e48 <__errno>
 8003efc:	2316      	movs	r3, #22
 8003efe:	6003      	str	r3, [r0, #0]
 8003f00:	2000      	movs	r0, #0
 8003f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f06:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003fec <_strtol_l.constprop.0+0x100>
 8003f0a:	460d      	mov	r5, r1
 8003f0c:	462e      	mov	r6, r5
 8003f0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f12:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003f16:	f017 0708 	ands.w	r7, r7, #8
 8003f1a:	d1f7      	bne.n	8003f0c <_strtol_l.constprop.0+0x20>
 8003f1c:	2c2d      	cmp	r4, #45	; 0x2d
 8003f1e:	d132      	bne.n	8003f86 <_strtol_l.constprop.0+0x9a>
 8003f20:	782c      	ldrb	r4, [r5, #0]
 8003f22:	2701      	movs	r7, #1
 8003f24:	1cb5      	adds	r5, r6, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d05b      	beq.n	8003fe2 <_strtol_l.constprop.0+0xf6>
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d109      	bne.n	8003f42 <_strtol_l.constprop.0+0x56>
 8003f2e:	2c30      	cmp	r4, #48	; 0x30
 8003f30:	d107      	bne.n	8003f42 <_strtol_l.constprop.0+0x56>
 8003f32:	782c      	ldrb	r4, [r5, #0]
 8003f34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003f38:	2c58      	cmp	r4, #88	; 0x58
 8003f3a:	d14d      	bne.n	8003fd8 <_strtol_l.constprop.0+0xec>
 8003f3c:	786c      	ldrb	r4, [r5, #1]
 8003f3e:	2310      	movs	r3, #16
 8003f40:	3502      	adds	r5, #2
 8003f42:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003f46:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f4a:	f04f 0c00 	mov.w	ip, #0
 8003f4e:	fbb8 f9f3 	udiv	r9, r8, r3
 8003f52:	4666      	mov	r6, ip
 8003f54:	fb03 8a19 	mls	sl, r3, r9, r8
 8003f58:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003f5c:	f1be 0f09 	cmp.w	lr, #9
 8003f60:	d816      	bhi.n	8003f90 <_strtol_l.constprop.0+0xa4>
 8003f62:	4674      	mov	r4, lr
 8003f64:	42a3      	cmp	r3, r4
 8003f66:	dd24      	ble.n	8003fb2 <_strtol_l.constprop.0+0xc6>
 8003f68:	f1bc 0f00 	cmp.w	ip, #0
 8003f6c:	db1e      	blt.n	8003fac <_strtol_l.constprop.0+0xc0>
 8003f6e:	45b1      	cmp	r9, r6
 8003f70:	d31c      	bcc.n	8003fac <_strtol_l.constprop.0+0xc0>
 8003f72:	d101      	bne.n	8003f78 <_strtol_l.constprop.0+0x8c>
 8003f74:	45a2      	cmp	sl, r4
 8003f76:	db19      	blt.n	8003fac <_strtol_l.constprop.0+0xc0>
 8003f78:	fb06 4603 	mla	r6, r6, r3, r4
 8003f7c:	f04f 0c01 	mov.w	ip, #1
 8003f80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f84:	e7e8      	b.n	8003f58 <_strtol_l.constprop.0+0x6c>
 8003f86:	2c2b      	cmp	r4, #43	; 0x2b
 8003f88:	bf04      	itt	eq
 8003f8a:	782c      	ldrbeq	r4, [r5, #0]
 8003f8c:	1cb5      	addeq	r5, r6, #2
 8003f8e:	e7ca      	b.n	8003f26 <_strtol_l.constprop.0+0x3a>
 8003f90:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003f94:	f1be 0f19 	cmp.w	lr, #25
 8003f98:	d801      	bhi.n	8003f9e <_strtol_l.constprop.0+0xb2>
 8003f9a:	3c37      	subs	r4, #55	; 0x37
 8003f9c:	e7e2      	b.n	8003f64 <_strtol_l.constprop.0+0x78>
 8003f9e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003fa2:	f1be 0f19 	cmp.w	lr, #25
 8003fa6:	d804      	bhi.n	8003fb2 <_strtol_l.constprop.0+0xc6>
 8003fa8:	3c57      	subs	r4, #87	; 0x57
 8003faa:	e7db      	b.n	8003f64 <_strtol_l.constprop.0+0x78>
 8003fac:	f04f 3cff 	mov.w	ip, #4294967295
 8003fb0:	e7e6      	b.n	8003f80 <_strtol_l.constprop.0+0x94>
 8003fb2:	f1bc 0f00 	cmp.w	ip, #0
 8003fb6:	da05      	bge.n	8003fc4 <_strtol_l.constprop.0+0xd8>
 8003fb8:	2322      	movs	r3, #34	; 0x22
 8003fba:	6003      	str	r3, [r0, #0]
 8003fbc:	4646      	mov	r6, r8
 8003fbe:	b942      	cbnz	r2, 8003fd2 <_strtol_l.constprop.0+0xe6>
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	e79e      	b.n	8003f02 <_strtol_l.constprop.0+0x16>
 8003fc4:	b107      	cbz	r7, 8003fc8 <_strtol_l.constprop.0+0xdc>
 8003fc6:	4276      	negs	r6, r6
 8003fc8:	2a00      	cmp	r2, #0
 8003fca:	d0f9      	beq.n	8003fc0 <_strtol_l.constprop.0+0xd4>
 8003fcc:	f1bc 0f00 	cmp.w	ip, #0
 8003fd0:	d000      	beq.n	8003fd4 <_strtol_l.constprop.0+0xe8>
 8003fd2:	1e69      	subs	r1, r5, #1
 8003fd4:	6011      	str	r1, [r2, #0]
 8003fd6:	e7f3      	b.n	8003fc0 <_strtol_l.constprop.0+0xd4>
 8003fd8:	2430      	movs	r4, #48	; 0x30
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1b1      	bne.n	8003f42 <_strtol_l.constprop.0+0x56>
 8003fde:	2308      	movs	r3, #8
 8003fe0:	e7af      	b.n	8003f42 <_strtol_l.constprop.0+0x56>
 8003fe2:	2c30      	cmp	r4, #48	; 0x30
 8003fe4:	d0a5      	beq.n	8003f32 <_strtol_l.constprop.0+0x46>
 8003fe6:	230a      	movs	r3, #10
 8003fe8:	e7ab      	b.n	8003f42 <_strtol_l.constprop.0+0x56>
 8003fea:	bf00      	nop
 8003fec:	08004929 	.word	0x08004929

08003ff0 <strtol>:
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	460a      	mov	r2, r1
 8003ff4:	4601      	mov	r1, r0
 8003ff6:	4802      	ldr	r0, [pc, #8]	; (8004000 <strtol+0x10>)
 8003ff8:	6800      	ldr	r0, [r0, #0]
 8003ffa:	f7ff bf77 	b.w	8003eec <_strtol_l.constprop.0>
 8003ffe:	bf00      	nop
 8004000:	2000000c 	.word	0x2000000c

08004004 <__ssputs_r>:
 8004004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004008:	688e      	ldr	r6, [r1, #8]
 800400a:	429e      	cmp	r6, r3
 800400c:	4682      	mov	sl, r0
 800400e:	460c      	mov	r4, r1
 8004010:	4690      	mov	r8, r2
 8004012:	461f      	mov	r7, r3
 8004014:	d838      	bhi.n	8004088 <__ssputs_r+0x84>
 8004016:	898a      	ldrh	r2, [r1, #12]
 8004018:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800401c:	d032      	beq.n	8004084 <__ssputs_r+0x80>
 800401e:	6825      	ldr	r5, [r4, #0]
 8004020:	6909      	ldr	r1, [r1, #16]
 8004022:	eba5 0901 	sub.w	r9, r5, r1
 8004026:	6965      	ldr	r5, [r4, #20]
 8004028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800402c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004030:	3301      	adds	r3, #1
 8004032:	444b      	add	r3, r9
 8004034:	106d      	asrs	r5, r5, #1
 8004036:	429d      	cmp	r5, r3
 8004038:	bf38      	it	cc
 800403a:	461d      	movcc	r5, r3
 800403c:	0553      	lsls	r3, r2, #21
 800403e:	d531      	bpl.n	80040a4 <__ssputs_r+0xa0>
 8004040:	4629      	mov	r1, r5
 8004042:	f000 fb63 	bl	800470c <_malloc_r>
 8004046:	4606      	mov	r6, r0
 8004048:	b950      	cbnz	r0, 8004060 <__ssputs_r+0x5c>
 800404a:	230c      	movs	r3, #12
 800404c:	f8ca 3000 	str.w	r3, [sl]
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004056:	81a3      	strh	r3, [r4, #12]
 8004058:	f04f 30ff 	mov.w	r0, #4294967295
 800405c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004060:	6921      	ldr	r1, [r4, #16]
 8004062:	464a      	mov	r2, r9
 8004064:	f000 fabe 	bl	80045e4 <memcpy>
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800406e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004072:	81a3      	strh	r3, [r4, #12]
 8004074:	6126      	str	r6, [r4, #16]
 8004076:	6165      	str	r5, [r4, #20]
 8004078:	444e      	add	r6, r9
 800407a:	eba5 0509 	sub.w	r5, r5, r9
 800407e:	6026      	str	r6, [r4, #0]
 8004080:	60a5      	str	r5, [r4, #8]
 8004082:	463e      	mov	r6, r7
 8004084:	42be      	cmp	r6, r7
 8004086:	d900      	bls.n	800408a <__ssputs_r+0x86>
 8004088:	463e      	mov	r6, r7
 800408a:	6820      	ldr	r0, [r4, #0]
 800408c:	4632      	mov	r2, r6
 800408e:	4641      	mov	r1, r8
 8004090:	f000 fab6 	bl	8004600 <memmove>
 8004094:	68a3      	ldr	r3, [r4, #8]
 8004096:	1b9b      	subs	r3, r3, r6
 8004098:	60a3      	str	r3, [r4, #8]
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	4433      	add	r3, r6
 800409e:	6023      	str	r3, [r4, #0]
 80040a0:	2000      	movs	r0, #0
 80040a2:	e7db      	b.n	800405c <__ssputs_r+0x58>
 80040a4:	462a      	mov	r2, r5
 80040a6:	f000 fba5 	bl	80047f4 <_realloc_r>
 80040aa:	4606      	mov	r6, r0
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d1e1      	bne.n	8004074 <__ssputs_r+0x70>
 80040b0:	6921      	ldr	r1, [r4, #16]
 80040b2:	4650      	mov	r0, sl
 80040b4:	f000 fabe 	bl	8004634 <_free_r>
 80040b8:	e7c7      	b.n	800404a <__ssputs_r+0x46>
	...

080040bc <_svfiprintf_r>:
 80040bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c0:	4698      	mov	r8, r3
 80040c2:	898b      	ldrh	r3, [r1, #12]
 80040c4:	061b      	lsls	r3, r3, #24
 80040c6:	b09d      	sub	sp, #116	; 0x74
 80040c8:	4607      	mov	r7, r0
 80040ca:	460d      	mov	r5, r1
 80040cc:	4614      	mov	r4, r2
 80040ce:	d50e      	bpl.n	80040ee <_svfiprintf_r+0x32>
 80040d0:	690b      	ldr	r3, [r1, #16]
 80040d2:	b963      	cbnz	r3, 80040ee <_svfiprintf_r+0x32>
 80040d4:	2140      	movs	r1, #64	; 0x40
 80040d6:	f000 fb19 	bl	800470c <_malloc_r>
 80040da:	6028      	str	r0, [r5, #0]
 80040dc:	6128      	str	r0, [r5, #16]
 80040de:	b920      	cbnz	r0, 80040ea <_svfiprintf_r+0x2e>
 80040e0:	230c      	movs	r3, #12
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	e0d1      	b.n	800428e <_svfiprintf_r+0x1d2>
 80040ea:	2340      	movs	r3, #64	; 0x40
 80040ec:	616b      	str	r3, [r5, #20]
 80040ee:	2300      	movs	r3, #0
 80040f0:	9309      	str	r3, [sp, #36]	; 0x24
 80040f2:	2320      	movs	r3, #32
 80040f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80040fc:	2330      	movs	r3, #48	; 0x30
 80040fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80042a8 <_svfiprintf_r+0x1ec>
 8004102:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004106:	f04f 0901 	mov.w	r9, #1
 800410a:	4623      	mov	r3, r4
 800410c:	469a      	mov	sl, r3
 800410e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004112:	b10a      	cbz	r2, 8004118 <_svfiprintf_r+0x5c>
 8004114:	2a25      	cmp	r2, #37	; 0x25
 8004116:	d1f9      	bne.n	800410c <_svfiprintf_r+0x50>
 8004118:	ebba 0b04 	subs.w	fp, sl, r4
 800411c:	d00b      	beq.n	8004136 <_svfiprintf_r+0x7a>
 800411e:	465b      	mov	r3, fp
 8004120:	4622      	mov	r2, r4
 8004122:	4629      	mov	r1, r5
 8004124:	4638      	mov	r0, r7
 8004126:	f7ff ff6d 	bl	8004004 <__ssputs_r>
 800412a:	3001      	adds	r0, #1
 800412c:	f000 80aa 	beq.w	8004284 <_svfiprintf_r+0x1c8>
 8004130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004132:	445a      	add	r2, fp
 8004134:	9209      	str	r2, [sp, #36]	; 0x24
 8004136:	f89a 3000 	ldrb.w	r3, [sl]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 80a2 	beq.w	8004284 <_svfiprintf_r+0x1c8>
 8004140:	2300      	movs	r3, #0
 8004142:	f04f 32ff 	mov.w	r2, #4294967295
 8004146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800414a:	f10a 0a01 	add.w	sl, sl, #1
 800414e:	9304      	str	r3, [sp, #16]
 8004150:	9307      	str	r3, [sp, #28]
 8004152:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004156:	931a      	str	r3, [sp, #104]	; 0x68
 8004158:	4654      	mov	r4, sl
 800415a:	2205      	movs	r2, #5
 800415c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004160:	4851      	ldr	r0, [pc, #324]	; (80042a8 <_svfiprintf_r+0x1ec>)
 8004162:	f7fc f83d 	bl	80001e0 <memchr>
 8004166:	9a04      	ldr	r2, [sp, #16]
 8004168:	b9d8      	cbnz	r0, 80041a2 <_svfiprintf_r+0xe6>
 800416a:	06d0      	lsls	r0, r2, #27
 800416c:	bf44      	itt	mi
 800416e:	2320      	movmi	r3, #32
 8004170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004174:	0711      	lsls	r1, r2, #28
 8004176:	bf44      	itt	mi
 8004178:	232b      	movmi	r3, #43	; 0x2b
 800417a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800417e:	f89a 3000 	ldrb.w	r3, [sl]
 8004182:	2b2a      	cmp	r3, #42	; 0x2a
 8004184:	d015      	beq.n	80041b2 <_svfiprintf_r+0xf6>
 8004186:	9a07      	ldr	r2, [sp, #28]
 8004188:	4654      	mov	r4, sl
 800418a:	2000      	movs	r0, #0
 800418c:	f04f 0c0a 	mov.w	ip, #10
 8004190:	4621      	mov	r1, r4
 8004192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004196:	3b30      	subs	r3, #48	; 0x30
 8004198:	2b09      	cmp	r3, #9
 800419a:	d94e      	bls.n	800423a <_svfiprintf_r+0x17e>
 800419c:	b1b0      	cbz	r0, 80041cc <_svfiprintf_r+0x110>
 800419e:	9207      	str	r2, [sp, #28]
 80041a0:	e014      	b.n	80041cc <_svfiprintf_r+0x110>
 80041a2:	eba0 0308 	sub.w	r3, r0, r8
 80041a6:	fa09 f303 	lsl.w	r3, r9, r3
 80041aa:	4313      	orrs	r3, r2
 80041ac:	9304      	str	r3, [sp, #16]
 80041ae:	46a2      	mov	sl, r4
 80041b0:	e7d2      	b.n	8004158 <_svfiprintf_r+0x9c>
 80041b2:	9b03      	ldr	r3, [sp, #12]
 80041b4:	1d19      	adds	r1, r3, #4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	9103      	str	r1, [sp, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	bfbb      	ittet	lt
 80041be:	425b      	neglt	r3, r3
 80041c0:	f042 0202 	orrlt.w	r2, r2, #2
 80041c4:	9307      	strge	r3, [sp, #28]
 80041c6:	9307      	strlt	r3, [sp, #28]
 80041c8:	bfb8      	it	lt
 80041ca:	9204      	strlt	r2, [sp, #16]
 80041cc:	7823      	ldrb	r3, [r4, #0]
 80041ce:	2b2e      	cmp	r3, #46	; 0x2e
 80041d0:	d10c      	bne.n	80041ec <_svfiprintf_r+0x130>
 80041d2:	7863      	ldrb	r3, [r4, #1]
 80041d4:	2b2a      	cmp	r3, #42	; 0x2a
 80041d6:	d135      	bne.n	8004244 <_svfiprintf_r+0x188>
 80041d8:	9b03      	ldr	r3, [sp, #12]
 80041da:	1d1a      	adds	r2, r3, #4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	9203      	str	r2, [sp, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bfb8      	it	lt
 80041e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80041e8:	3402      	adds	r4, #2
 80041ea:	9305      	str	r3, [sp, #20]
 80041ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042b8 <_svfiprintf_r+0x1fc>
 80041f0:	7821      	ldrb	r1, [r4, #0]
 80041f2:	2203      	movs	r2, #3
 80041f4:	4650      	mov	r0, sl
 80041f6:	f7fb fff3 	bl	80001e0 <memchr>
 80041fa:	b140      	cbz	r0, 800420e <_svfiprintf_r+0x152>
 80041fc:	2340      	movs	r3, #64	; 0x40
 80041fe:	eba0 000a 	sub.w	r0, r0, sl
 8004202:	fa03 f000 	lsl.w	r0, r3, r0
 8004206:	9b04      	ldr	r3, [sp, #16]
 8004208:	4303      	orrs	r3, r0
 800420a:	3401      	adds	r4, #1
 800420c:	9304      	str	r3, [sp, #16]
 800420e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004212:	4826      	ldr	r0, [pc, #152]	; (80042ac <_svfiprintf_r+0x1f0>)
 8004214:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004218:	2206      	movs	r2, #6
 800421a:	f7fb ffe1 	bl	80001e0 <memchr>
 800421e:	2800      	cmp	r0, #0
 8004220:	d038      	beq.n	8004294 <_svfiprintf_r+0x1d8>
 8004222:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <_svfiprintf_r+0x1f4>)
 8004224:	bb1b      	cbnz	r3, 800426e <_svfiprintf_r+0x1b2>
 8004226:	9b03      	ldr	r3, [sp, #12]
 8004228:	3307      	adds	r3, #7
 800422a:	f023 0307 	bic.w	r3, r3, #7
 800422e:	3308      	adds	r3, #8
 8004230:	9303      	str	r3, [sp, #12]
 8004232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004234:	4433      	add	r3, r6
 8004236:	9309      	str	r3, [sp, #36]	; 0x24
 8004238:	e767      	b.n	800410a <_svfiprintf_r+0x4e>
 800423a:	fb0c 3202 	mla	r2, ip, r2, r3
 800423e:	460c      	mov	r4, r1
 8004240:	2001      	movs	r0, #1
 8004242:	e7a5      	b.n	8004190 <_svfiprintf_r+0xd4>
 8004244:	2300      	movs	r3, #0
 8004246:	3401      	adds	r4, #1
 8004248:	9305      	str	r3, [sp, #20]
 800424a:	4619      	mov	r1, r3
 800424c:	f04f 0c0a 	mov.w	ip, #10
 8004250:	4620      	mov	r0, r4
 8004252:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004256:	3a30      	subs	r2, #48	; 0x30
 8004258:	2a09      	cmp	r2, #9
 800425a:	d903      	bls.n	8004264 <_svfiprintf_r+0x1a8>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0c5      	beq.n	80041ec <_svfiprintf_r+0x130>
 8004260:	9105      	str	r1, [sp, #20]
 8004262:	e7c3      	b.n	80041ec <_svfiprintf_r+0x130>
 8004264:	fb0c 2101 	mla	r1, ip, r1, r2
 8004268:	4604      	mov	r4, r0
 800426a:	2301      	movs	r3, #1
 800426c:	e7f0      	b.n	8004250 <_svfiprintf_r+0x194>
 800426e:	ab03      	add	r3, sp, #12
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	462a      	mov	r2, r5
 8004274:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <_svfiprintf_r+0x1f8>)
 8004276:	a904      	add	r1, sp, #16
 8004278:	4638      	mov	r0, r7
 800427a:	f3af 8000 	nop.w
 800427e:	1c42      	adds	r2, r0, #1
 8004280:	4606      	mov	r6, r0
 8004282:	d1d6      	bne.n	8004232 <_svfiprintf_r+0x176>
 8004284:	89ab      	ldrh	r3, [r5, #12]
 8004286:	065b      	lsls	r3, r3, #25
 8004288:	f53f af2c 	bmi.w	80040e4 <_svfiprintf_r+0x28>
 800428c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800428e:	b01d      	add	sp, #116	; 0x74
 8004290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004294:	ab03      	add	r3, sp, #12
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	462a      	mov	r2, r5
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <_svfiprintf_r+0x1f8>)
 800429c:	a904      	add	r1, sp, #16
 800429e:	4638      	mov	r0, r7
 80042a0:	f000 f87a 	bl	8004398 <_printf_i>
 80042a4:	e7eb      	b.n	800427e <_svfiprintf_r+0x1c2>
 80042a6:	bf00      	nop
 80042a8:	08004a29 	.word	0x08004a29
 80042ac:	08004a33 	.word	0x08004a33
 80042b0:	00000000 	.word	0x00000000
 80042b4:	08004005 	.word	0x08004005
 80042b8:	08004a2f 	.word	0x08004a2f

080042bc <_printf_common>:
 80042bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c0:	4616      	mov	r6, r2
 80042c2:	4699      	mov	r9, r3
 80042c4:	688a      	ldr	r2, [r1, #8]
 80042c6:	690b      	ldr	r3, [r1, #16]
 80042c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042cc:	4293      	cmp	r3, r2
 80042ce:	bfb8      	it	lt
 80042d0:	4613      	movlt	r3, r2
 80042d2:	6033      	str	r3, [r6, #0]
 80042d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042d8:	4607      	mov	r7, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	b10a      	cbz	r2, 80042e2 <_printf_common+0x26>
 80042de:	3301      	adds	r3, #1
 80042e0:	6033      	str	r3, [r6, #0]
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	0699      	lsls	r1, r3, #26
 80042e6:	bf42      	ittt	mi
 80042e8:	6833      	ldrmi	r3, [r6, #0]
 80042ea:	3302      	addmi	r3, #2
 80042ec:	6033      	strmi	r3, [r6, #0]
 80042ee:	6825      	ldr	r5, [r4, #0]
 80042f0:	f015 0506 	ands.w	r5, r5, #6
 80042f4:	d106      	bne.n	8004304 <_printf_common+0x48>
 80042f6:	f104 0a19 	add.w	sl, r4, #25
 80042fa:	68e3      	ldr	r3, [r4, #12]
 80042fc:	6832      	ldr	r2, [r6, #0]
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	42ab      	cmp	r3, r5
 8004302:	dc26      	bgt.n	8004352 <_printf_common+0x96>
 8004304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004308:	1e13      	subs	r3, r2, #0
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	bf18      	it	ne
 800430e:	2301      	movne	r3, #1
 8004310:	0692      	lsls	r2, r2, #26
 8004312:	d42b      	bmi.n	800436c <_printf_common+0xb0>
 8004314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004318:	4649      	mov	r1, r9
 800431a:	4638      	mov	r0, r7
 800431c:	47c0      	blx	r8
 800431e:	3001      	adds	r0, #1
 8004320:	d01e      	beq.n	8004360 <_printf_common+0xa4>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	68e5      	ldr	r5, [r4, #12]
 8004326:	6832      	ldr	r2, [r6, #0]
 8004328:	f003 0306 	and.w	r3, r3, #6
 800432c:	2b04      	cmp	r3, #4
 800432e:	bf08      	it	eq
 8004330:	1aad      	subeq	r5, r5, r2
 8004332:	68a3      	ldr	r3, [r4, #8]
 8004334:	6922      	ldr	r2, [r4, #16]
 8004336:	bf0c      	ite	eq
 8004338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800433c:	2500      	movne	r5, #0
 800433e:	4293      	cmp	r3, r2
 8004340:	bfc4      	itt	gt
 8004342:	1a9b      	subgt	r3, r3, r2
 8004344:	18ed      	addgt	r5, r5, r3
 8004346:	2600      	movs	r6, #0
 8004348:	341a      	adds	r4, #26
 800434a:	42b5      	cmp	r5, r6
 800434c:	d11a      	bne.n	8004384 <_printf_common+0xc8>
 800434e:	2000      	movs	r0, #0
 8004350:	e008      	b.n	8004364 <_printf_common+0xa8>
 8004352:	2301      	movs	r3, #1
 8004354:	4652      	mov	r2, sl
 8004356:	4649      	mov	r1, r9
 8004358:	4638      	mov	r0, r7
 800435a:	47c0      	blx	r8
 800435c:	3001      	adds	r0, #1
 800435e:	d103      	bne.n	8004368 <_printf_common+0xac>
 8004360:	f04f 30ff 	mov.w	r0, #4294967295
 8004364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004368:	3501      	adds	r5, #1
 800436a:	e7c6      	b.n	80042fa <_printf_common+0x3e>
 800436c:	18e1      	adds	r1, r4, r3
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	2030      	movs	r0, #48	; 0x30
 8004372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004376:	4422      	add	r2, r4
 8004378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800437c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004380:	3302      	adds	r3, #2
 8004382:	e7c7      	b.n	8004314 <_printf_common+0x58>
 8004384:	2301      	movs	r3, #1
 8004386:	4622      	mov	r2, r4
 8004388:	4649      	mov	r1, r9
 800438a:	4638      	mov	r0, r7
 800438c:	47c0      	blx	r8
 800438e:	3001      	adds	r0, #1
 8004390:	d0e6      	beq.n	8004360 <_printf_common+0xa4>
 8004392:	3601      	adds	r6, #1
 8004394:	e7d9      	b.n	800434a <_printf_common+0x8e>
	...

08004398 <_printf_i>:
 8004398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800439c:	7e0f      	ldrb	r7, [r1, #24]
 800439e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043a0:	2f78      	cmp	r7, #120	; 0x78
 80043a2:	4691      	mov	r9, r2
 80043a4:	4680      	mov	r8, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	469a      	mov	sl, r3
 80043aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043ae:	d807      	bhi.n	80043c0 <_printf_i+0x28>
 80043b0:	2f62      	cmp	r7, #98	; 0x62
 80043b2:	d80a      	bhi.n	80043ca <_printf_i+0x32>
 80043b4:	2f00      	cmp	r7, #0
 80043b6:	f000 80d8 	beq.w	800456a <_printf_i+0x1d2>
 80043ba:	2f58      	cmp	r7, #88	; 0x58
 80043bc:	f000 80a3 	beq.w	8004506 <_printf_i+0x16e>
 80043c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043c8:	e03a      	b.n	8004440 <_printf_i+0xa8>
 80043ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043ce:	2b15      	cmp	r3, #21
 80043d0:	d8f6      	bhi.n	80043c0 <_printf_i+0x28>
 80043d2:	a101      	add	r1, pc, #4	; (adr r1, 80043d8 <_printf_i+0x40>)
 80043d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043d8:	08004431 	.word	0x08004431
 80043dc:	08004445 	.word	0x08004445
 80043e0:	080043c1 	.word	0x080043c1
 80043e4:	080043c1 	.word	0x080043c1
 80043e8:	080043c1 	.word	0x080043c1
 80043ec:	080043c1 	.word	0x080043c1
 80043f0:	08004445 	.word	0x08004445
 80043f4:	080043c1 	.word	0x080043c1
 80043f8:	080043c1 	.word	0x080043c1
 80043fc:	080043c1 	.word	0x080043c1
 8004400:	080043c1 	.word	0x080043c1
 8004404:	08004551 	.word	0x08004551
 8004408:	08004475 	.word	0x08004475
 800440c:	08004533 	.word	0x08004533
 8004410:	080043c1 	.word	0x080043c1
 8004414:	080043c1 	.word	0x080043c1
 8004418:	08004573 	.word	0x08004573
 800441c:	080043c1 	.word	0x080043c1
 8004420:	08004475 	.word	0x08004475
 8004424:	080043c1 	.word	0x080043c1
 8004428:	080043c1 	.word	0x080043c1
 800442c:	0800453b 	.word	0x0800453b
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	1d1a      	adds	r2, r3, #4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	602a      	str	r2, [r5, #0]
 8004438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800443c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004440:	2301      	movs	r3, #1
 8004442:	e0a3      	b.n	800458c <_printf_i+0x1f4>
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	6829      	ldr	r1, [r5, #0]
 8004448:	0606      	lsls	r6, r0, #24
 800444a:	f101 0304 	add.w	r3, r1, #4
 800444e:	d50a      	bpl.n	8004466 <_printf_i+0xce>
 8004450:	680e      	ldr	r6, [r1, #0]
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	2e00      	cmp	r6, #0
 8004456:	da03      	bge.n	8004460 <_printf_i+0xc8>
 8004458:	232d      	movs	r3, #45	; 0x2d
 800445a:	4276      	negs	r6, r6
 800445c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004460:	485e      	ldr	r0, [pc, #376]	; (80045dc <_printf_i+0x244>)
 8004462:	230a      	movs	r3, #10
 8004464:	e019      	b.n	800449a <_printf_i+0x102>
 8004466:	680e      	ldr	r6, [r1, #0]
 8004468:	602b      	str	r3, [r5, #0]
 800446a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800446e:	bf18      	it	ne
 8004470:	b236      	sxthne	r6, r6
 8004472:	e7ef      	b.n	8004454 <_printf_i+0xbc>
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	6820      	ldr	r0, [r4, #0]
 8004478:	1d19      	adds	r1, r3, #4
 800447a:	6029      	str	r1, [r5, #0]
 800447c:	0601      	lsls	r1, r0, #24
 800447e:	d501      	bpl.n	8004484 <_printf_i+0xec>
 8004480:	681e      	ldr	r6, [r3, #0]
 8004482:	e002      	b.n	800448a <_printf_i+0xf2>
 8004484:	0646      	lsls	r6, r0, #25
 8004486:	d5fb      	bpl.n	8004480 <_printf_i+0xe8>
 8004488:	881e      	ldrh	r6, [r3, #0]
 800448a:	4854      	ldr	r0, [pc, #336]	; (80045dc <_printf_i+0x244>)
 800448c:	2f6f      	cmp	r7, #111	; 0x6f
 800448e:	bf0c      	ite	eq
 8004490:	2308      	moveq	r3, #8
 8004492:	230a      	movne	r3, #10
 8004494:	2100      	movs	r1, #0
 8004496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800449a:	6865      	ldr	r5, [r4, #4]
 800449c:	60a5      	str	r5, [r4, #8]
 800449e:	2d00      	cmp	r5, #0
 80044a0:	bfa2      	ittt	ge
 80044a2:	6821      	ldrge	r1, [r4, #0]
 80044a4:	f021 0104 	bicge.w	r1, r1, #4
 80044a8:	6021      	strge	r1, [r4, #0]
 80044aa:	b90e      	cbnz	r6, 80044b0 <_printf_i+0x118>
 80044ac:	2d00      	cmp	r5, #0
 80044ae:	d04d      	beq.n	800454c <_printf_i+0x1b4>
 80044b0:	4615      	mov	r5, r2
 80044b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80044b6:	fb03 6711 	mls	r7, r3, r1, r6
 80044ba:	5dc7      	ldrb	r7, [r0, r7]
 80044bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044c0:	4637      	mov	r7, r6
 80044c2:	42bb      	cmp	r3, r7
 80044c4:	460e      	mov	r6, r1
 80044c6:	d9f4      	bls.n	80044b2 <_printf_i+0x11a>
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d10b      	bne.n	80044e4 <_printf_i+0x14c>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	07de      	lsls	r6, r3, #31
 80044d0:	d508      	bpl.n	80044e4 <_printf_i+0x14c>
 80044d2:	6923      	ldr	r3, [r4, #16]
 80044d4:	6861      	ldr	r1, [r4, #4]
 80044d6:	4299      	cmp	r1, r3
 80044d8:	bfde      	ittt	le
 80044da:	2330      	movle	r3, #48	; 0x30
 80044dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044e4:	1b52      	subs	r2, r2, r5
 80044e6:	6122      	str	r2, [r4, #16]
 80044e8:	f8cd a000 	str.w	sl, [sp]
 80044ec:	464b      	mov	r3, r9
 80044ee:	aa03      	add	r2, sp, #12
 80044f0:	4621      	mov	r1, r4
 80044f2:	4640      	mov	r0, r8
 80044f4:	f7ff fee2 	bl	80042bc <_printf_common>
 80044f8:	3001      	adds	r0, #1
 80044fa:	d14c      	bne.n	8004596 <_printf_i+0x1fe>
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004500:	b004      	add	sp, #16
 8004502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004506:	4835      	ldr	r0, [pc, #212]	; (80045dc <_printf_i+0x244>)
 8004508:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800450c:	6829      	ldr	r1, [r5, #0]
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	f851 6b04 	ldr.w	r6, [r1], #4
 8004514:	6029      	str	r1, [r5, #0]
 8004516:	061d      	lsls	r5, r3, #24
 8004518:	d514      	bpl.n	8004544 <_printf_i+0x1ac>
 800451a:	07df      	lsls	r7, r3, #31
 800451c:	bf44      	itt	mi
 800451e:	f043 0320 	orrmi.w	r3, r3, #32
 8004522:	6023      	strmi	r3, [r4, #0]
 8004524:	b91e      	cbnz	r6, 800452e <_printf_i+0x196>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	f023 0320 	bic.w	r3, r3, #32
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	2310      	movs	r3, #16
 8004530:	e7b0      	b.n	8004494 <_printf_i+0xfc>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	f043 0320 	orr.w	r3, r3, #32
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	2378      	movs	r3, #120	; 0x78
 800453c:	4828      	ldr	r0, [pc, #160]	; (80045e0 <_printf_i+0x248>)
 800453e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004542:	e7e3      	b.n	800450c <_printf_i+0x174>
 8004544:	0659      	lsls	r1, r3, #25
 8004546:	bf48      	it	mi
 8004548:	b2b6      	uxthmi	r6, r6
 800454a:	e7e6      	b.n	800451a <_printf_i+0x182>
 800454c:	4615      	mov	r5, r2
 800454e:	e7bb      	b.n	80044c8 <_printf_i+0x130>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	6826      	ldr	r6, [r4, #0]
 8004554:	6961      	ldr	r1, [r4, #20]
 8004556:	1d18      	adds	r0, r3, #4
 8004558:	6028      	str	r0, [r5, #0]
 800455a:	0635      	lsls	r5, r6, #24
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	d501      	bpl.n	8004564 <_printf_i+0x1cc>
 8004560:	6019      	str	r1, [r3, #0]
 8004562:	e002      	b.n	800456a <_printf_i+0x1d2>
 8004564:	0670      	lsls	r0, r6, #25
 8004566:	d5fb      	bpl.n	8004560 <_printf_i+0x1c8>
 8004568:	8019      	strh	r1, [r3, #0]
 800456a:	2300      	movs	r3, #0
 800456c:	6123      	str	r3, [r4, #16]
 800456e:	4615      	mov	r5, r2
 8004570:	e7ba      	b.n	80044e8 <_printf_i+0x150>
 8004572:	682b      	ldr	r3, [r5, #0]
 8004574:	1d1a      	adds	r2, r3, #4
 8004576:	602a      	str	r2, [r5, #0]
 8004578:	681d      	ldr	r5, [r3, #0]
 800457a:	6862      	ldr	r2, [r4, #4]
 800457c:	2100      	movs	r1, #0
 800457e:	4628      	mov	r0, r5
 8004580:	f7fb fe2e 	bl	80001e0 <memchr>
 8004584:	b108      	cbz	r0, 800458a <_printf_i+0x1f2>
 8004586:	1b40      	subs	r0, r0, r5
 8004588:	6060      	str	r0, [r4, #4]
 800458a:	6863      	ldr	r3, [r4, #4]
 800458c:	6123      	str	r3, [r4, #16]
 800458e:	2300      	movs	r3, #0
 8004590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004594:	e7a8      	b.n	80044e8 <_printf_i+0x150>
 8004596:	6923      	ldr	r3, [r4, #16]
 8004598:	462a      	mov	r2, r5
 800459a:	4649      	mov	r1, r9
 800459c:	4640      	mov	r0, r8
 800459e:	47d0      	blx	sl
 80045a0:	3001      	adds	r0, #1
 80045a2:	d0ab      	beq.n	80044fc <_printf_i+0x164>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	079b      	lsls	r3, r3, #30
 80045a8:	d413      	bmi.n	80045d2 <_printf_i+0x23a>
 80045aa:	68e0      	ldr	r0, [r4, #12]
 80045ac:	9b03      	ldr	r3, [sp, #12]
 80045ae:	4298      	cmp	r0, r3
 80045b0:	bfb8      	it	lt
 80045b2:	4618      	movlt	r0, r3
 80045b4:	e7a4      	b.n	8004500 <_printf_i+0x168>
 80045b6:	2301      	movs	r3, #1
 80045b8:	4632      	mov	r2, r6
 80045ba:	4649      	mov	r1, r9
 80045bc:	4640      	mov	r0, r8
 80045be:	47d0      	blx	sl
 80045c0:	3001      	adds	r0, #1
 80045c2:	d09b      	beq.n	80044fc <_printf_i+0x164>
 80045c4:	3501      	adds	r5, #1
 80045c6:	68e3      	ldr	r3, [r4, #12]
 80045c8:	9903      	ldr	r1, [sp, #12]
 80045ca:	1a5b      	subs	r3, r3, r1
 80045cc:	42ab      	cmp	r3, r5
 80045ce:	dcf2      	bgt.n	80045b6 <_printf_i+0x21e>
 80045d0:	e7eb      	b.n	80045aa <_printf_i+0x212>
 80045d2:	2500      	movs	r5, #0
 80045d4:	f104 0619 	add.w	r6, r4, #25
 80045d8:	e7f5      	b.n	80045c6 <_printf_i+0x22e>
 80045da:	bf00      	nop
 80045dc:	08004a3a 	.word	0x08004a3a
 80045e0:	08004a4b 	.word	0x08004a4b

080045e4 <memcpy>:
 80045e4:	440a      	add	r2, r1
 80045e6:	4291      	cmp	r1, r2
 80045e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045ec:	d100      	bne.n	80045f0 <memcpy+0xc>
 80045ee:	4770      	bx	lr
 80045f0:	b510      	push	{r4, lr}
 80045f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045fa:	4291      	cmp	r1, r2
 80045fc:	d1f9      	bne.n	80045f2 <memcpy+0xe>
 80045fe:	bd10      	pop	{r4, pc}

08004600 <memmove>:
 8004600:	4288      	cmp	r0, r1
 8004602:	b510      	push	{r4, lr}
 8004604:	eb01 0402 	add.w	r4, r1, r2
 8004608:	d902      	bls.n	8004610 <memmove+0x10>
 800460a:	4284      	cmp	r4, r0
 800460c:	4623      	mov	r3, r4
 800460e:	d807      	bhi.n	8004620 <memmove+0x20>
 8004610:	1e43      	subs	r3, r0, #1
 8004612:	42a1      	cmp	r1, r4
 8004614:	d008      	beq.n	8004628 <memmove+0x28>
 8004616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800461a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800461e:	e7f8      	b.n	8004612 <memmove+0x12>
 8004620:	4402      	add	r2, r0
 8004622:	4601      	mov	r1, r0
 8004624:	428a      	cmp	r2, r1
 8004626:	d100      	bne.n	800462a <memmove+0x2a>
 8004628:	bd10      	pop	{r4, pc}
 800462a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800462e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004632:	e7f7      	b.n	8004624 <memmove+0x24>

08004634 <_free_r>:
 8004634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004636:	2900      	cmp	r1, #0
 8004638:	d044      	beq.n	80046c4 <_free_r+0x90>
 800463a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800463e:	9001      	str	r0, [sp, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f1a1 0404 	sub.w	r4, r1, #4
 8004646:	bfb8      	it	lt
 8004648:	18e4      	addlt	r4, r4, r3
 800464a:	f000 f913 	bl	8004874 <__malloc_lock>
 800464e:	4a1e      	ldr	r2, [pc, #120]	; (80046c8 <_free_r+0x94>)
 8004650:	9801      	ldr	r0, [sp, #4]
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	b933      	cbnz	r3, 8004664 <_free_r+0x30>
 8004656:	6063      	str	r3, [r4, #4]
 8004658:	6014      	str	r4, [r2, #0]
 800465a:	b003      	add	sp, #12
 800465c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004660:	f000 b90e 	b.w	8004880 <__malloc_unlock>
 8004664:	42a3      	cmp	r3, r4
 8004666:	d908      	bls.n	800467a <_free_r+0x46>
 8004668:	6825      	ldr	r5, [r4, #0]
 800466a:	1961      	adds	r1, r4, r5
 800466c:	428b      	cmp	r3, r1
 800466e:	bf01      	itttt	eq
 8004670:	6819      	ldreq	r1, [r3, #0]
 8004672:	685b      	ldreq	r3, [r3, #4]
 8004674:	1949      	addeq	r1, r1, r5
 8004676:	6021      	streq	r1, [r4, #0]
 8004678:	e7ed      	b.n	8004656 <_free_r+0x22>
 800467a:	461a      	mov	r2, r3
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	b10b      	cbz	r3, 8004684 <_free_r+0x50>
 8004680:	42a3      	cmp	r3, r4
 8004682:	d9fa      	bls.n	800467a <_free_r+0x46>
 8004684:	6811      	ldr	r1, [r2, #0]
 8004686:	1855      	adds	r5, r2, r1
 8004688:	42a5      	cmp	r5, r4
 800468a:	d10b      	bne.n	80046a4 <_free_r+0x70>
 800468c:	6824      	ldr	r4, [r4, #0]
 800468e:	4421      	add	r1, r4
 8004690:	1854      	adds	r4, r2, r1
 8004692:	42a3      	cmp	r3, r4
 8004694:	6011      	str	r1, [r2, #0]
 8004696:	d1e0      	bne.n	800465a <_free_r+0x26>
 8004698:	681c      	ldr	r4, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	6053      	str	r3, [r2, #4]
 800469e:	4421      	add	r1, r4
 80046a0:	6011      	str	r1, [r2, #0]
 80046a2:	e7da      	b.n	800465a <_free_r+0x26>
 80046a4:	d902      	bls.n	80046ac <_free_r+0x78>
 80046a6:	230c      	movs	r3, #12
 80046a8:	6003      	str	r3, [r0, #0]
 80046aa:	e7d6      	b.n	800465a <_free_r+0x26>
 80046ac:	6825      	ldr	r5, [r4, #0]
 80046ae:	1961      	adds	r1, r4, r5
 80046b0:	428b      	cmp	r3, r1
 80046b2:	bf04      	itt	eq
 80046b4:	6819      	ldreq	r1, [r3, #0]
 80046b6:	685b      	ldreq	r3, [r3, #4]
 80046b8:	6063      	str	r3, [r4, #4]
 80046ba:	bf04      	itt	eq
 80046bc:	1949      	addeq	r1, r1, r5
 80046be:	6021      	streq	r1, [r4, #0]
 80046c0:	6054      	str	r4, [r2, #4]
 80046c2:	e7ca      	b.n	800465a <_free_r+0x26>
 80046c4:	b003      	add	sp, #12
 80046c6:	bd30      	pop	{r4, r5, pc}
 80046c8:	200001f4 	.word	0x200001f4

080046cc <sbrk_aligned>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	4e0e      	ldr	r6, [pc, #56]	; (8004708 <sbrk_aligned+0x3c>)
 80046d0:	460c      	mov	r4, r1
 80046d2:	6831      	ldr	r1, [r6, #0]
 80046d4:	4605      	mov	r5, r0
 80046d6:	b911      	cbnz	r1, 80046de <sbrk_aligned+0x12>
 80046d8:	f000 f8bc 	bl	8004854 <_sbrk_r>
 80046dc:	6030      	str	r0, [r6, #0]
 80046de:	4621      	mov	r1, r4
 80046e0:	4628      	mov	r0, r5
 80046e2:	f000 f8b7 	bl	8004854 <_sbrk_r>
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	d00a      	beq.n	8004700 <sbrk_aligned+0x34>
 80046ea:	1cc4      	adds	r4, r0, #3
 80046ec:	f024 0403 	bic.w	r4, r4, #3
 80046f0:	42a0      	cmp	r0, r4
 80046f2:	d007      	beq.n	8004704 <sbrk_aligned+0x38>
 80046f4:	1a21      	subs	r1, r4, r0
 80046f6:	4628      	mov	r0, r5
 80046f8:	f000 f8ac 	bl	8004854 <_sbrk_r>
 80046fc:	3001      	adds	r0, #1
 80046fe:	d101      	bne.n	8004704 <sbrk_aligned+0x38>
 8004700:	f04f 34ff 	mov.w	r4, #4294967295
 8004704:	4620      	mov	r0, r4
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	200001f8 	.word	0x200001f8

0800470c <_malloc_r>:
 800470c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004710:	1ccd      	adds	r5, r1, #3
 8004712:	f025 0503 	bic.w	r5, r5, #3
 8004716:	3508      	adds	r5, #8
 8004718:	2d0c      	cmp	r5, #12
 800471a:	bf38      	it	cc
 800471c:	250c      	movcc	r5, #12
 800471e:	2d00      	cmp	r5, #0
 8004720:	4607      	mov	r7, r0
 8004722:	db01      	blt.n	8004728 <_malloc_r+0x1c>
 8004724:	42a9      	cmp	r1, r5
 8004726:	d905      	bls.n	8004734 <_malloc_r+0x28>
 8004728:	230c      	movs	r3, #12
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	2600      	movs	r6, #0
 800472e:	4630      	mov	r0, r6
 8004730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004734:	4e2e      	ldr	r6, [pc, #184]	; (80047f0 <_malloc_r+0xe4>)
 8004736:	f000 f89d 	bl	8004874 <__malloc_lock>
 800473a:	6833      	ldr	r3, [r6, #0]
 800473c:	461c      	mov	r4, r3
 800473e:	bb34      	cbnz	r4, 800478e <_malloc_r+0x82>
 8004740:	4629      	mov	r1, r5
 8004742:	4638      	mov	r0, r7
 8004744:	f7ff ffc2 	bl	80046cc <sbrk_aligned>
 8004748:	1c43      	adds	r3, r0, #1
 800474a:	4604      	mov	r4, r0
 800474c:	d14d      	bne.n	80047ea <_malloc_r+0xde>
 800474e:	6834      	ldr	r4, [r6, #0]
 8004750:	4626      	mov	r6, r4
 8004752:	2e00      	cmp	r6, #0
 8004754:	d140      	bne.n	80047d8 <_malloc_r+0xcc>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	4631      	mov	r1, r6
 800475a:	4638      	mov	r0, r7
 800475c:	eb04 0803 	add.w	r8, r4, r3
 8004760:	f000 f878 	bl	8004854 <_sbrk_r>
 8004764:	4580      	cmp	r8, r0
 8004766:	d13a      	bne.n	80047de <_malloc_r+0xd2>
 8004768:	6821      	ldr	r1, [r4, #0]
 800476a:	3503      	adds	r5, #3
 800476c:	1a6d      	subs	r5, r5, r1
 800476e:	f025 0503 	bic.w	r5, r5, #3
 8004772:	3508      	adds	r5, #8
 8004774:	2d0c      	cmp	r5, #12
 8004776:	bf38      	it	cc
 8004778:	250c      	movcc	r5, #12
 800477a:	4629      	mov	r1, r5
 800477c:	4638      	mov	r0, r7
 800477e:	f7ff ffa5 	bl	80046cc <sbrk_aligned>
 8004782:	3001      	adds	r0, #1
 8004784:	d02b      	beq.n	80047de <_malloc_r+0xd2>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	442b      	add	r3, r5
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	e00e      	b.n	80047ac <_malloc_r+0xa0>
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	1b52      	subs	r2, r2, r5
 8004792:	d41e      	bmi.n	80047d2 <_malloc_r+0xc6>
 8004794:	2a0b      	cmp	r2, #11
 8004796:	d916      	bls.n	80047c6 <_malloc_r+0xba>
 8004798:	1961      	adds	r1, r4, r5
 800479a:	42a3      	cmp	r3, r4
 800479c:	6025      	str	r5, [r4, #0]
 800479e:	bf18      	it	ne
 80047a0:	6059      	strne	r1, [r3, #4]
 80047a2:	6863      	ldr	r3, [r4, #4]
 80047a4:	bf08      	it	eq
 80047a6:	6031      	streq	r1, [r6, #0]
 80047a8:	5162      	str	r2, [r4, r5]
 80047aa:	604b      	str	r3, [r1, #4]
 80047ac:	4638      	mov	r0, r7
 80047ae:	f104 060b 	add.w	r6, r4, #11
 80047b2:	f000 f865 	bl	8004880 <__malloc_unlock>
 80047b6:	f026 0607 	bic.w	r6, r6, #7
 80047ba:	1d23      	adds	r3, r4, #4
 80047bc:	1af2      	subs	r2, r6, r3
 80047be:	d0b6      	beq.n	800472e <_malloc_r+0x22>
 80047c0:	1b9b      	subs	r3, r3, r6
 80047c2:	50a3      	str	r3, [r4, r2]
 80047c4:	e7b3      	b.n	800472e <_malloc_r+0x22>
 80047c6:	6862      	ldr	r2, [r4, #4]
 80047c8:	42a3      	cmp	r3, r4
 80047ca:	bf0c      	ite	eq
 80047cc:	6032      	streq	r2, [r6, #0]
 80047ce:	605a      	strne	r2, [r3, #4]
 80047d0:	e7ec      	b.n	80047ac <_malloc_r+0xa0>
 80047d2:	4623      	mov	r3, r4
 80047d4:	6864      	ldr	r4, [r4, #4]
 80047d6:	e7b2      	b.n	800473e <_malloc_r+0x32>
 80047d8:	4634      	mov	r4, r6
 80047da:	6876      	ldr	r6, [r6, #4]
 80047dc:	e7b9      	b.n	8004752 <_malloc_r+0x46>
 80047de:	230c      	movs	r3, #12
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4638      	mov	r0, r7
 80047e4:	f000 f84c 	bl	8004880 <__malloc_unlock>
 80047e8:	e7a1      	b.n	800472e <_malloc_r+0x22>
 80047ea:	6025      	str	r5, [r4, #0]
 80047ec:	e7de      	b.n	80047ac <_malloc_r+0xa0>
 80047ee:	bf00      	nop
 80047f0:	200001f4 	.word	0x200001f4

080047f4 <_realloc_r>:
 80047f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f8:	4680      	mov	r8, r0
 80047fa:	4614      	mov	r4, r2
 80047fc:	460e      	mov	r6, r1
 80047fe:	b921      	cbnz	r1, 800480a <_realloc_r+0x16>
 8004800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004804:	4611      	mov	r1, r2
 8004806:	f7ff bf81 	b.w	800470c <_malloc_r>
 800480a:	b92a      	cbnz	r2, 8004818 <_realloc_r+0x24>
 800480c:	f7ff ff12 	bl	8004634 <_free_r>
 8004810:	4625      	mov	r5, r4
 8004812:	4628      	mov	r0, r5
 8004814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004818:	f000 f838 	bl	800488c <_malloc_usable_size_r>
 800481c:	4284      	cmp	r4, r0
 800481e:	4607      	mov	r7, r0
 8004820:	d802      	bhi.n	8004828 <_realloc_r+0x34>
 8004822:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004826:	d812      	bhi.n	800484e <_realloc_r+0x5a>
 8004828:	4621      	mov	r1, r4
 800482a:	4640      	mov	r0, r8
 800482c:	f7ff ff6e 	bl	800470c <_malloc_r>
 8004830:	4605      	mov	r5, r0
 8004832:	2800      	cmp	r0, #0
 8004834:	d0ed      	beq.n	8004812 <_realloc_r+0x1e>
 8004836:	42bc      	cmp	r4, r7
 8004838:	4622      	mov	r2, r4
 800483a:	4631      	mov	r1, r6
 800483c:	bf28      	it	cs
 800483e:	463a      	movcs	r2, r7
 8004840:	f7ff fed0 	bl	80045e4 <memcpy>
 8004844:	4631      	mov	r1, r6
 8004846:	4640      	mov	r0, r8
 8004848:	f7ff fef4 	bl	8004634 <_free_r>
 800484c:	e7e1      	b.n	8004812 <_realloc_r+0x1e>
 800484e:	4635      	mov	r5, r6
 8004850:	e7df      	b.n	8004812 <_realloc_r+0x1e>
	...

08004854 <_sbrk_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4d06      	ldr	r5, [pc, #24]	; (8004870 <_sbrk_r+0x1c>)
 8004858:	2300      	movs	r3, #0
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	602b      	str	r3, [r5, #0]
 8004860:	f7fc fbb2 	bl	8000fc8 <_sbrk>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_sbrk_r+0x1a>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_sbrk_r+0x1a>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	200001fc 	.word	0x200001fc

08004874 <__malloc_lock>:
 8004874:	4801      	ldr	r0, [pc, #4]	; (800487c <__malloc_lock+0x8>)
 8004876:	f000 b811 	b.w	800489c <__retarget_lock_acquire_recursive>
 800487a:	bf00      	nop
 800487c:	20000200 	.word	0x20000200

08004880 <__malloc_unlock>:
 8004880:	4801      	ldr	r0, [pc, #4]	; (8004888 <__malloc_unlock+0x8>)
 8004882:	f000 b80c 	b.w	800489e <__retarget_lock_release_recursive>
 8004886:	bf00      	nop
 8004888:	20000200 	.word	0x20000200

0800488c <_malloc_usable_size_r>:
 800488c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004890:	1f18      	subs	r0, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	bfbc      	itt	lt
 8004896:	580b      	ldrlt	r3, [r1, r0]
 8004898:	18c0      	addlt	r0, r0, r3
 800489a:	4770      	bx	lr

0800489c <__retarget_lock_acquire_recursive>:
 800489c:	4770      	bx	lr

0800489e <__retarget_lock_release_recursive>:
 800489e:	4770      	bx	lr

080048a0 <_init>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	bf00      	nop
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr

080048ac <_fini>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	bf00      	nop
 80048b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b2:	bc08      	pop	{r3}
 80048b4:	469e      	mov	lr, r3
 80048b6:	4770      	bx	lr
